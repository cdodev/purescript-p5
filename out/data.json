{
    "project": {},
    "files": {
        "../p5.js/src/color/color_conversion.js": {
            "name": "../p5.js/src/color/color_conversion.js",
            "modules": {
                "Color Conversion": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/color/creating_reading.js": {
            "name": "../p5.js/src/color/creating_reading.js",
            "modules": {
                "Creating & Reading": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/color/p5.Color.js": {
            "name": "../p5.js/src/color/p5.Color.js",
            "modules": {},
            "classes": {
                "p5.Color": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/color/setting.js": {
            "name": "../p5.js/src/color/setting.js",
            "modules": {
                "Setting": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/shape/2d_primitives.js": {
            "name": "../p5.js/src/core/shape/2d_primitives.js",
            "modules": {
                "2D Primitives": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/shape/attributes.js": {
            "name": "../p5.js/src/core/shape/attributes.js",
            "modules": {
                "Attributes": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/shape/curves.js": {
            "name": "../p5.js/src/core/shape/curves.js",
            "modules": {
                "Curves": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/shape/vertex.js": {
            "name": "../p5.js/src/core/shape/vertex.js",
            "modules": {
                "Vertex": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/constants.js": {
            "name": "../p5.js/src/core/constants.js",
            "modules": {
                "Constants": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/environment.js": {
            "name": "../p5.js/src/core/environment.js",
            "modules": {
                "Environment": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/error_helpers.js": {
            "name": "../p5.js/src/core/error_helpers.js",
            "modules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/helpers.js": {
            "name": "../p5.js/src/core/helpers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/core/init.js": {
            "name": "../p5.js/src/core/init.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/core/legacy.js": {
            "name": "../p5.js/src/core/legacy.js",
            "modules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/main.js": {
            "name": "../p5.js/src/core/main.js",
            "modules": {
                "Structure": 1
            },
            "classes": {
                "p5": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/p5.Element.js": {
            "name": "../p5.js/src/core/p5.Element.js",
            "modules": {
                "DOM": 1
            },
            "classes": {
                "p5.Element": 1
            },
            "fors": {
                "p5.Element": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/p5.Graphics.js": {
            "name": "../p5.js/src/core/p5.Graphics.js",
            "modules": {
                "Rendering": 1
            },
            "classes": {
                "p5.Graphics": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/p5.Renderer.js": {
            "name": "../p5.js/src/core/p5.Renderer.js",
            "modules": {},
            "classes": {
                "p5.Renderer": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/p5.Renderer2D.js": {
            "name": "../p5.js/src/core/p5.Renderer2D.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/core/rendering.js": {
            "name": "../p5.js/src/core/rendering.js",
            "modules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/shim.js": {
            "name": "../p5.js/src/core/shim.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/core/structure.js": {
            "name": "../p5.js/src/core/structure.js",
            "modules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/core/transform.js": {
            "name": "../p5.js/src/core/transform.js",
            "modules": {
                "Transform": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/data/p5.TypedDict.js": {
            "name": "../p5.js/src/data/p5.TypedDict.js",
            "modules": {
                "Dictionary": 1
            },
            "classes": {
                "p5.TypedDict": 1,
                "p5.StringDict": 1,
                "p5.NumberDict": 1
            },
            "fors": {
                "p5.TypedDict": 1,
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/events/acceleration.js": {
            "name": "../p5.js/src/events/acceleration.js",
            "modules": {
                "Acceleration": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/events/keyboard.js": {
            "name": "../p5.js/src/events/keyboard.js",
            "modules": {
                "Keyboard": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/events/mouse.js": {
            "name": "../p5.js/src/events/mouse.js",
            "modules": {
                "Mouse": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/events/touch.js": {
            "name": "../p5.js/src/events/touch.js",
            "modules": {
                "Touch": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/image/filters.js": {
            "name": "../p5.js/src/image/filters.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/image/image.js": {
            "name": "../p5.js/src/image/image.js",
            "modules": {
                "Image": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/image/loading_displaying.js": {
            "name": "../p5.js/src/image/loading_displaying.js",
            "modules": {
                "Loading & Displaying": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/image/p5.Image.js": {
            "name": "../p5.js/src/image/p5.Image.js",
            "modules": {},
            "classes": {
                "p5.Image": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/image/pixels.js": {
            "name": "../p5.js/src/image/pixels.js",
            "modules": {
                "Pixels": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/io/files.js": {
            "name": "../p5.js/src/io/files.js",
            "modules": {
                "Input": 1,
                "Output": 1
            },
            "classes": {
                "p5.PrintWriter": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/io/p5.Table.js": {
            "name": "../p5.js/src/io/p5.Table.js",
            "modules": {
                "Table": 1
            },
            "classes": {
                "p5.Table": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/io/p5.TableRow.js": {
            "name": "../p5.js/src/io/p5.TableRow.js",
            "modules": {},
            "classes": {
                "p5.TableRow": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/io/p5.XML.js": {
            "name": "../p5.js/src/io/p5.XML.js",
            "modules": {
                "XML": 1
            },
            "classes": {
                "p5.XML": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/math/calculation.js": {
            "name": "../p5.js/src/math/calculation.js",
            "modules": {
                "Calculation": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/math/math.js": {
            "name": "../p5.js/src/math/math.js",
            "modules": {
                "Math": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/math/noise.js": {
            "name": "../p5.js/src/math/noise.js",
            "modules": {
                "Noise": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/math/p5.Vector.js": {
            "name": "../p5.js/src/math/p5.Vector.js",
            "modules": {},
            "classes": {
                "p5.Vector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/math/random.js": {
            "name": "../p5.js/src/math/random.js",
            "modules": {
                "Random": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/math/trigonometry.js": {
            "name": "../p5.js/src/math/trigonometry.js",
            "modules": {
                "Trigonometry": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/typography/attributes.js": {
            "name": "../p5.js/src/typography/attributes.js",
            "modules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/typography/loading_displaying.js": {
            "name": "../p5.js/src/typography/loading_displaying.js",
            "modules": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/typography/p5.Font.js": {
            "name": "../p5.js/src/typography/p5.Font.js",
            "modules": {
                "Font": 1
            },
            "classes": {
                "p5.Font": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/utilities/array_functions.js": {
            "name": "../p5.js/src/utilities/array_functions.js",
            "modules": {
                "Array Functions": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/utilities/conversion.js": {
            "name": "../p5.js/src/utilities/conversion.js",
            "modules": {
                "Conversion": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/utilities/string_functions.js": {
            "name": "../p5.js/src/utilities/string_functions.js",
            "modules": {
                "String Functions": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/utilities/time_date.js": {
            "name": "../p5.js/src/utilities/time_date.js",
            "modules": {
                "Time & Date": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/webgl/3d_primitives.js": {
            "name": "../p5.js/src/webgl/3d_primitives.js",
            "modules": {
                "3D Primitives": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/webgl/interaction.js": {
            "name": "../p5.js/src/webgl/interaction.js",
            "modules": {
                "Interaction": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/webgl/light.js": {
            "name": "../p5.js/src/webgl/light.js",
            "modules": {
                "Lights": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/webgl/loading.js": {
            "name": "../p5.js/src/webgl/loading.js",
            "modules": {
                "3D Models": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/webgl/material.js": {
            "name": "../p5.js/src/webgl/material.js",
            "modules": {
                "Material": 1
            },
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/webgl/p5.Camera.js": {
            "name": "../p5.js/src/webgl/p5.Camera.js",
            "modules": {
                "Camera": 1
            },
            "classes": {
                "p5.Camera": 1
            },
            "fors": {
                "p5": 1,
                "p5.Camera": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/webgl/p5.Geometry.js": {
            "name": "../p5.js/src/webgl/p5.Geometry.js",
            "modules": {},
            "classes": {
                "p5.Geometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/webgl/p5.Matrix.js": {
            "name": "../p5.js/src/webgl/p5.Matrix.js",
            "modules": {},
            "classes": {
                "p5.Matrix": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/webgl/p5.RendererGL.Immediate.js": {
            "name": "../p5.js/src/webgl/p5.RendererGL.Immediate.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/webgl/p5.RendererGL.Retained.js": {
            "name": "../p5.js/src/webgl/p5.RendererGL.Retained.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../p5.js/src/webgl/p5.RendererGL.js": {
            "name": "../p5.js/src/webgl/p5.RendererGL.js",
            "modules": {},
            "classes": {
                "p5.RendererGL": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/webgl/p5.Shader.js": {
            "name": "../p5.js/src/webgl/p5.Shader.js",
            "modules": {
                "Shaders": 1
            },
            "classes": {
                "p5.Shader": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/webgl/p5.Texture.js": {
            "name": "../p5.js/src/webgl/p5.Texture.js",
            "modules": {},
            "classes": {
                "p5.Texture": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "../p5.js/src/webgl/text.js": {
            "name": "../p5.js/src/webgl/text.js",
            "modules": {},
            "classes": {
                "ImageInfos": 1,
                "FontInfo": 1,
                "Cubic": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Color": {
            "name": "Color",
            "submodules": {
                "Color Conversion": 1,
                "Creating & Reading": 1,
                "Setting": 1
            },
            "elements": {},
            "classes": {
                "p5.Color": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 16
        },
        "Color Conversion": {
            "name": "Color Conversion",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Color",
            "namespace": "",
            "file": "../p5.js/src/color/color_conversion.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Creating & Reading": {
            "name": "Creating & Reading",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.Color": 1
            },
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Color",
            "namespace": "",
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 16,
            "requires": [
                "core",
                "constants"
            ],
            "description": "Each color stores the color mode and level maxes that applied at the\ntime of its construction. These are used to interpret the input arguments\n(at construction and later for that instance of color) and to format the\noutput e.g. when <a href=\"#/p5/saturation\">saturation()</a> is requested.\n\nInternally we store an array representing the ideal RGBA values in floating\npoint form, normalized from 0 to 1. From this we calculate the closest\nscreen color (RGBA levels from 0 to 255) and expose this to the renderer.\n\nWe also cache normalized, floating point components of the color in various\nrepresentations as they are calculated. This is done to prevent repeating a\nconversion that has already been performed."
        },
        "Setting": {
            "name": "Setting",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Color",
            "namespace": "",
            "file": "../p5.js/src/color/setting.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Shape": {
            "name": "Shape",
            "submodules": {
                "2D Primitives": 1,
                "Curves": 1,
                "Vertex": 1,
                "3D Primitives": 1,
                "3D Models": 1
            },
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "2D Primitives": {
            "name": "2D Primitives",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Shape",
            "namespace": "",
            "file": "../p5.js/src/core/shape/2d_primitives.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Attributes": {
            "name": "Attributes",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Typography",
            "namespace": "",
            "file": "../p5.js/src/core/shape/attributes.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Curves": {
            "name": "Curves",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Shape",
            "namespace": "",
            "file": "../p5.js/src/core/shape/curves.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Vertex": {
            "name": "Vertex",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Shape",
            "namespace": "",
            "file": "../p5.js/src/core/shape/vertex.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Constants": {
            "name": "Constants",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "Constants",
            "file": "../p5.js/src/core/constants.js",
            "line": 1
        },
        "Environment": {
            "name": "Environment",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "Environment",
            "file": "../p5.js/src/core/environment.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Structure": {
            "name": "Structure",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "IO",
            "file": "../p5.js/src/core/main.js",
            "line": 1,
            "requires": [
                "constants"
            ]
        },
        "DOM": {
            "name": "DOM",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.Element": 1
            },
            "fors": {
                "p5.Element": 1
            },
            "namespaces": {},
            "module": "DOM",
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 11,
            "description": "Base class for all elements added to a sketch, including canvas,\ngraphics buffers, and other HTML elements. Methods in blue are\nincluded in the core functionality, methods in brown are added\nwith the <a href=\"http://p5js.org/reference/#/libraries/p5.dom\">p5.dom\nlibrary</a>.\nIt is not called directly, but <a href=\"#/p5.Element\">p5.Element</a>\nobjects are created by calling <a href=\"#/p5/createCanvas\">createCanvas</a>, <a href=\"#/p5/createGraphics\">createGraphics</a>,\nor in the p5.dom library, <a href=\"#/p5/createDiv\">createDiv</a>, <a href=\"#/p5/createImg\">createImg</a>, <a href=\"#/p5/createInput\">createInput</a>, etc."
        },
        "Rendering": {
            "name": "Rendering",
            "submodules": {
                "undefined": 1
            },
            "elements": {},
            "classes": {
                "p5.RendererGL": 1,
                "p5.Graphics": 1,
                "p5.Renderer": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "Rendering",
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 427,
            "description": "Thin wrapper around a renderer, to be used for creating a\ngraphics buffer object. Use this class if you need\nto draw into an off-screen graphics buffer. The two parameters define the\nwidth and height in pixels. The fields and methods for this class are\nextensive, but mirror the normal drawing API for p5."
        },
        "Transform": {
            "name": "Transform",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "Transform",
            "file": "../p5.js/src/core/transform.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Data": {
            "name": "Data",
            "submodules": {
                "Dictionary": 1,
                "Array Functions": 1,
                "Conversion": 1,
                "String Functions": 1
            },
            "elements": {},
            "classes": {
                "p5.TypedDict": 1,
                "p5.StringDict": 1,
                "p5.NumberDict": 1
            },
            "fors": {
                "p5.TypedDict": 1,
                "p5": 1
            },
            "namespaces": {},
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 410
        },
        "Dictionary": {
            "name": "Dictionary",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.TypedDict": 1,
                "p5.StringDict": 1,
                "p5.NumberDict": 1
            },
            "fors": {
                "p5.TypedDict": 1,
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Data",
            "namespace": "",
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 410,
            "requires": [
                "core\n\nThis module defines the p5 methods for the p5 Dictionary classes.\nThe classes StringDict and NumberDict are for storing and working\nwith key-value pairs."
            ],
            "description": "Base class for all p5.Dictionary types. Specifically\n typed Dictionary classes inherit from this class."
        },
        "Events": {
            "name": "Events",
            "submodules": {
                "Acceleration": 1,
                "Keyboard": 1,
                "Mouse": 1,
                "Touch": 1
            },
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "namespaces": {}
        },
        "Acceleration": {
            "name": "Acceleration",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Events",
            "namespace": "",
            "file": "../p5.js/src/events/acceleration.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Keyboard": {
            "name": "Keyboard",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Events",
            "namespace": "",
            "file": "../p5.js/src/events/keyboard.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Mouse": {
            "name": "Mouse",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Events",
            "namespace": "",
            "file": "../p5.js/src/events/mouse.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Touch": {
            "name": "Touch",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Events",
            "namespace": "",
            "file": "../p5.js/src/events/touch.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Image": {
            "name": "Image",
            "submodules": {
                "Pixels": 1
            },
            "elements": {},
            "classes": {
                "p5.Image": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "Image",
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 23,
            "requires": [
                "core"
            ],
            "description": "Creates a new <a href=\"#/p5.Image\">p5.Image</a>. A <a href=\"#/p5.Image\">p5.Image</a> is a canvas backed representation of an\nimage.\n<br><br>\np5 can display .gif, .jpg and .png images. Images may be displayed\nin 2D and 3D space. Before an image is used, it must be loaded with the\n<a href=\"#/p5/loadImage\">loadImage()</a> function. The <a href=\"#/p5.Image\">p5.Image</a> class contains fields for the width and\nheight of the image, as well as an array called <a href=\"#/p5.Image/pixels\">pixels[]</a> that contains the\nvalues for every pixel in the image.\n<br><br>\nThe methods described below allow easy access to the image's pixels and\nalpha channel and simplify the process of compositing.\n<br><br>\nBefore using the <a href=\"#/p5.Image/pixels\">pixels[]</a> array, be sure to use the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> method on\nthe image to make sure that the pixel data is properly loaded."
        },
        "Loading & Displaying": {
            "name": "Loading & Displaying",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Typography",
            "namespace": "",
            "file": "../p5.js/src/image/loading_displaying.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Pixels": {
            "name": "Pixels",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Image",
            "namespace": "",
            "file": "../p5.js/src/image/pixels.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "IO": {
            "name": "IO",
            "submodules": {
                "Structure": 1,
                "Input": 1,
                "Output": 1,
                "Table": 1,
                "XML": 1,
                "Time & Date": 1
            },
            "elements": {},
            "classes": {
                "p5": 1,
                "p5.PrintWriter": 1,
                "p5.Table": 1,
                "p5.TableRow": 1,
                "p5.XML": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 11
        },
        "Input": {
            "name": "Input",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "IO",
            "namespace": "",
            "file": "../p5.js/src/io/files.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Output": {
            "name": "Output",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5": 1,
                "p5.PrintWriter": 1
            },
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "IO",
            "namespace": "",
            "file": "../p5.js/src/io/files.js",
            "line": 1222,
            "description": "This is the p5 instance constructor.\n\nA p5 instance holds all the properties and methods related to\na p5 sketch.  It expects an incoming sketch closure and it can also\ntake an optional node parameter for attaching the generated p5 canvas\nto a node.  The sketch closure takes the newly created p5 instance as\nits sole argument and may optionally set <a href=\"#/p5/preload\">preload()</a>, <a href=\"#/p5/setup\">setup()</a>, and/or\n<a href=\"#/p5/draw\">draw()</a> properties on it for running a sketch.\n\nA p5 sketch can run in \"global\" or \"instance\" mode:\n\"global\"   - all properties and methods are attached to the window\n\"instance\" - all properties and methods are bound to this p5 object"
        },
        "Table": {
            "name": "Table",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.Table": 1,
                "p5.TableRow": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "IO",
            "namespace": "",
            "file": "../p5.js/src/io/p5.TableRow.js",
            "line": 11,
            "requires": [
                "core"
            ],
            "description": "<a href=\"#/p5.Table\">Table</a> objects store data with multiple rows and columns, much\nlike in a traditional spreadsheet. Tables can be generated from\nscratch, dynamically, or using data from an existing file."
        },
        "XML": {
            "name": "XML",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.XML": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "IO",
            "namespace": "",
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 11,
            "requires": [
                "core"
            ],
            "description": "XML is a representation of an XML object, able to parse XML code. Use\n<a href=\"#/p5/loadXML\">loadXML()</a> to load external XML files and create XML objects."
        },
        "Math": {
            "name": "Math",
            "submodules": {
                "Calculation": 1,
                "Noise": 1,
                "Random": 1,
                "Trigonometry": 1
            },
            "elements": {},
            "classes": {
                "p5.Vector": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "module": "Math",
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 12,
            "requires": [
                "core"
            ],
            "description": "A class to describe a two or three dimensional vector, specifically\na Euclidean (also known as geometric) vector. A vector is an entity\nthat has both magnitude and direction. The datatype, however, stores\nthe components of the vector (x, y for 2D, and x, y, z for 3D). The magnitude\nand direction can be accessed via the methods <a href=\"#/p5/mag\">mag()</a> and <a href=\"#/p5/heading\">heading()</a>.\n<br><br>\nIn many of the p5.js examples, you will see <a href=\"#/p5.Vector\">p5.Vector</a> used to describe a\nposition, velocity, or acceleration. For example, if you consider a rectangle\nmoving across the screen, at any given instant it has a position (a vector\nthat points from the origin to its location), a velocity (the rate at which\nthe object's position changes per time unit, expressed as a vector), and\nacceleration (the rate at which the object's velocity changes per time\nunit, expressed as a vector).\n<br><br>\nSince vectors represent groupings of values, we cannot simply use\ntraditional addition/multiplication/etc. Instead, we'll need to do some\n\"vector\" math, which is made easy by the methods inside the <a href=\"#/p5.Vector\">p5.Vector</a> class."
        },
        "Calculation": {
            "name": "Calculation",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Math",
            "namespace": "",
            "file": "../p5.js/src/math/calculation.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Noise": {
            "name": "Noise",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Math",
            "namespace": "",
            "file": "../p5.js/src/math/noise.js",
            "line": 14,
            "requires": [
                "core"
            ]
        },
        "Random": {
            "name": "Random",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Math",
            "namespace": "",
            "file": "../p5.js/src/math/random.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Trigonometry": {
            "name": "Trigonometry",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Math",
            "namespace": "",
            "file": "../p5.js/src/math/trigonometry.js",
            "line": 1,
            "requires": [
                "core",
                "constants"
            ]
        },
        "Typography": {
            "name": "Typography",
            "submodules": {
                "Attributes": 1,
                "Loading & Displaying": 1,
                "Font": 1
            },
            "elements": {},
            "classes": {
                "p5.Font": 1
            },
            "fors": {
                "p5": 1
            },
            "namespaces": {},
            "file": "../p5.js/src/typography/p5.Font.js",
            "line": 21
        },
        "Font": {
            "name": "Font",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.Font": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "Typography",
            "namespace": "",
            "file": "../p5.js/src/typography/p5.Font.js",
            "line": 21,
            "description": "This module defines the <a href=\"#/p5.Font\">p5.Font</a> class and functions for\ndrawing text to the display canvas.",
            "requires": [
                "core",
                "constants"
            ]
        },
        "Array Functions": {
            "name": "Array Functions",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Data",
            "namespace": "",
            "file": "../p5.js/src/utilities/array_functions.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Conversion": {
            "name": "Conversion",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Data",
            "namespace": "",
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "String Functions": {
            "name": "String Functions",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Data",
            "namespace": "",
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Time & Date": {
            "name": "Time & Date",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "IO",
            "namespace": "",
            "file": "../p5.js/src/utilities/time_date.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "3D Primitives": {
            "name": "3D Primitives",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Shape",
            "namespace": "",
            "file": "../p5.js/src/webgl/3d_primitives.js",
            "line": 1,
            "requires": [
                "core",
                "p5.Geometry"
            ]
        },
        "Lights, Camera": {
            "name": "Lights, Camera",
            "submodules": {
                "Interaction": 1,
                "Lights": 1,
                "Material": 1,
                "Camera": 1,
                "Shaders": 1
            },
            "elements": {},
            "classes": {
                "p5.Camera": 1,
                "p5.Geometry": 1,
                "p5.Matrix": 1,
                "p5.Shader": 1,
                "p5.Texture": 1,
                "ImageInfos": 1,
                "FontInfo": 1,
                "Cubic": 1
            },
            "fors": {
                "p5": 1,
                "p5.Camera": 1
            },
            "namespaces": {},
            "file": "../p5.js/src/webgl/text.js",
            "line": 259
        },
        "Interaction": {
            "name": "Interaction",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Lights, Camera",
            "namespace": "",
            "file": "../p5.js/src/webgl/interaction.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "Lights": {
            "name": "Lights",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Lights, Camera",
            "namespace": "",
            "file": "../p5.js/src/webgl/light.js",
            "line": 1,
            "requires": [
                "core"
            ]
        },
        "3D Models": {
            "name": "3D Models",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Shape",
            "namespace": "",
            "file": "../p5.js/src/webgl/loading.js",
            "line": 1,
            "requires": [
                "core",
                "p5.Geometry"
            ]
        },
        "Material": {
            "name": "Material",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.Texture": 1
            },
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Lights, Camera",
            "namespace": "",
            "file": "../p5.js/src/webgl/p5.Texture.js",
            "line": 14,
            "requires": [
                "core"
            ],
            "description": "This module defines the p5.Texture class"
        },
        "Camera": {
            "name": "Camera",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.Camera": 1
            },
            "fors": {
                "p5": 1,
                "p5.Camera": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Lights, Camera",
            "namespace": "",
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 209,
            "requires": [
                "core"
            ],
            "description": "This class describes a camera for use in p5's\n<a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5\">\nWebGL mode</a>. It contains camera position, orientation, and projection\ninformation necessary for rendering a 3D scene.\n\nNew p5.Camera objects can be made through the\n<a href=\"#/p5/createCamera\">createCamera()</a> function and controlled through\nthe methods described below. A camera created in this way will use a default\nposition in the scene and a default perspective projection until these\nproperties are changed through the various methods available. It is possible\nto create multiple cameras, in which case the current camera\ncan be set through the <a href=\"#/p5/setCamera\">setCamera()</a> method.\n\n\nNote:\nThe methods below operate in two coordinate systems: the 'world' coordinate\nsystem describe positions in terms of their relationship to the origin along\nthe X, Y and Z axes whereas the camera's 'local' coordinate system\ndescribes positions from the camera's point of view: left-right, up-down,\nand forward-backward. The <a href=\"#/p5.Camera/move\">move()</a> method,\nfor instance, moves the camera along its own axes, whereas the\n<a href=\"#/p5.Camera/setPosition\">setPosition()</a>\nmethod sets the camera's position in world-space."
        },
        "Shaders": {
            "name": "Shaders",
            "submodules": {},
            "elements": {},
            "classes": {
                "p5.Shader": 1
            },
            "fors": {
                "p5": 1
            },
            "is_submodule": 1,
            "namespaces": {},
            "module": "Lights, Camera",
            "namespace": "",
            "file": "../p5.js/src/webgl/p5.Shader.js",
            "line": 13,
            "description": "This module defines the p5.Shader class",
            "requires": [
                "core"
            ]
        }
    },
    "classes": {
        "p5": {
            "name": "p5",
            "shortname": "p5",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IO",
            "submodule": "Output",
            "namespace": "",
            "file": "../p5.js/src/core/main.js",
            "line": 15,
            "description": "This is the p5 instance constructor.\n\nA p5 instance holds all the properties and methods related to\na p5 sketch.  It expects an incoming sketch closure and it can also\ntake an optional node parameter for attaching the generated p5 canvas\nto a node.  The sketch closure takes the newly created p5 instance as\nits sole argument and may optionally set <a href=\"#/p5/preload\">preload()</a>, <a href=\"#/p5/setup\">setup()</a>, and/or\n<a href=\"#/p5/draw\">draw()</a> properties on it for running a sketch.\n\nA p5 sketch can run in \"global\" or \"instance\" mode:\n\"global\"   - all properties and methods are attached to the window\n\"instance\" - all properties and methods are bound to this p5 object",
            "is_constructor": 1,
            "params": [
                {
                    "name": "sketch",
                    "description": "a closure that can set optional <a href=\"#/p5/preload\">preload()</a>,\n                             <a href=\"#/p5/setup\">setup()</a>, and/or <a href=\"#/p5/draw\">draw()</a> properties on the\n                             given p5 instance",
                    "type": "Function"
                },
                {
                    "name": "node",
                    "description": "element to attach canvas to, if a\n                                     boolean is passed in use it as sync",
                    "type": "HTMLElement|Boolean",
                    "optional": true
                },
                {
                    "name": "sync",
                    "description": "start synchronously (optional)",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "a p5 instance",
                "type": "P5"
            }
        },
        "p5.Color": {
            "name": "p5.Color",
            "shortname": "p5.Color",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Color",
            "submodule": "Creating & Reading",
            "namespace": "",
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 16,
            "description": "Each color stores the color mode and level maxes that applied at the\ntime of its construction. These are used to interpret the input arguments\n(at construction and later for that instance of color) and to format the\noutput e.g. when <a href=\"#/p5/saturation\">saturation()</a> is requested.\n\nInternally we store an array representing the ideal RGBA values in floating\npoint form, normalized from 0 to 1. From this we calculate the closest\nscreen color (RGBA levels from 0 to 255) and expose this to the renderer.\n\nWe also cache normalized, floating point components of the color in various\nrepresentations as they are calculated. This is done to prevent repeating a\nconversion that has already been performed."
        },
        "p5.Element": {
            "name": "p5.Element",
            "shortname": "p5.Element",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "DOM",
            "submodule": "DOM",
            "namespace": "",
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 11,
            "description": "Base class for all elements added to a sketch, including canvas,\ngraphics buffers, and other HTML elements. Methods in blue are\nincluded in the core functionality, methods in brown are added\nwith the <a href=\"http://p5js.org/reference/#/libraries/p5.dom\">p5.dom\nlibrary</a>.\nIt is not called directly, but <a href=\"#/p5.Element\">p5.Element</a>\nobjects are created by calling <a href=\"#/p5/createCanvas\">createCanvas</a>, <a href=\"#/p5/createGraphics\">createGraphics</a>,\nor in the p5.dom library, <a href=\"#/p5/createDiv\">createDiv</a>, <a href=\"#/p5/createImg\">createImg</a>, <a href=\"#/p5/createInput\">createInput</a>, etc.",
            "params": [
                {
                    "name": "elt",
                    "description": "DOM node that is wrapped",
                    "type": "String"
                },
                {
                    "name": "pInst",
                    "description": "pointer to p5 instance",
                    "type": "P5",
                    "optional": true
                }
            ]
        },
        "p5.Graphics": {
            "name": "p5.Graphics",
            "shortname": "p5.Graphics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Rendering",
            "submodule": "Rendering",
            "namespace": "",
            "file": "../p5.js/src/core/p5.Graphics.js",
            "line": 12,
            "description": "Thin wrapper around a renderer, to be used for creating a\ngraphics buffer object. Use this class if you need\nto draw into an off-screen graphics buffer. The two parameters define the\nwidth and height in pixels. The fields and methods for this class are\nextensive, but mirror the normal drawing API for p5.",
            "extends": "p5.Element",
            "params": [
                {
                    "name": "w",
                    "description": "width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Number"
                },
                {
                    "name": "renderer",
                    "description": "the renderer to use, either P2D or WEBGL",
                    "type": "Constant"
                },
                {
                    "name": "pInst",
                    "description": "pointer to p5 instance",
                    "type": "P5",
                    "optional": true
                }
            ]
        },
        "p5.Renderer": {
            "name": "p5.Renderer",
            "shortname": "p5.Renderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Rendering",
            "submodule": "Rendering",
            "namespace": "",
            "file": "../p5.js/src/core/p5.Renderer.js",
            "line": 12,
            "description": "Main graphics and rendering context, as well as the base API\nimplementation for p5.js \"core\". To be used as the superclass for\nRenderer2D and Renderer3D classes, respecitvely.",
            "is_constructor": 1,
            "extends": "p5.Element",
            "params": [
                {
                    "name": "elt",
                    "description": "DOM node that is wrapped",
                    "type": "String"
                },
                {
                    "name": "pInst",
                    "description": "pointer to p5 instance",
                    "type": "P5",
                    "optional": true
                },
                {
                    "name": "isMainCanvas",
                    "description": "whether we're using it as main canvas",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "p5.TypedDict": {
            "name": "p5.TypedDict",
            "shortname": "p5.TypedDict",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Data",
            "submodule": "Dictionary",
            "namespace": "",
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 84,
            "description": "Base class for all p5.Dictionary types. Specifically\n typed Dictionary classes inherit from this class."
        },
        "p5.StringDict": {
            "name": "p5.StringDict",
            "shortname": "p5.StringDict",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Data",
            "submodule": "Dictionary",
            "namespace": "",
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 391,
            "description": "A simple Dictionary class for Strings.",
            "extends": "p5.TypedDict"
        },
        "p5.NumberDict": {
            "name": "p5.NumberDict",
            "shortname": "p5.NumberDict",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Data",
            "submodule": "Dictionary",
            "namespace": "",
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 410,
            "description": "A simple Dictionary class for Numbers.",
            "extends": "p5.TypedDict"
        },
        "p5.Image": {
            "name": "p5.Image",
            "shortname": "p5.Image",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Image",
            "submodule": "Image",
            "namespace": "",
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 23,
            "description": "Creates a new <a href=\"#/p5.Image\">p5.Image</a>. A <a href=\"#/p5.Image\">p5.Image</a> is a canvas backed representation of an\nimage.\n<br><br>\np5 can display .gif, .jpg and .png images. Images may be displayed\nin 2D and 3D space. Before an image is used, it must be loaded with the\n<a href=\"#/p5/loadImage\">loadImage()</a> function. The <a href=\"#/p5.Image\">p5.Image</a> class contains fields for the width and\nheight of the image, as well as an array called <a href=\"#/p5.Image/pixels\">pixels[]</a> that contains the\nvalues for every pixel in the image.\n<br><br>\nThe methods described below allow easy access to the image's pixels and\nalpha channel and simplify the process of compositing.\n<br><br>\nBefore using the <a href=\"#/p5.Image/pixels\">pixels[]</a> array, be sure to use the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a> method on\nthe image to make sure that the pixel data is properly loaded.",
            "example": [
                "\n<div><code>\nfunction setup() {\n  var img = createImage(100, 100); // same as new p5.Image(100, 100);\n  img.loadPixels();\n  createCanvas(100, 100);\n  background(0);\n\n  // helper for writing color to array\n  function writeColor(image, x, y, red, green, blue, alpha) {\n    var index = (x + y * width) * 4;\n    image.pixels[index] = red;\n    image.pixels[index + 1] = green;\n    image.pixels[index + 2] = blue;\n    image.pixels[index + 3] = alpha;\n  }\n\n  var x, y;\n  // fill with random colors\n  for (y = 0; y < img.height; y++) {\n    for (x = 0; x < img.width; x++) {\n      var red = random(255);\n      var green = random(255);\n      var blue = random(255);\n      var alpha = 255;\n      writeColor(img, x, y, red, green, blue, alpha);\n    }\n  }\n\n  // draw a red line\n  y = 0;\n  for (x = 0; x < img.width; x++) {\n    writeColor(img, x, y, 255, 0, 0, 255);\n  }\n\n  // draw a green line\n  y = img.height - 1;\n  for (x = 0; x < img.width; x++) {\n    writeColor(img, x, y, 0, 255, 0, 255);\n  }\n\n  img.updatePixels();\n  image(img, 0, 0);\n}\n</code></div>"
            ],
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ]
        },
        "p5.PrintWriter": {
            "name": "p5.PrintWriter",
            "shortname": "p5.PrintWriter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IO",
            "submodule": "Output",
            "namespace": "",
            "file": "../p5.js/src/io/files.js",
            "line": 1222,
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "p5.Table": {
            "name": "p5.Table",
            "shortname": "p5.Table",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IO",
            "submodule": "Table",
            "namespace": "",
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 35,
            "description": "<a href=\"#/p5.Table\">Table</a> objects store data with multiple rows and columns, much\nlike in a traditional spreadsheet. Tables can be generated from\nscratch, dynamically, or using data from an existing file.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "rows",
                    "description": "An array of p5.TableRow objects",
                    "type": "p5.TableRow[]",
                    "optional": true
                }
            ]
        },
        "p5.TableRow": {
            "name": "p5.TableRow",
            "shortname": "p5.TableRow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IO",
            "submodule": "Table",
            "namespace": "",
            "file": "../p5.js/src/io/p5.TableRow.js",
            "line": 11,
            "description": "A TableRow object represents a single row of data values,\nstored in columns, from a table.\n\nA Table Row contains both an ordered array, and an unordered\nJSON object.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "str",
                    "description": "optional: populate the row with a\n                            string of values, separated by the\n                            separator",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "separator",
                    "description": "comma separated values (csv) by default",
                    "type": "String",
                    "optional": true
                }
            ]
        },
        "p5.XML": {
            "name": "p5.XML",
            "shortname": "p5.XML",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IO",
            "submodule": "XML",
            "namespace": "",
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 11,
            "description": "XML is a representation of an XML object, able to parse XML code. Use\n<a href=\"#/p5/loadXML\">loadXML()</a> to load external XML files and create XML objects.",
            "is_constructor": 1,
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  var children = xml.getChildren('animal');\n\n  for (var i = 0; i < children.length; i++) {\n    var id = children[i].getNum('id');\n    var coloring = children[i].getString('species');\n    var name = children[i].getContent();\n    print(id + ', ' + coloring + ', ' + name);\n  }\n}\n\n// Sketch prints:\n// 0, Capra hircus, Goat\n// 1, Panthera pardus, Leopard\n// 2, Equus zebra, Zebra\n</code></div>"
            ],
            "alt": "no image displayed"
        },
        "p5.Vector": {
            "name": "p5.Vector",
            "shortname": "p5.Vector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Math",
            "submodule": "Math",
            "namespace": "",
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 12,
            "description": "A class to describe a two or three dimensional vector, specifically\na Euclidean (also known as geometric) vector. A vector is an entity\nthat has both magnitude and direction. The datatype, however, stores\nthe components of the vector (x, y for 2D, and x, y, z for 3D). The magnitude\nand direction can be accessed via the methods <a href=\"#/p5/mag\">mag()</a> and <a href=\"#/p5/heading\">heading()</a>.\n<br><br>\nIn many of the p5.js examples, you will see <a href=\"#/p5.Vector\">p5.Vector</a> used to describe a\nposition, velocity, or acceleration. For example, if you consider a rectangle\nmoving across the screen, at any given instant it has a position (a vector\nthat points from the origin to its location), a velocity (the rate at which\nthe object's position changes per time unit, expressed as a vector), and\nacceleration (the rate at which the object's velocity changes per time\nunit, expressed as a vector).\n<br><br>\nSince vectors represent groupings of values, we cannot simply use\ntraditional addition/multiplication/etc. Instead, we'll need to do some\n\"vector\" math, which is made easy by the methods inside the <a href=\"#/p5.Vector\">p5.Vector</a> class.",
            "params": [
                {
                    "name": "x",
                    "description": "x component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar v1 = createVector(40, 50);\nvar v2 = createVector(40, 50);\n\nellipse(v1.x, v1.y, 50, 50);\nellipse(v2.x, v2.y, 50, 50);\nv1.add(v2);\nellipse(v1.x, v1.y, 50, 50);\n</code>\n</div>"
            ],
            "alt": "2 white ellipses. One center-left the other bottom right and off canvas"
        },
        "p5.Font": {
            "name": "p5.Font",
            "shortname": "p5.Font",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Typography",
            "submodule": "Font",
            "namespace": "",
            "file": "../p5.js/src/typography/p5.Font.js",
            "line": 21,
            "description": "Base class for font handling",
            "params": [
                {
                    "name": "pInst",
                    "description": "pointer to p5 instance",
                    "type": "P5",
                    "optional": true
                }
            ]
        },
        "p5.Camera": {
            "name": "p5.Camera",
            "shortname": "p5.Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "submodule": "Camera",
            "namespace": "",
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 209,
            "description": "This class describes a camera for use in p5's\n<a href=\"https://github.com/processing/p5.js/wiki/Getting-started-with-WebGL-in-p5\">\nWebGL mode</a>. It contains camera position, orientation, and projection\ninformation necessary for rendering a 3D scene.\n\nNew p5.Camera objects can be made through the\n<a href=\"#/p5/createCamera\">createCamera()</a> function and controlled through\nthe methods described below. A camera created in this way will use a default\nposition in the scene and a default perspective projection until these\nproperties are changed through the various methods available. It is possible\nto create multiple cameras, in which case the current camera\ncan be set through the <a href=\"#/p5/setCamera\">setCamera()</a> method.\n\n\nNote:\nThe methods below operate in two coordinate systems: the 'world' coordinate\nsystem describe positions in terms of their relationship to the origin along\nthe X, Y and Z axes whereas the camera's 'local' coordinate system\ndescribes positions from the camera's point of view: left-right, up-down,\nand forward-backward. The <a href=\"#/p5.Camera/move\">move()</a> method,\nfor instance, moves the camera along its own axes, whereas the\n<a href=\"#/p5.Camera/setPosition\">setPosition()</a>\nmethod sets the camera's position in world-space.",
            "params": [
                {
                    "name": "rendererGL",
                    "description": "instance of WebGL renderer",
                    "type": "RendererGL"
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar cam;\nvar delta = 0.01;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n  cam = createCamera();\n  // set initial pan angle\n  cam.pan(-0.8);\n}\n\nfunction draw() {\n  background(200);\n\n  // pan camera according to angle 'delta'\n  cam.pan(delta);\n\n  // every 160 frames, switch direction\n  if (frameCount % 160 === 0) {\n    delta *= -1;\n  }\n\n  rotateX(frameCount * 0.01);\n  translate(-100, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n}\n</code>\n</div>"
            ],
            "alt": "camera view pans left and right across a series of rotating 3D boxes."
        },
        "p5.Geometry": {
            "name": "p5.Geometry",
            "shortname": "p5.Geometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "namespace": "",
            "file": "../p5.js/src/webgl/p5.Geometry.js",
            "line": 6,
            "description": "p5 Geometry class",
            "is_constructor": 1,
            "params": [
                {
                    "name": "detailX",
                    "description": "number of vertices on horizontal surface",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "number of vertices on horizontal surface",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function to call upon object instantiation.",
                    "type": "Function",
                    "optional": true
                }
            ]
        },
        "p5.Matrix": {
            "name": "p5.Matrix",
            "shortname": "p5.Matrix",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "namespace": "",
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 25,
            "description": "A class to describe a 4x4 matrix\nfor model and view matrix manipulation in the p5js webgl renderer.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mat4",
                    "description": "array literal of our 4x4 matrix",
                    "type": "Array",
                    "optional": true
                }
            ]
        },
        "p5.RendererGL": {
            "name": "fill",
            "shortname": "p5.RendererGL",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Rendering",
            "namespace": "",
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 427,
            "description": "Basic fill material for geometry with a given color",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "extends": "p5.Renderer",
            "todo": [
                "extend class to include public method for offscreen\nrendering (FBO)."
            ],
            "submodule": "Rendering",
            "itemtype": "method",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value,\nred or hue value (depending on the current color mode),\nor color Array, or CSS color string",
                    "type": "Number|Number[]|String|p5.Color"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(200, 200, WEBGL);\n}\n\nfunction draw() {\n  background(0);\n  noStroke();\n  fill(100, 100, 240);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  box(75, 75, 75);\n}\n</code>\n</div>"
            ],
            "alt": "black canvas with purple cube spinning"
        },
        "p5.Shader": {
            "name": "p5.Shader",
            "shortname": "p5.Shader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "submodule": "Shaders",
            "namespace": "",
            "file": "../p5.js/src/webgl/p5.Shader.js",
            "line": 13,
            "description": "Shader class for WEBGL Mode",
            "params": [
                {
                    "name": "renderer",
                    "description": "an instance of p5.RendererGL that\nwill provide the GL context for this new p5.Shader",
                    "type": "p5.RendererGL"
                },
                {
                    "name": "vertSrc",
                    "description": "source code for the vertex shader (as a string)",
                    "type": "String"
                },
                {
                    "name": "fragSrc",
                    "description": "source code for the fragment shader (as a string)",
                    "type": "String"
                }
            ]
        },
        "p5.Texture": {
            "name": "p5.Texture",
            "shortname": "p5.Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "submodule": "Material",
            "namespace": "",
            "file": "../p5.js/src/webgl/p5.Texture.js",
            "line": 14,
            "description": "Texture class for WEBGL Mode",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "renderer",
                    "description": "an instance of p5.RendererGL that\nwill provide the GL context for this new p5.Texture",
                    "type": "p5.RendererGL"
                },
                {
                    "name": "obj",
                    "description": "the\nobject containing the image data to store in the texture.",
                    "type": "p5.Image|p5.Graphics|p5.Element|p5.MediaElement|ImageData",
                    "optional": true
                }
            ]
        },
        "ImageInfos": {
            "name": "ImageInfos",
            "shortname": "ImageInfos",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "namespace": "",
            "file": "../p5.js/src/webgl/text.js",
            "line": 41,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "height\n\nthe",
                    "description": "ImageInfos class holds a list of ImageDatas of a given size.",
                    "type": "Integer"
                }
            ]
        },
        "FontInfo": {
            "name": "FontInfo",
            "shortname": "FontInfo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "namespace": "",
            "file": "../p5.js/src/webgl/text.js",
            "line": 139,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "font",
                    "description": "an opentype.js font object\n\ncontains cached images and glyph information for an opentype font",
                    "type": "Object"
                }
            ]
        },
        "Cubic": {
            "name": "Cubic",
            "shortname": "Cubic",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Lights, Camera",
            "namespace": "",
            "file": "../p5.js/src/webgl/text.js",
            "line": 259,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "p0",
                    "description": "the start point of the curve",
                    "type": "Number"
                },
                {
                    "name": "c0",
                    "description": "the first control point",
                    "type": "Number"
                },
                {
                    "name": "c1",
                    "description": "the second control point",
                    "type": "Number"
                },
                {
                    "name": "p1",
                    "description": "the end point\n\na cubic curve",
                    "type": "Number"
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "../p5.js/src/color/color_conversion.js",
            "line": 10,
            "description": "Conversions adapted from <http://www.easyrgb.com/en/math.php>.\n\nIn these functions, hue is always in the range [0, 1], just like all other\ncomponents are in the range [0, 1]. 'Brightness' and 'value' are used\ninterchangeably.",
            "class": "p5",
            "module": "Color",
            "submodule": "Color Conversion"
        },
        {
            "file": "../p5.js/src/color/color_conversion.js",
            "line": 21,
            "description": "Convert an HSBA array to HSLA.",
            "class": "p5",
            "module": "Color",
            "submodule": "Color Conversion"
        },
        {
            "file": "../p5.js/src/color/color_conversion.js",
            "line": 47,
            "description": "Convert an HSBA array to RGBA.",
            "class": "p5",
            "module": "Color",
            "submodule": "Color Conversion"
        },
        {
            "file": "../p5.js/src/color/color_conversion.js",
            "line": 102,
            "description": "Convert an HSLA array to HSBA.",
            "class": "p5",
            "module": "Color",
            "submodule": "Color Conversion"
        },
        {
            "file": "../p5.js/src/color/color_conversion.js",
            "line": 125,
            "description": "Convert an HSLA array to RGBA.\n\nWe need to change basis from HSLA to something that can be more easily be\nprojected onto RGBA. We will choose hue and brightness as our first two\ncomponents, and pick a convenient third one ('zest') so that we don't need\nto calculate formal HSBA saturation.",
            "class": "p5",
            "module": "Color",
            "submodule": "Color Conversion"
        },
        {
            "file": "../p5.js/src/color/color_conversion.js",
            "line": 189,
            "description": "Convert an RGBA array to HSBA.",
            "class": "p5",
            "module": "Color",
            "submodule": "Color Conversion"
        },
        {
            "file": "../p5.js/src/color/color_conversion.js",
            "line": 228,
            "description": "Convert an RGBA array to HSLA.",
            "class": "p5",
            "module": "Color",
            "submodule": "Color Conversion"
        },
        {
            "file": "../p5.js/src/color/creating_reading.js",
            "line": 16,
            "description": "Extracts the alpha value from a color or pixel array.",
            "itemtype": "method",
            "name": "alpha",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the alpha value",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoStroke();\nvar c = color(0, 126, 255, 102);\nfill(c);\nrect(15, 15, 35, 70);\nvar value = alpha(c); // Sets 'value' to 102\nfill(value);\nrect(50, 15, 35, 70);\n</code>\n</div>"
            ],
            "alt": "Left half of canvas light blue and right half light charcoal grey.\nLeft half of canvas light purple and right half a royal blue.\nLeft half of canvas salmon pink and the right half white.\nYellow rect in middle right of canvas, with 55 pixel width and height.\nYellow ellipse in top left canvas, black ellipse in bottom right,both 80x80.\nBright fuschia rect in middle of canvas, 60 pixel width and height.\nTwo bright green rects on opposite sides of the canvas, both 45x80.\nFour blue rects in each corner of the canvas, each are 35x35.\nBright sea green rect on left and darker rect on right of canvas, both 45x80.\nDark green rect on left and light green rect on right of canvas, both 45x80.\nDark blue rect on left and light teal rect on right of canvas, both 45x80.\nblue rect on left and green on right, both with black outlines & 35x60.\nsalmon pink rect on left and black on right, both 35x60.\n4 rects, tan, brown, brownish purple and purple, with white outlines & 20x60.\nlight pastel green rect on left and dark grey rect on right, both 35x60.\nyellow rect on left and red rect on right, both with black outlines & 35x60.\ngrey canvas\ndeep pink rect on left and grey rect on right, both 35x60.",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/creating_reading.js",
            "line": 61,
            "description": "Extracts the blue value from a color or pixel array.",
            "itemtype": "method",
            "name": "blue",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the blue value",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nvar c = color(175, 100, 220); // Define color 'c'\nfill(c); // Use color variable 'c' as fill color\nrect(15, 20, 35, 60); // Draw left rectangle\n\nvar blueValue = blue(c); // Get blue in 'c'\nprint(blueValue); // Prints \"220.0\"\nfill(0, 0, blueValue); // Use 'blueValue' in new fill\nrect(50, 20, 35, 60); // Draw right rectangle\n</code>\n</div>"
            ],
            "alt": "Left half of canvas light purple and right half a royal blue.",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/creating_reading.js",
            "line": 91,
            "description": "Extracts the HSB brightness value from a color or pixel array.",
            "itemtype": "method",
            "name": "brightness",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the brightness value",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 255);\nvar c = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\nvar value = brightness(c); // Sets 'value' to 255\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"
            ],
            "alt": "Left half of canvas salmon pink and the right half white.",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/creating_reading.js",
            "line": 121,
            "description": "Creates colors for storing in variables of the color datatype. The\nparameters are interpreted as RGB or HSB values depending on the\ncurrent <a href=\"#/p5/colorMode\">colorMode()</a>. The default mode is RGB values from 0 to 255\nand, therefore, the function call color(255, 204, 0) will return a\nbright yellow color.\n<br><br>\nNote that if only one value is provided to <a href=\"#/p5/color\">color()</a>, it will be interpreted\nas a grayscale value. Add a second value, and it will be used for alpha\ntransparency. When three values are specified, they are interpreted as\neither RGB or HSB values. Adding a fourth value applies alpha\ntransparency.\n<br><br>\nIf a single string argument is provided, RGB, RGBA and Hex CSS color\nstrings and all named color strings are supported. In this case, an alpha\nnumber value as a second argument is not supported, the RGBA form should be\nused.",
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "gray",
                    "description": "number specifying value between white\n                                and black.",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "alpha value relative to current color range\n                                (default is 0-255)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "resulting color",
                "type": "p5.Color"
            },
            "example": [
                "\n<div>\n<code>\nvar c = color(255, 204, 0); // Define color 'c'\nfill(c); // Use color variable 'c' as fill color\nnoStroke(); // Don't draw a stroke around shapes\nrect(30, 20, 55, 55); // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\nvar c = color(255, 204, 0); // Define color 'c'\nfill(c); // Use color variable 'c' as fill color\nnoStroke(); // Don't draw a stroke around shapes\nellipse(25, 25, 80, 80); // Draw left circle\n\n// Using only one value with color()\n// generates a grayscale value.\nc = color(65); // Update 'c' with grayscale value\nfill(c); // Use updated 'c' as fill color\nellipse(75, 75, 80, 80); // Draw right circle\n</code>\n</div>\n\n<div>\n<code>\n// Named SVG & CSS colors may be used,\nvar c = color('magenta');\nfill(c); // Use 'c' as fill color\nnoStroke(); // Don't draw a stroke around shapes\nrect(20, 20, 60, 60); // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\n// as can hex color codes:\nnoStroke(); // Don't draw a stroke around shapes\nvar c = color('#0f0');\nfill(c); // Use 'c' as fill color\nrect(0, 10, 45, 80); // Draw rectangle\n\nc = color('#00ff00');\nfill(c); // Use updated 'c' as fill color\nrect(55, 10, 45, 80); // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\n// RGB and RGBA color strings are also supported:\n// these all set to the same color (solid blue)\nvar c;\nnoStroke(); // Don't draw a stroke around shapes\nc = color('rgb(0,0,255)');\nfill(c); // Use 'c' as fill color\nrect(10, 10, 35, 35); // Draw rectangle\n\nc = color('rgb(0%, 0%, 100%)');\nfill(c); // Use updated 'c' as fill color\nrect(55, 10, 35, 35); // Draw rectangle\n\nc = color('rgba(0, 0, 255, 1)');\nfill(c); // Use updated 'c' as fill color\nrect(10, 55, 35, 35); // Draw rectangle\n\nc = color('rgba(0%, 0%, 100%, 1)');\nfill(c); // Use updated 'c' as fill color\nrect(55, 55, 35, 35); // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\n// HSL color is also supported and can be specified\n// by value\nvar c;\nnoStroke(); // Don't draw a stroke around shapes\nc = color('hsl(160, 100%, 50%)');\nfill(c); // Use 'c' as fill color\nrect(0, 10, 45, 80); // Draw rectangle\n\nc = color('hsla(160, 100%, 50%, 0.5)');\nfill(c); // Use updated 'c' as fill color\nrect(55, 10, 45, 80); // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\n// HSB color is also supported and can be specified\n// by value\nvar c;\nnoStroke(); // Don't draw a stroke around shapes\nc = color('hsb(160, 100%, 50%)');\nfill(c); // Use 'c' as fill color\nrect(0, 10, 45, 80); // Draw rectangle\n\nc = color('hsba(160, 100%, 50%, 0.5)');\nfill(c); // Use updated 'c' as fill color\nrect(55, 10, 45, 80); // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\nvar c; // Declare color 'c'\nnoStroke(); // Don't draw a stroke around shapes\n\n// If no colorMode is specified, then the\n// default of RGB with scale of 0-255 is used.\nc = color(50, 55, 100); // Create a color for 'c'\nfill(c); // Use color variable 'c' as fill color\nrect(0, 10, 45, 80); // Draw left rect\n\ncolorMode(HSB, 100); // Use HSB with scale of 0-100\nc = color(50, 55, 100); // Update 'c' with new color\nfill(c); // Use updated 'c' as fill color\nrect(55, 10, 45, 80); // Draw right rect\n</code>\n</div>"
            ],
            "alt": "Yellow rect in middle right of canvas, with 55 pixel width and height.\nYellow ellipse in top left of canvas, black ellipse in bottom right,both 80x80.\nBright fuschia rect in middle of canvas, 60 pixel width and height.\nTwo bright green rects on opposite sides of the canvas, both 45x80.\nFour blue rects in each corner of the canvas, each are 35x35.\nBright sea green rect on left and darker rect on right of canvas, both 45x80.\nDark green rect on left and lighter green rect on right of canvas, both 45x80.\nDark blue rect on left and light teal rect on right of canvas, both 45x80.",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/creating_reading.js",
            "line": 280,
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value relative to\n                                the current color range",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Color"
            },
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/creating_reading.js",
            "line": 292,
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "value",
                    "description": "a color string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Color"
            },
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/creating_reading.js",
            "line": 297,
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "values",
                    "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Color"
            },
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/creating_reading.js",
            "line": 303,
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "p5.Color"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Color"
            },
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/creating_reading.js",
            "line": 319,
            "description": "Extracts the green value from a color or pixel array.",
            "itemtype": "method",
            "name": "green",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the green value",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nvar c = color(20, 75, 200); // Define color 'c'\nfill(c); // Use color variable 'c' as fill color\nrect(15, 20, 35, 60); // Draw left rectangle\n\nvar greenValue = green(c); // Get green in 'c'\nprint(greenValue); // Print \"75.0\"\nfill(0, greenValue, 0); // Use 'greenValue' in new fill\nrect(50, 20, 35, 60); // Draw right rectangle\n</code>\n</div>"
            ],
            "alt": "blue rect on left and green on right, both with black outlines & 35x60.",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/creating_reading.js",
            "line": 350,
            "description": "Extracts the hue value from a color or pixel array.\n\nHue exists in both HSB and HSL. This function will return the\nHSB-normalized hue when supplied with an HSB color object (or when supplied\nwith a pixel array while the color mode is HSB), but will default to the\nHSL-normalized hue otherwise. (The values will only be different if the\nmaximum hue setting for each system is different.)",
            "itemtype": "method",
            "name": "hue",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the hue",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 255);\nvar c = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\nvar value = hue(c); // Sets 'value' to \"0\"\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"
            ],
            "alt": "salmon pink rect on left and black on right, both 35x60.",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/creating_reading.js",
            "line": 387,
            "description": "Blends two colors to find a third color somewhere between them. The amt\nparameter is the amount to interpolate between the two values where 0.0\nequal to the first color, 0.1 is very near the first color, 0.5 is halfway\nin between, etc. An amount below 0 will be treated as 0. Likewise, amounts\nabove 1 will be capped at 1. This is different from the behavior of <a href=\"#/p5/lerp\">lerp()</a>,\nbut necessary because otherwise numbers outside the range will produce\nstrange and unexpected colors.\n<br><br>\nThe way that colours are interpolated depends on the current color mode.",
            "itemtype": "method",
            "name": "lerpColor",
            "params": [
                {
                    "name": "c1",
                    "description": "interpolate from this color",
                    "type": "p5.Color"
                },
                {
                    "name": "c2",
                    "description": "interpolate to this color",
                    "type": "p5.Color"
                },
                {
                    "name": "amt",
                    "description": "number between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "interpolated color",
                "type": "p5.Color"
            },
            "example": [
                "\n<div>\n<code>\ncolorMode(RGB);\nstroke(255);\nbackground(51);\nvar from = color(218, 165, 32);\nvar to = color(72, 61, 139);\ncolorMode(RGB); // Try changing to HSB.\nvar interA = lerpColor(from, to, 0.33);\nvar interB = lerpColor(from, to, 0.66);\nfill(from);\nrect(10, 20, 20, 60);\nfill(interA);\nrect(30, 20, 20, 60);\nfill(interB);\nrect(50, 20, 20, 60);\nfill(to);\nrect(70, 20, 20, 60);\n</code>\n</div>"
            ],
            "alt": "4 rects one tan, brown, brownish purple, purple, with white outlines & 20x60",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/creating_reading.js",
            "line": 484,
            "description": "Extracts the HSL lightness value from a color or pixel array.",
            "itemtype": "method",
            "name": "lightness",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the lightness",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoStroke();\ncolorMode(HSL);\nvar c = color(156, 100, 50, 1);\nfill(c);\nrect(15, 20, 35, 60);\nvar value = lightness(c); // Sets 'value' to 50\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"
            ],
            "alt": "light pastel green rect on left and dark grey rect on right, both 35x60.",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/creating_reading.js",
            "line": 514,
            "description": "Extracts the red value from a color or pixel array.",
            "itemtype": "method",
            "name": "red",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the red value",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nvar c = color(255, 204, 0); // Define color 'c'\nfill(c); // Use color variable 'c' as fill color\nrect(15, 20, 35, 60); // Draw left rectangle\n\nvar redValue = red(c); // Get red in 'c'\nprint(redValue); // Print \"255.0\"\nfill(redValue, 0, 0); // Use 'redValue' in new fill\nrect(50, 20, 35, 60); // Draw right rectangle\n</code>\n</div>\n\n<div>\n<code>\ncolorMode(RGB, 255);\nvar c = color(127, 255, 0);\ncolorMode(RGB, 1);\nvar myColor = red(c);\nprint(myColor);\n</code>\n</div>"
            ],
            "alt": "yellow rect on left and red rect on right, both with black outlines and 35x60.\ngrey canvas",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/creating_reading.js",
            "line": 554,
            "description": "Extracts the saturation value from a color or pixel array.\n\nSaturation is scaled differently in HSB and HSL. This function will return\nthe HSB saturation when supplied with an HSB color object (or when supplied\nwith a pixel array while the color mode is HSB), but will default to the\nHSL saturation otherwise.",
            "itemtype": "method",
            "name": "saturation",
            "params": [
                {
                    "name": "color",
                    "description": "<a href=\"#/p5.Color\">p5.Color</a> object, color components,\n                                        or CSS color",
                    "type": "p5.Color|Number[]|String"
                }
            ],
            "return": {
                "description": "the saturation value",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 255);\nvar c = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\nvar value = saturation(c); // Sets 'value' to 126\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"
            ],
            "alt": "deep pink rect on left and grey rect on right, both 35x60.",
            "class": "p5",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 52,
            "description": "This function returns the color formatted as a string. This can be useful\nfor debugging, or for using p5.js with other libraries.",
            "itemtype": "method",
            "name": "toString",
            "params": [
                {
                    "name": "format",
                    "description": "How the color string will be formatted.\nLeaving this empty formats the string as rgba(r, g, b, a).\n'#rgb' '#rgba' '#rrggbb' and '#rrggbbaa' format as hexadecimal color codes.\n'rgb' 'hsb' and 'hsl' return the color formatted in the specified color mode.\n'rgba' 'hsba' and 'hsla' are the same as above but with alpha channels.\n'rgb%' 'hsb%' 'hsl%' 'rgba%' 'hsba%' and 'hsla%' format as percentages.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "the formatted string",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nvar myColor;\nfunction setup() {\n  createCanvas(200, 200);\n  stroke(255);\n  myColor = color(100, 100, 250);\n  fill(myColor);\n}\n\nfunction draw() {\n  rotate(HALF_PI);\n  text(myColor.toString(), 0, -5);\n  text(myColor.toString('#rrggbb'), 0, -30);\n  text(myColor.toString('rgba%'), 0, -55);\n}\n</code>\n</div>"
            ],
            "alt": "canvas with text representation of color",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 248,
            "itemtype": "method",
            "name": "setRed",
            "params": [
                {
                    "name": "red",
                    "description": "the new red value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar backgroundColor;\n\nfunction setup() {\n  backgroundColor = color(100, 50, 150);\n}\n\nfunction draw() {\n  backgroundColor.setRed(128 + 128 * sin(millis() / 1000));\n  background(backgroundColor);\n}\n</code>\n</div>"
            ],
            "alt": "canvas with gradually changing background color",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 275,
            "itemtype": "method",
            "name": "setGreen",
            "params": [
                {
                    "name": "green",
                    "description": "the new green value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar backgroundColor;\n\nfunction setup() {\n  backgroundColor = color(100, 50, 150);\n}\n\nfunction draw() {\n  backgroundColor.setGreen(128 + 128 * sin(millis() / 1000));\n  background(backgroundColor);\n}\n</code>\n</div>"
            ],
            "alt": "canvas with gradually changing background color",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 302,
            "itemtype": "method",
            "name": "setBlue",
            "params": [
                {
                    "name": "blue",
                    "description": "the new blue value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar backgroundColor;\n\nfunction setup() {\n  backgroundColor = color(100, 50, 150);\n}\n\nfunction draw() {\n  backgroundColor.setBlue(128 + 128 * sin(millis() / 1000));\n  background(backgroundColor);\n}\n</code>\n</div>"
            ],
            "alt": "canvas with gradually changing background color",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 329,
            "itemtype": "method",
            "name": "setAlpha",
            "params": [
                {
                    "name": "alpha",
                    "description": "the new alpha value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar squareColor;\n\nfunction setup() {\n  ellipseMode(CORNERS);\n  strokeWeight(4);\n  squareColor = color(100, 50, 150);\n}\n\nfunction draw() {\n  background(255);\n\n  noFill();\n  stroke(0);\n  ellipse(10, 10, width - 10, height - 10);\n\n  squareColor.setAlpha(128 + 128 * sin(millis() / 1000));\n  fill(squareColor);\n  noStroke();\n  rect(13, 13, width - 26, height - 26);\n}\n</code>\n</div>"
            ],
            "alt": "circle behind a square with gradually changing opacity",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 410,
            "description": "Hue is the same in HSB and HSL, but the maximum value may be different.\nThis function will return the HSB-normalized saturation when supplied with\nan HSB color object, but will default to the HSL-normalized saturation\notherwise.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 441,
            "description": "Saturation is scaled differently in HSB and HSL. This function will return\nthe HSB saturation when supplied with an HSB color object, but will default\nto the HSL saturation otherwise.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 460,
            "description": "CSS named colors.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 613,
            "description": "These regular expressions are used to build up the patterns for matching\nviable CSS color strings: fragmenting the regexes in this way increases the\nlegibility and comprehensibility of the code.\n\nNote that RGB values of .9 are not parsed by IE, but are supported here for\ncolor string consistency.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 626,
            "description": "Full color string patterns. The capture groups are necessary.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 763,
            "description": "For a number of different inputs, returns a color formatted as [r, g, b, a]\narrays, with each component normalized between 0 and 1.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "args",
                    "description": "An 'array-like' object that represents a list of\n                         arguments",
                    "type": "Array",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "a color formatted as [r, g, b, a]\n                         Example:\n                         input        ==> output\n                         g            ==> [g, g, g, 255]\n                         g,a          ==> [g, g, g, a]\n                         r, g, b      ==> [r, g, b, 255]\n                         r, g, b, a   ==> [r, g, b, a]\n                         [g]          ==> [g, g, g, 255]\n                         [g, a]       ==> [g, g, g, a]\n                         [r, g, b]    ==> [r, g, b, 255]\n                         [r, g, b, a] ==> [r, g, b, a]",
                "type": "Number[]"
            },
            "example": [
                "\n<div>\n<code>\n// todo\n</code>\n</div>"
            ],
            "alt": "//todo",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/p5.Color.js",
            "line": 989,
            "description": "For HSB and HSL, interpret the gray level as a brightness/lightness\nvalue (they are equivalent when chroma is zero). For RGB, normalize the\ngray level according to the blue maximum.",
            "class": "p5.Color",
            "module": "Color",
            "submodule": "Creating & Reading"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 15,
            "description": "The <a href=\"#/p5/background\">background()</a> function sets the color used for the background of the\np5.js canvas. The default background is light gray. This function is\ntypically used within <a href=\"#/p5/draw\">draw()</a> to clear the display window at the beginning\nof each frame, but it can be used inside <a href=\"#/p5/setup\">setup()</a> to set the background on\nthe first frame of animation or if the background need only be set once.\n<br><br>\nThe color is either specified in terms of the RGB, HSB, or HSL color\ndepending on the current <a href=\"#/p5/colorMode\">colorMode</a>. (The default color space is RGB, with\neach value in the range from 0 to 255). The alpha range by default is also 0 to 255.\n<br><br>\nIf a single string argument is provided, RGB, RGBA and Hex CSS color strings\nand all named color strings are supported. In this case, an alpha number\nvalue as a second argument is not supported, the RGBA form should be used.\n<br><br>\nA <a href=\"#/p5.Color\">p5.Color</a> object can also be provided to set the background color.\n<br><br>\nA <a href=\"#/p5.Image\">p5.Image</a> can also be provided to set the background image.",
            "itemtype": "method",
            "name": "background",
            "params": [
                {
                    "name": "color",
                    "description": "any value created by the <a href=\"#/p5/color\">color()</a> function",
                    "type": "p5.Color"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Grayscale integer value\nbackground(51);\n</code>\n</div>\n\n<div>\n<code>\n// R, G & B integer values\nbackground(255, 204, 0);\n</code>\n</div>\n\n<div>\n<code>\n// H, S & B integer values\ncolorMode(HSB);\nbackground(255, 204, 100);\n</code>\n</div>\n\n<div>\n<code>\n// Named SVG/CSS color string\nbackground('red');\n</code>\n</div>\n\n<div>\n<code>\n// three-digit hexadecimal RGB notation\nbackground('#fae');\n</code>\n</div>\n\n<div>\n<code>\n// six-digit hexadecimal RGB notation\nbackground('#222222');\n</code>\n</div>\n\n<div>\n<code>\n// integer RGB notation\nbackground('rgb(0,255,0)');\n</code>\n</div>\n\n<div>\n<code>\n// integer RGBA notation\nbackground('rgba(0,255,0, 0.25)');\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGB notation\nbackground('rgb(100%,0%,10%)');\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGBA notation\nbackground('rgba(100%,0%,100%,0.5)');\n</code>\n</div>\n\n<div>\n<code>\n// p5 Color object\nbackground(color(0, 0, 255));\n</code>\n</div>"
            ],
            "alt": "canvas with darkest charcoal grey background.\ncanvas with yellow background.\ncanvas with royal blue background.\ncanvas with red background.\ncanvas with pink background.\ncanvas with black background.\ncanvas with bright green background.\ncanvas with soft green background.\ncanvas with red background.\ncanvas with light purple background.\ncanvas with blue background.",
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 131,
            "itemtype": "method",
            "name": "background",
            "params": [
                {
                    "name": "colorstring",
                    "description": "color string, possible formats include: integer\n                        rgb() or rgba(), percentage rgb() or rgba(),\n                        3-digit hex, 6-digit hex",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "opacity of the background relative to current\n                            color range (default is 0-255)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 141,
            "itemtype": "method",
            "name": "background",
            "params": [
                {
                    "name": "gray",
                    "description": "specifies a value between white and black",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 148,
            "itemtype": "method",
            "name": "background",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value (depending on the current color\n                       mode)",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value (depending on the current\n                       color mode)",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value (depending on the current\n                       color mode)",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 160,
            "itemtype": "method",
            "name": "background",
            "params": [
                {
                    "name": "values",
                    "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 167,
            "itemtype": "method",
            "name": "background",
            "params": [
                {
                    "name": "image",
                    "description": "image created with <a href=\"#/p5/loadImage\">loadImage()</a> or <a href=\"#/p5/createImage\">createImage()</a>,\n                            to set as background\n                            (must be same size as the sketch window)",
                    "type": "p5.Image"
                },
                {
                    "name": "a",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 185,
            "description": "Clears the pixels within a buffer. This function only works on p5.Canvas\nobjects created with the <a href=\"#/p5/createCanvas\">createCanvas()</a> function; it won't work with the\nmain display window. Unlike the main graphics context, pixels in\nadditional graphics areas created with <a href=\"#/p5/createGraphics\">createGraphics()</a> can be entirely\nor partially transparent. This function clears everything to make all of\nthe pixels 100% transparent.",
            "itemtype": "method",
            "name": "clear",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Clear the screen on mouse press.\nfunction setup() {\n  createCanvas(100, 100);\n}\n\nfunction draw() {\n  ellipse(mouseX, mouseY, 20, 20);\n}\n\nfunction mousePressed() {\n  clear();\n}\n</code>\n</div>"
            ],
            "alt": "20x20 white ellipses are continually drawn at mouse x and y coordinates.",
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 223,
            "description": "<a href=\"#/p5/colorMode\">colorMode()</a> changes the way p5.js interprets color data. By default, the\nparameters for <a href=\"#/p5/fill\">fill()</a>, <a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/background\">background()</a>, and <a href=\"#/p5/color\">color()</a> are defined by\nvalues between 0 and 255 using the RGB color model. This is equivalent to\nsetting colorMode(RGB, 255). Setting colorMode(HSB) lets you use the HSB\nsystem instead. By default, this is colorMode(HSB, 360, 100, 100, 1). You\ncan also use HSL.\n<br><br>\nNote: existing color objects remember the mode that they were created in,\nso you can change modes as you like without affecting their appearance.",
            "itemtype": "method",
            "name": "colorMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either RGB, HSB or HSL, corresponding to\n                         Red/Green/Blue and Hue/Saturation/Brightness\n                         (or Lightness)",
                    "type": "Constant"
                },
                {
                    "name": "max",
                    "description": "range for all values",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nnoStroke();\ncolorMode(RGB, 100);\nfor (var i = 0; i < 100; i++) {\n  for (var j = 0; j < 100; j++) {\n    stroke(i, j, 0);\n    point(i, j);\n  }\n}\n</code>\n</div>\n\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 100);\nfor (var i = 0; i < 100; i++) {\n  for (var j = 0; j < 100; j++) {\n    stroke(i, j, 100);\n    point(i, j);\n  }\n}\n</code>\n</div>\n\n<div>\n<code>\ncolorMode(RGB, 255);\nvar c = color(127, 255, 0);\n\ncolorMode(RGB, 1);\nvar myColor = c._getRed();\ntext(myColor, 10, 10, 80, 80);\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\ncolorMode(RGB, 255, 255, 255, 1);\nbackground(255);\n\nstrokeWeight(4);\nstroke(255, 0, 10, 0.3);\nellipse(40, 40, 50, 50);\nellipse(50, 50, 40, 40);\n</code>\n</div>"
            ],
            "alt": "Green to red gradient from bottom L to top R. shading originates from top left.\nRainbow gradient from left to right. Brightness increasing to white at top.\nunknown image.\n50x50 ellipse at middle L & 40x40 ellipse at center. Transluscent pink outlines.",
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 300,
            "itemtype": "method",
            "name": "colorMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "Constant"
                },
                {
                    "name": "max1",
                    "description": "range for the red or hue depending on the\n                             current color mode",
                    "type": "Number"
                },
                {
                    "name": "max2",
                    "description": "range for the green or saturation depending\n                             on the current color mode",
                    "type": "Number"
                },
                {
                    "name": "max3",
                    "description": "range for the blue or brightness/lighntess\n                             depending on the current color mode",
                    "type": "Number"
                },
                {
                    "name": "maxA",
                    "description": "range for the alpha",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 344,
            "description": "Sets the color used to fill shapes. For example, if you run\nfill(204, 102, 0), all subsequent shapes will be filled with orange. This\ncolor is either specified in terms of the RGB or HSB color depending on\nthe current <a href=\"#/p5/colorMode\">colorMode()</a>. (The default color space is RGB, with each value\nin the range from 0 to 255). The alpha range by default is also 0 to 255.\n<br><br>\nIf a single string argument is provided, RGB, RGBA and Hex CSS color strings\nand all named color strings are supported. In this case, an alpha number\nvalue as a second argument is not supported, the RGBA form should be used.\n<br><br>\nA p5 <a href=\"#/p5.Color\">Color</a> object can also be provided to set the fill color.",
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value relative to\n                                the current color range",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Grayscale integer value\nfill(51);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// R, G & B integer values\nfill(255, 204, 0);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// H, S & B integer values\ncolorMode(HSB);\nfill(255, 204, 100);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// Named SVG/CSS color string\nfill('red');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// three-digit hexadecimal RGB notation\nfill('#fae');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// six-digit hexadecimal RGB notation\nfill('#222222');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGB notation\nfill('rgb(0,255,0)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGBA notation\nfill('rgba(0,255,0, 0.25)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGB notation\nfill('rgb(100%,0%,10%)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGBA notation\nfill('rgba(100%,0%,100%,0.5)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// p5 Color object\nfill(color(0, 0, 255));\nrect(20, 20, 60, 60);\n</code>\n</div>"
            ],
            "alt": "60x60 dark charcoal grey rect with black outline in center of canvas.\n60x60 yellow rect with black outline in center of canvas.\n60x60 royal blue rect with black outline in center of canvas.\n60x60 red rect with black outline in center of canvas.\n60x60 pink rect with black outline in center of canvas.\n60x60 black rect with black outline in center of canvas.\n60x60 light green rect with black outline in center of canvas.\n60x60 soft green rect with black outline in center of canvas.\n60x60 red rect with black outline in center of canvas.\n60x60 dark fushcia rect with black outline in center of canvas.\n60x60 blue rect with black outline in center of canvas.",
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 469,
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "value",
                    "description": "a color string",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 475,
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "gray",
                    "description": "a gray value",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 482,
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "values",
                    "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 489,
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "color",
                    "description": "the fill color",
                    "type": "p5.Color"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 501,
            "description": "Disables filling geometry. If both <a href=\"#/p5/noStroke\">noStroke()</a> and <a href=\"#/p5/noFill\">noFill()</a> are called,\nnothing will be drawn to the screen.",
            "itemtype": "method",
            "name": "noFill",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nrect(15, 10, 55, 55);\nnoFill();\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(0);\n  noFill();\n  stroke(100, 100, 240);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  box(45, 45, 45);\n}\n</code>\n</div>"
            ],
            "alt": "white rect top middle and noFill rect center. Both 60x60 with black outlines.\nblack canvas with purple cube wireframe spinning",
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 542,
            "description": "Disables drawing the stroke (outline). If both <a href=\"#/p5/noStroke\">noStroke()</a> and <a href=\"#/p5/noFill\">noFill()</a>\nare called, nothing will be drawn to the screen.",
            "itemtype": "method",
            "name": "noStroke",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nnoStroke();\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(0);\n  noStroke();\n  fill(240, 150, 150);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  box(45, 45, 45);\n}\n</code>\n</div>"
            ],
            "alt": "60x60 white rect at center. no outline.\nblack canvas with pink cube spinning",
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 582,
            "description": "Sets the color used to draw lines and borders around shapes. This color\nis either specified in terms of the RGB or HSB color depending on the\ncurrent <a href=\"#/p5/colorMode\">colorMode()</a> (the default color space is RGB, with each value in\nthe range from 0 to 255). The alpha range by default is also 0 to 255.\n<br><br>\nIf a single string argument is provided, RGB, RGBA and Hex CSS color\nstrings and all named color strings are supported. In this case, an alpha\nnumber value as a second argument is not supported, the RGBA form should be\nused.\n<br><br>\nA p5 <a href=\"#/p5.Color\">Color</a> object can also be provided to set the stroke color.",
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value relative to\n                                the current color range",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Grayscale integer value\nstrokeWeight(4);\nstroke(51);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// R, G & B integer values\nstroke(255, 204, 0);\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// H, S & B integer values\ncolorMode(HSB);\nstrokeWeight(4);\nstroke(255, 204, 100);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// Named SVG/CSS color string\nstroke('red');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// three-digit hexadecimal RGB notation\nstroke('#fae');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// six-digit hexadecimal RGB notation\nstroke('#222222');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGB notation\nstroke('rgb(0,255,0)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGBA notation\nstroke('rgba(0,255,0,0.25)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGB notation\nstroke('rgb(100%,0%,10%)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGBA notation\nstroke('rgba(100%,0%,100%,0.5)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// p5 Color object\nstroke(color(0, 0, 255));\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>"
            ],
            "alt": "60x60 white rect at center. Dark charcoal grey outline.\n60x60 white rect at center. Yellow outline.\n60x60 white rect at center. Royal blue outline.\n60x60 white rect at center. Red outline.\n60x60 white rect at center. Pink outline.\n60x60 white rect at center. Black outline.\n60x60 white rect at center. Bright green outline.\n60x60 white rect at center. Soft green outline.\n60x60 white rect at center. Red outline.\n60x60 white rect at center. Dark fushcia outline.\n60x60 white rect at center. Blue outline.",
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 721,
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "value",
                    "description": "a color string",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 727,
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "gray",
                    "description": "a gray value",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 734,
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "values",
                    "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/color/setting.js",
            "line": 741,
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "color",
                    "description": "the stroke color",
                    "type": "p5.Color"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Color",
            "submodule": "Setting"
        },
        {
            "file": "../p5.js/src/core/shape/2d_primitives.js",
            "line": 16,
            "description": "Draw an arc to the screen. If called with only x, y, w, h, start, and\nstop, the arc will be drawn and filled as an open pie segment. If a mode parameter is provided, the arc\nwill be filled like an open semi-circle (OPEN) , a closed semi-circle (CHORD), or as a closed pie segment (PIE). The\norigin may be changed with the <a href=\"#/p5/ellipseMode\">ellipseMode()</a> function.<br><br>\nNote that drawing a full circle (ex: 0 to TWO_PI) will appear blank\nbecause 0 and TWO_PI are the same position on the unit circle. The\nbest way to handle this is by using the <a href=\"#/p5/ellipse\">ellipse()</a> function instead\nto create a closed ellipse, and to use the <a href=\"#/p5/arc\">arc()</a> function\nonly to draw parts of an ellipse.",
            "itemtype": "method",
            "name": "arc",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the arc's ellipse",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the arc's ellipse",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "width of the arc's ellipse by default",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the arc's ellipse by default",
                    "type": "Number"
                },
                {
                    "name": "start",
                    "description": "angle to start the arc, specified in radians",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "angle to stop the arc, specified in radians",
                    "type": "Number"
                },
                {
                    "name": "mode",
                    "description": "optional parameter to determine the way of drawing\n                        the arc. either CHORD, PIE or OPEN",
                    "type": "Constant",
                    "optional": true
                },
                {
                    "name": "detail",
                    "description": "optional parameter for WebGL mode only. This is to\n                        specify the number of vertices that makes up the\n                        perimeter of the arc. Default value is 25.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\narc(50, 55, 50, 50, 0, HALF_PI);\nnoFill();\narc(50, 55, 60, 60, HALF_PI, PI);\narc(50, 55, 70, 70, PI, PI + QUARTER_PI);\narc(50, 55, 80, 80, PI + QUARTER_PI, TWO_PI);\n</code>\n</div>\n\n<div>\n<code>\narc(50, 50, 80, 80, 0, PI + QUARTER_PI);\n</code>\n</div>\n\n<div>\n<code>\narc(50, 50, 80, 80, 0, PI + QUARTER_PI, OPEN);\n</code>\n</div>\n\n<div>\n<code>\narc(50, 50, 80, 80, 0, PI + QUARTER_PI, CHORD);\n</code>\n</div>\n\n<div>\n<code>\narc(50, 50, 80, 80, 0, PI + QUARTER_PI, PIE);\n</code>\n</div>"
            ],
            "alt": "shattered outline of an ellipse with a quarter of a white circle bottom-right.\nwhite ellipse with top right quarter missing.\nwhite ellipse with black outline with top right missing.\nwhite ellipse with top right missing with black outline around shape.\nwhite ellipse with top right quarter missing with black outline around the shape.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "../p5.js/src/core/shape/2d_primitives.js",
            "line": 149,
            "description": "Draws an ellipse (oval) to the screen. An ellipse with equal width and\nheight is a circle. By default, the first two parameters set the location,\nand the third and fourth parameters set the shape's width and height. If\nno height is specified, the value of width is used for both the width and\nheight. If a negative height or width is specified, the absolute value is taken.\nThe origin may be changed with the <a href=\"#/p5/ellipseMode\">ellipseMode()</a> function.",
            "itemtype": "method",
            "name": "ellipse",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the ellipse.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the ellipse.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "width of the ellipse.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the ellipse.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nellipse(56, 46, 55, 55);\n</code>\n</div>"
            ],
            "alt": "white ellipse with black outline in middle-right of canvas that is 55x55.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "../p5.js/src/core/shape/2d_primitives.js",
            "line": 174,
            "itemtype": "method",
            "name": "ellipse",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "detail",
                    "description": "number of radial sectors to draw",
                    "type": "Integer"
                }
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "../p5.js/src/core/shape/2d_primitives.js",
            "line": 208,
            "description": "Draws a line (a direct path between two points) to the screen. The version\nof <a href=\"#/p5/line\">line()</a> with four parameters draws the line in 2D. To color a line, use\nthe <a href=\"#/p5/stroke\">stroke()</a> function. A line cannot be filled, therefore the <a href=\"#/p5/fill\">fill()</a>\nfunction will not affect the color of a line. 2D lines are drawn with a\nwidth of one pixel by default, but this can be changed with the\n<a href=\"#/p5/strokeWeight\">strokeWeight()</a> function.",
            "itemtype": "method",
            "name": "line",
            "params": [
                {
                    "name": "x1",
                    "description": "the x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "the y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "the x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "the y-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nline(30, 20, 85, 75);\n</code>\n</div>\n\n<div>\n<code>\nline(30, 20, 85, 20);\nstroke(126);\nline(85, 20, 85, 75);\nstroke(255);\nline(85, 75, 30, 75);\n</code>\n</div>"
            ],
            "alt": "line 78 pixels long running from mid-top to bottom-right of canvas.\n3 lines of various stroke sizes. Form top, bottom and right sides of a square.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "../p5.js/src/core/shape/2d_primitives.js",
            "line": 244,
            "itemtype": "method",
            "name": "line",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z1",
                    "description": "the z-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z2",
                    "description": "the z-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "../p5.js/src/core/shape/2d_primitives.js",
            "line": 264,
            "description": "Draws a point, a coordinate in space at the dimension of one pixel.\nThe first parameter is the horizontal value for the point, the second\nvalue is the vertical value for the point. The color of the point is\ndetermined by the current stroke.",
            "itemtype": "method",
            "name": "point",
            "params": [
                {
                    "name": "x",
                    "description": "the x-coordinate",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y-coordinate",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "the z-coordinate (for WEBGL mode)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\npoint(30, 20);\npoint(85, 20);\npoint(85, 75);\npoint(30, 75);\n</code>\n</div>"
            ],
            "alt": "4 points centered in the middle-right of the canvas.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "../p5.js/src/core/shape/2d_primitives.js",
            "line": 299,
            "description": "Draw a quad. A quad is a quadrilateral, a four sided polygon. It is\nsimilar to a rectangle, but the angles between its edges are not\nconstrained to ninety degrees. The first pair of parameters (x1,y1)\nsets the first vertex and the subsequent pairs should proceed\nclockwise or counter-clockwise around the defined shape.",
            "itemtype": "method",
            "name": "quad",
            "params": [
                {
                    "name": "x1",
                    "description": "the x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "the y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "the x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "the y-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "the x-coordinate of the third point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "the y-coordinate of the third point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "the x-coordinate of the fourth point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "the y-coordinate of the fourth point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nquad(38, 31, 86, 20, 69, 63, 30, 76);\n</code>\n</div>"
            ],
            "alt": "irregular white quadrilateral shape with black outline mid-right of canvas.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "../p5.js/src/core/shape/2d_primitives.js",
            "line": 327,
            "itemtype": "method",
            "name": "quad",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z1",
                    "description": "the z-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z2",
                    "description": "the z-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z3",
                    "description": "the z-coordinate of the third point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z4",
                    "description": "the z-coordinate of the fourth point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "../p5.js/src/core/shape/2d_primitives.js",
            "line": 353,
            "description": "Draws a rectangle to the screen. A rectangle is a four-sided shape with\nevery angle at ninety degrees. By default, the first two parameters set\nthe location of the upper-left corner, the third sets the width, and the\nfourth sets the height. The way these parameters are interpreted, however,\nmay be changed with the <a href=\"#/p5/rectMode\">rectMode()</a> function.\n<br><br>\nThe fifth, sixth, seventh and eighth parameters, if specified,\ndetermine corner radius for the top-left, top-right, lower-right and\nlower-left corners, respectively. An omitted corner radius parameter is set\nto the value of the previously specified radius value in the parameter list.",
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "width of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the rectangle.",
                    "type": "Number"
                },
                {
                    "name": "tl",
                    "description": "optional radius of top-left corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "tr",
                    "description": "optional radius of top-right corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "br",
                    "description": "optional radius of bottom-right corner.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "bl",
                    "description": "optional radius of bottom-left corner.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Draw a rectangle at location (30, 20) with a width and height of 55.\nrect(30, 20, 55, 55);\n</code>\n</div>\n\n<div>\n<code>\n// Draw a rectangle with rounded corners, each having a radius of 20.\nrect(30, 20, 55, 55, 20);\n</code>\n</div>\n\n<div>\n<code>\n// Draw a rectangle with rounded corners having the following radii:\n// top-left = 20, top-right = 15, bottom-right = 10, bottom-left = 5.\nrect(30, 20, 55, 55, 20, 15, 10, 5);\n</code>\n</div>"
            ],
            "alt": "55x55 white rect with black outline in mid-right of canvas.\n55x55 white rect with black outline and rounded edges in mid-right of canvas.\n55x55 white rect with black outline and rounded edges of different radii.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "../p5.js/src/core/shape/2d_primitives.js",
            "line": 403,
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "w",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "detailX",
                    "description": "number of segments in the x-direction",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "number of segments in the y-direction",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "../p5.js/src/core/shape/2d_primitives.js",
            "line": 436,
            "description": "A triangle is a plane created by connecting three points. The first two\narguments specify the first point, the middle two arguments specify the\nsecond point, and the last two arguments specify the third point.",
            "itemtype": "method",
            "name": "triangle",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate of the third point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate of the third point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntriangle(30, 75, 58, 20, 86, 75);\n</code>\n</div>"
            ],
            "alt": "white triangle with black outline in mid-right of canvas.",
            "class": "p5",
            "module": "Shape",
            "submodule": "2D Primitives"
        },
        {
            "file": "../p5.js/src/core/shape/attributes.js",
            "line": 14,
            "description": "Modifies the location from which ellipses are drawn by changing the way\nin which parameters given to <a href=\"#/p5/ellipse\">ellipse()</a> are interpreted.\n<br><br>\nThe default mode is ellipseMode(CENTER), which interprets the first two\nparameters of <a href=\"#/p5/ellipse\">ellipse()</a> as the shape's center point, while the third and\nfourth parameters are its width and height.\n<br><br>\nellipseMode(RADIUS) also uses the first two parameters of <a href=\"#/p5/ellipse\">ellipse()</a> as\nthe shape's center point, but uses the third and fourth parameters to\nspecify half of the shapes's width and height.\n<br><br>\nellipseMode(CORNER) interprets the first two parameters of <a href=\"#/p5/ellipse\">ellipse()</a> as\nthe upper-left corner of the shape, while the third and fourth parameters\nare its width and height.\n<br><br>\nellipseMode(CORNERS) interprets the first two parameters of <a href=\"#/p5/ellipse\">ellipse()</a> as\nthe location of one corner of the ellipse's bounding box, and the third\nand fourth parameters as the location of the opposite corner.\n<br><br>\nThe parameter must be written in ALL CAPS because Javascript is a\ncase-sensitive language.",
            "itemtype": "method",
            "name": "ellipseMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either CENTER, RADIUS, CORNER, or CORNERS",
                    "type": "Constant"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nellipseMode(RADIUS); // Set ellipseMode to RADIUS\nfill(255); // Set fill to white\nellipse(50, 50, 30, 30); // Draw white ellipse using RADIUS mode\n\nellipseMode(CENTER); // Set ellipseMode to CENTER\nfill(100); // Set fill to gray\nellipse(50, 50, 30, 30); // Draw gray ellipse using CENTER mode\n</code>\n</div>\n\n<div>\n<code>\nellipseMode(CORNER); // Set ellipseMode is CORNER\nfill(255); // Set fill to white\nellipse(25, 25, 50, 50); // Draw white ellipse using CORNER mode\n\nellipseMode(CORNERS); // Set ellipseMode to CORNERS\nfill(100); // Set fill to gray\nellipse(25, 25, 50, 50); // Draw gray ellipse using CORNERS mode\n</code>\n</div>"
            ],
            "alt": "60x60 white ellipse and 30x30 grey ellipse with black outlines at center.\n60x60 white ellipse @center and 30x30 grey ellipse top-right, black outlines.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/core/shape/attributes.js",
            "line": 83,
            "description": "Draws all geometry with jagged (aliased) edges. Note that <a href=\"#/p5/smooth\">smooth()</a> is\nactive by default in 2D mode, so it is necessary to call <a href=\"#/p5/noSmooth\">noSmooth()</a> to disable\nsmoothing of geometry, images, and fonts. In 3D mode, <a href=\"#/p5/noSmooth\">noSmooth()</a> is enabled\nby default, so it is necessary to call <a href=\"#/p5/smooth\">smooth()</a> if you would like\nsmooth (antialiased) edges on your geometry.",
            "itemtype": "method",
            "name": "noSmooth",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nbackground(0);\nnoStroke();\nsmooth();\nellipse(30, 48, 36, 36);\nnoSmooth();\nellipse(70, 48, 36, 36);\n</code>\n</div>"
            ],
            "alt": "2 pixelated 36x36 white ellipses to left & right of center, black background",
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/core/shape/attributes.js",
            "line": 113,
            "description": "Modifies the location from which rectangles are drawn by changing the way\nin which parameters given to <a href=\"#/p5/rect\">rect()</a> are interpreted.\n<br><br>\nThe default mode is rectMode(CORNER), which interprets the first two\nparameters of <a href=\"#/p5/rect\">rect()</a> as the upper-left corner of the shape, while the\nthird and fourth parameters are its width and height.\n<br><br>\nrectMode(CORNERS) interprets the first two parameters of <a href=\"#/p5/rect\">rect()</a> as the\nlocation of one corner, and the third and fourth parameters as the\nlocation of the opposite corner.\n<br><br>\nrectMode(CENTER) interprets the first two parameters of <a href=\"#/p5/rect\">rect()</a> as the\nshape's center point, while the third and fourth parameters are its\nwidth and height.\n<br><br>\nrectMode(RADIUS) also uses the first two parameters of <a href=\"#/p5/rect\">rect()</a> as the\nshape's center point, but uses the third and fourth parameters to specify\nhalf of the shapes's width and height.\n<br><br>\nThe parameter must be written in ALL CAPS because Javascript is a\ncase-sensitive language.",
            "itemtype": "method",
            "name": "rectMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either CORNER, CORNERS, CENTER, or RADIUS",
                    "type": "Constant"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nrectMode(CORNER); // Default rectMode is CORNER\nfill(255); // Set fill to white\nrect(25, 25, 50, 50); // Draw white rect using CORNER mode\n\nrectMode(CORNERS); // Set rectMode to CORNERS\nfill(100); // Set fill to gray\nrect(25, 25, 50, 50); // Draw gray rect using CORNERS mode\n</code>\n</div>\n\n<div>\n<code>\nrectMode(RADIUS); // Set rectMode to RADIUS\nfill(255); // Set fill to white\nrect(50, 50, 30, 30); // Draw white rect using RADIUS mode\n\nrectMode(CENTER); // Set rectMode to CENTER\nfill(100); // Set fill to gray\nrect(50, 50, 30, 30); // Draw gray rect using CENTER mode\n</code>\n</div>"
            ],
            "alt": "50x50 white rect at center and 25x25 grey rect in the top left of the other.\n50x50 white rect at center and 25x25 grey rect in the center of the other.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/core/shape/attributes.js",
            "line": 182,
            "description": "Draws all geometry with smooth (anti-aliased) edges. <a href=\"#/p5/smooth\">smooth()</a> will also\nimprove image quality of resized images. Note that <a href=\"#/p5/smooth\">smooth()</a> is active by\ndefault in 2D mode; <a href=\"#/p5/noSmooth\">noSmooth()</a> can be used to disable smoothing of geometry,\nimages, and fonts. In 3D mode, <a href=\"#/p5/noSmooth\">noSmooth()</a> is enabled\nby default, so it is necessary to call <a href=\"#/p5/smooth\">smooth()</a> if you would like\nsmooth (antialiased) edges on your geometry.",
            "itemtype": "method",
            "name": "smooth",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nbackground(0);\nnoStroke();\nsmooth();\nellipse(30, 48, 36, 36);\nnoSmooth();\nellipse(70, 48, 36, 36);\n</code>\n</div>"
            ],
            "alt": "2 pixelated 36x36 white ellipses one left one right of center. On black.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/core/shape/attributes.js",
            "line": 213,
            "description": "Sets the style for rendering line endings. These ends are either squared,\nextended, or rounded, each of which specified with the corresponding\nparameters: SQUARE, PROJECT, and ROUND. The default cap is ROUND.",
            "itemtype": "method",
            "name": "strokeCap",
            "params": [
                {
                    "name": "cap",
                    "description": "either SQUARE, PROJECT, or ROUND",
                    "type": "Constant"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nstrokeWeight(12.0);\nstrokeCap(ROUND);\nline(20, 30, 80, 30);\nstrokeCap(SQUARE);\nline(20, 50, 80, 50);\nstrokeCap(PROJECT);\nline(20, 70, 80, 70);\n</code>\n</div>"
            ],
            "alt": "3 lines. Top line: rounded ends, mid: squared, bottom:longer squared ends.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/core/shape/attributes.js",
            "line": 250,
            "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled, or rounded and specified with the\ncorresponding parameters MITER, BEVEL, and ROUND. The default joint is\nMITER.",
            "itemtype": "method",
            "name": "strokeJoin",
            "params": [
                {
                    "name": "join",
                    "description": "either MITER, BEVEL, ROUND",
                    "type": "Constant"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nnoFill();\nstrokeWeight(10.0);\nstrokeJoin(MITER);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nstrokeWeight(10.0);\nstrokeJoin(BEVEL);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nstrokeWeight(10.0);\nstrokeJoin(ROUND);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\n</code>\n</div>"
            ],
            "alt": "Right-facing arrowhead shape with pointed tip in center of canvas.\nRight-facing arrowhead shape with flat tip in center of canvas.\nRight-facing arrowhead shape with rounded tip in center of canvas.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/core/shape/attributes.js",
            "line": 317,
            "description": "Sets the width of the stroke used for lines, points, and the border\naround shapes. All widths are set in units of pixels.",
            "itemtype": "method",
            "name": "strokeWeight",
            "params": [
                {
                    "name": "weight",
                    "description": "the weight (in pixels) of the stroke",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nstrokeWeight(1); // Default\nline(20, 20, 80, 20);\nstrokeWeight(4); // Thicker\nline(20, 40, 80, 40);\nstrokeWeight(10); // Beastly\nline(20, 70, 80, 70);\n</code>\n</div>"
            ],
            "alt": "3 horizontal black lines. Top line: thin, mid: medium, bottom:thick.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/core/shape/curves.js",
            "line": 13,
            "description": "Draws a cubic Bezier curve on the screen. These curves are defined by a\nseries of anchor and control points. The first two parameters specify\nthe first anchor point and the last two parameters specify the other\nanchor point, which become the first and last points on the curve. The\nmiddle parameters specify the two control points which define the shape\nof the curve. Approximately speaking, control points \"pull\" the curve\ntowards them.<br /><br />Bezier curves were developed by French\nautomotive engineer Pierre Bezier, and are commonly used in computer\ngraphics to define gently sloping curves. See also <a href=\"#/p5/curve\">curve()</a>.",
            "itemtype": "method",
            "name": "bezier",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate for the first anchor point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate for the first anchor point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "x-coordinate for the second anchor point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "y-coordinate for the second anchor point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nnoFill();\nstroke(255, 102, 0);\nline(85, 20, 10, 10);\nline(90, 90, 15, 80);\nstroke(0, 0, 0);\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\n</code>\n</div>\n\n<div>\n<code>\nbackground(0, 0, 0);\nnoFill();\nstroke(255);\nbezier(250, 250, 0, 100, 100, 0, 100, 0, 0, 0, 100, 0);\n</code>\n</div>"
            ],
            "alt": "stretched black s-shape in center with orange lines extending from end points.\nstretched black s-shape with 10 5x5 white ellipses along the shape.\nstretched black s-shape with 7 5x5 ellipses and orange lines along the shape.\nstretched black s-shape with 17 small orange lines extending from under shape.\nhorseshoe shape with orange ends facing left and black curved center.\nhorseshoe shape with orange ends facing left and black curved center.\nLine shaped like right-facing arrow,points move with mouse-x and warp shape.\nhorizontal line that hooks downward on the right and 13 5x5 ellipses along it.\nright curving line mid-right of canvas with 7 short lines radiating from it.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "../p5.js/src/core/shape/curves.js",
            "line": 66,
            "itemtype": "method",
            "name": "bezier",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z1",
                    "description": "z-coordinate for the first anchor point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z2",
                    "description": "z-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z3",
                    "description": "z-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z4",
                    "description": "z-coordinate for the second anchor point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "../p5.js/src/core/shape/curves.js",
            "line": 96,
            "description": "Sets the resolution at which Beziers display.\n\nThe default value is 20.\n\nThis function is only useful when using the WEBGL renderer\nas the default canvas renderer does not use this information.",
            "itemtype": "method",
            "name": "bezierDetail",
            "params": [
                {
                    "name": "detail",
                    "description": "resolution of the curves",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  noFill();\n\n  bezierDetail(5);\n}\n\nfunction draw() {\n  background(200);\n\n  // prettier-ignore\n  bezier(-40, -40, 0,\n          90, -40, 0,\n         -90,  40, 0,\n          40,  40, 0);\n}\n</code>\n</div>"
            ],
            "alt": "stretched black s-shape with a low level of bezier detail",
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "../p5.js/src/core/shape/curves.js",
            "line": 139,
            "description": "Evaluates the Bezier at position t for points a, b, c, d.\nThe parameters a and d are the first and last points\non the curve, and b and c are the control points.\nThe final parameter t varies between 0 and 1.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a bezier curve at t.",
            "itemtype": "method",
            "name": "bezierPoint",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the value of the Bezier at position t",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\nvar x1 = 85,\n x2 = 10,\n x3 = 90,\n x4 = 15;\nvar y1 = 20,\n y2 = 10,\n y3 = 90,\n y4 = 80;\nbezier(x1, y1, x2, y2, x3, y3, x4, y4);\nfill(255);\nvar steps = 10;\nfor (var i = 0; i <= steps; i++) {\n  var t = i / steps;\n  var x = bezierPoint(x1, x2, x3, x4, t);\n  var y = bezierPoint(y1, y2, y3, y4, t);\n  ellipse(x, y, 5, 5);\n}\n</code>\n</div>"
            ],
            "alt": "stretched black s-shape with 17 small orange lines extending from under shape.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "../p5.js/src/core/shape/curves.js",
            "line": 194,
            "description": "Evaluates the tangent to the Bezier at position t for points a, b, c, d.\nThe parameters a and d are the first and last points\non the curve, and b and c are the control points.\nThe final parameter t varies between 0 and 1.",
            "itemtype": "method",
            "name": "bezierTangent",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the tangent at position t",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\nvar steps = 6;\nfill(255);\nfor (var i = 0; i <= steps; i++) {\n  var t = i / steps;\n  // Get the location of the point\n  var x = bezierPoint(85, 10, 90, 15, t);\n  var y = bezierPoint(20, 10, 90, 80, t);\n  // Get the tangent points\n  var tx = bezierTangent(85, 10, 90, 15, t);\n  var ty = bezierTangent(20, 10, 90, 80, t);\n  // Calculate an angle from the tangent points\n  var a = atan2(ty, tx);\n  a += PI;\n  stroke(255, 102, 0);\n  line(x, y, cos(a) * 30 + x, sin(a) * 30 + y);\n  // The following line of code makes a line\n  // inverse of the above line\n  //line(x, y, cos(a)*-30 + x, sin(a)*-30 + y);\n  stroke(0);\n  ellipse(x, y, 5, 5);\n}\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\nstroke(255, 102, 0);\nvar steps = 16;\nfor (var i = 0; i <= steps; i++) {\n  var t = i / steps;\n  var x = bezierPoint(85, 10, 90, 15, t);\n  var y = bezierPoint(20, 10, 90, 80, t);\n  var tx = bezierTangent(85, 10, 90, 15, t);\n  var ty = bezierTangent(20, 10, 90, 80, t);\n  var a = atan2(ty, tx);\n  a -= HALF_PI;\n  line(x, y, cos(a) * 8 + x, sin(a) * 8 + y);\n}\n</code>\n</div>"
            ],
            "alt": "s-shaped line with 17 short orange lines extending from underside of shape",
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "../p5.js/src/core/shape/curves.js",
            "line": 273,
            "description": "Draws a curved line on the screen between two points, given as the\nmiddle four parameters. The first two parameters are a control point, as\nif the curve came from this point even though it's not drawn. The last\ntwo parameters similarly describe the other control point. <br /><br />\nLonger curves can be created by putting a series of <a href=\"#/p5/curve\">curve()</a> functions\ntogether or using <a href=\"#/p5/curveVertex\">curveVertex()</a>. An additional function called\n<a href=\"#/p5/curveTightness\">curveTightness()</a> provides control for the visual quality of the curve.\nThe <a href=\"#/p5/curve\">curve()</a> function is an implementation of Catmull-Rom splines.",
            "itemtype": "method",
            "name": "curve",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate for the beginning control point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate for the beginning control point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate for the first point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate for the first point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the second point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the second point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "x-coordinate for the ending control point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "y-coordinate for the ending control point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nnoFill();\nstroke(255, 102, 0);\ncurve(5, 26, 5, 26, 73, 24, 73, 61);\nstroke(0);\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\nstroke(255, 102, 0);\ncurve(73, 24, 73, 61, 15, 65, 15, 65);\n</code>\n</div>\n<div>\n<code>\n// Define the curve points as JavaScript objects\nvar p1 = { x: 5, y: 26 },\n p2 = { x: 73, y: 24 };\nvar p3 = { x: 73, y: 61 },\n p4 = { x: 15, y: 65 };\nnoFill();\nstroke(255, 102, 0);\ncurve(p1.x, p1.y, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);\nstroke(0);\ncurve(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y);\nstroke(255, 102, 0);\ncurve(p2.x, p2.y, p3.x, p3.y, p4.x, p4.y, p4.x, p4.y);\n</code>\n</div>\n<div>\n<code>\nnoFill();\nstroke(255, 102, 0);\ncurve(5, 26, 0, 5, 26, 0, 73, 24, 0, 73, 61, 0);\nstroke(0);\ncurve(5, 26, 0, 73, 24, 0, 73, 61, 0, 15, 65, 0);\nstroke(255, 102, 0);\ncurve(73, 24, 0, 73, 61, 0, 15, 65, 0, 15, 65, 0);\n</code>\n</div>"
            ],
            "alt": "horseshoe shape with orange ends facing left and black curved center.\nhorseshoe shape with orange ends facing left and black curved center.\ncurving black and orange lines.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "../p5.js/src/core/shape/curves.js",
            "line": 338,
            "itemtype": "method",
            "name": "curve",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z1",
                    "description": "z-coordinate for the beginning control point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z2",
                    "description": "z-coordinate for the first point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z3",
                    "description": "z-coordinate for the second point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z4",
                    "description": "z-coordinate for the ending control point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "../p5.js/src/core/shape/curves.js",
            "line": 364,
            "description": "Sets the resolution at which curves display.\n\nThe default value is 20 while the minimum value is 3.\n\nThis function is only useful when using the WEBGL renderer\nas the default canvas renderer does not use this\ninformation.",
            "itemtype": "method",
            "name": "curveDetail",
            "params": [
                {
                    "name": "resolution",
                    "description": "resolution of the curves",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  curveDetail(5);\n}\nfunction draw() {\n  background(200);\n\n  curve(250, 600, 0, -30, 40, 0, 30, 30, 0, -250, 600, 0);\n}\n</code>\n</div>"
            ],
            "alt": "white arch shape with a low level of curve detail.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "../p5.js/src/core/shape/curves.js",
            "line": 406,
            "description": "Modifies the quality of forms created with <a href=\"#/p5/curve\">curve()</a> and <a href=\"#/p5/curveVertex\">curveVertex()</a>.\nThe parameter tightness determines how the curve fits to the vertex\npoints. The value 0.0 is the default value for tightness (this value\ndefines the curves to be Catmull-Rom splines) and the value 1.0 connects\nall the points with straight lines. Values within the range -5.0 and 5.0\nwill deform the curves but will leave them recognizable and as values\nincrease in magnitude, they will continue to deform.",
            "itemtype": "method",
            "name": "curveTightness",
            "params": [
                {
                    "name": "amount",
                    "description": "amount of deformation from the original vertices",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Move the mouse left and right to see the curve change\n\nfunction setup() {\n  createCanvas(100, 100);\n  noFill();\n}\n\nfunction draw() {\n  background(204);\n  var t = map(mouseX, 0, width, -5, 5);\n  curveTightness(t);\n  beginShape();\n  curveVertex(10, 26);\n  curveVertex(10, 26);\n  curveVertex(83, 24);\n  curveVertex(83, 61);\n  curveVertex(25, 65);\n  curveVertex(25, 65);\n  endShape();\n}\n</code>\n</div>"
            ],
            "alt": "Line shaped like right-facing arrow,points move with mouse-x and warp shape.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "../p5.js/src/core/shape/curves.js",
            "line": 453,
            "description": "Evaluates the curve at position t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are control points\nof the curve, and b and c are the start and end points of the curve.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a curve at t.",
            "itemtype": "method",
            "name": "curvePoint",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first control point of the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "bezier value at position t",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\ncurve(5, 26, 5, 26, 73, 24, 73, 61);\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\nfill(255);\nellipseMode(CENTER);\nvar steps = 6;\nfor (var i = 0; i <= steps; i++) {\n  var t = i / steps;\n  var x = curvePoint(5, 5, 73, 73, t);\n  var y = curvePoint(26, 26, 24, 61, t);\n  ellipse(x, y, 5, 5);\n  x = curvePoint(5, 73, 73, 15, t);\n  y = curvePoint(26, 24, 61, 65, t);\n  ellipse(x, y, 5, 5);\n}\n</code>\n</div>\n\nline hooking down to right-bottom with 13 5x5 white ellipse points"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "../p5.js/src/core/shape/curves.js",
            "line": 502,
            "description": "Evaluates the tangent to the curve at position t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points on the curve,\nand b and c are the control points.",
            "itemtype": "method",
            "name": "curveTangent",
            "params": [
                {
                    "name": "a",
                    "description": "coordinate of first point on the curve",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "coordinate of first control point",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "coordinate of second control point",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "coordinate of second point on the curve",
                    "type": "Number"
                },
                {
                    "name": "t",
                    "description": "value between 0 and 1",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the tangent at position t",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nnoFill();\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\nvar steps = 6;\nfor (var i = 0; i <= steps; i++) {\n  var t = i / steps;\n  var x = curvePoint(5, 73, 73, 15, t);\n  var y = curvePoint(26, 24, 61, 65, t);\n  //ellipse(x, y, 5, 5);\n  var tx = curveTangent(5, 73, 73, 15, t);\n  var ty = curveTangent(26, 24, 61, 65, t);\n  var a = atan2(ty, tx);\n  a -= PI / 2.0;\n  line(x, y, cos(a) * 8 + x, sin(a) * 8 + y);\n}\n</code>\n</div>"
            ],
            "alt": "right curving line mid-right of canvas with 7 short lines radiating from it.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Curves"
        },
        {
            "file": "../p5.js/src/core/shape/vertex.js",
            "line": 22,
            "description": "Use the <a href=\"#/p5/beginContour\">beginContour()</a> and <a href=\"#/p5/endContour\">endContour()</a> functions to create negative\nshapes within shapes such as the center of the letter 'O'. <a href=\"#/p5/beginContour\">beginContour()</a>\nbegins recording vertices for the shape and <a href=\"#/p5/endContour\">endContour()</a> stops recording.\nThe vertices that define a negative shape must \"wind\" in the opposite\ndirection from the exterior shape. First draw vertices for the exterior\nclockwise order, then for internal shapes, draw vertices\nshape in counter-clockwise.\n<br><br>\nThese functions can only be used within a <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> pair and\ntransformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\nwithin a <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a> pair. It is also not possible to use\nother shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within.",
            "itemtype": "method",
            "name": "beginContour",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntranslate(50, 50);\nstroke(255, 0, 0);\nbeginShape();\n// Exterior part of shape, clockwise winding\nvertex(-40, -40);\nvertex(40, -40);\nvertex(40, 40);\nvertex(-40, 40);\n// Interior part of shape, counter-clockwise winding\nbeginContour();\nvertex(-20, -20);\nvertex(-20, 20);\nvertex(20, 20);\nvertex(20, -20);\nendContour();\nendShape(CLOSE);\n</code>\n</div>"
            ],
            "alt": "white rect and smaller grey rect with red outlines in center of canvas.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "../p5.js/src/core/shape/vertex.js",
            "line": 70,
            "description": "Using the <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> functions allow creating more\ncomplex forms. <a href=\"#/p5/beginShape\">beginShape()</a> begins recording vertices for a shape and\n<a href=\"#/p5/endShape\">endShape()</a> stops recording. The value of the kind parameter tells it which\ntypes of shapes to create from the provided vertices. With no mode\nspecified, the shape can be any irregular polygon.\n<br><br>\nThe parameters available for <a href=\"#/p5/beginShape\">beginShape()</a> are POINTS, LINES, TRIANGLES,\nTRIANGLE_FAN, TRIANGLE_STRIP, QUADS, and QUAD_STRIP. After calling the\n<a href=\"#/p5/beginShape\">beginShape()</a> function, a series of <a href=\"#/p5/vertex\">vertex()</a> commands must follow. To stop\ndrawing the shape, call <a href=\"#/p5/endShape\">endShape()</a>. Each shape will be outlined with the\ncurrent stroke color and filled with the fill color.\n<br><br>\nTransformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\nwithin <a href=\"#/p5/beginShape\">beginShape()</a>. It is also not possible to use other shapes, such as\n<a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within <a href=\"#/p5/beginShape\">beginShape()</a>.",
            "itemtype": "method",
            "name": "beginShape",
            "params": [
                {
                    "name": "kind",
                    "description": "either POINTS, LINES, TRIANGLES, TRIANGLE_FAN\n                               TRIANGLE_STRIP, QUADS, or QUAD_STRIP",
                    "type": "Constant",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nbeginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape(CLOSE);\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(POINTS);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(LINES);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nbeginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nbeginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape(CLOSE);\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(TRIANGLES);\nvertex(30, 75);\nvertex(40, 20);\nvertex(50, 75);\nvertex(60, 20);\nvertex(70, 75);\nvertex(80, 20);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(TRIANGLE_STRIP);\nvertex(30, 75);\nvertex(40, 20);\nvertex(50, 75);\nvertex(60, 20);\nvertex(70, 75);\nvertex(80, 20);\nvertex(90, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(TRIANGLE_FAN);\nvertex(57.5, 50);\nvertex(57.5, 15);\nvertex(92, 50);\nvertex(57.5, 85);\nvertex(22, 50);\nvertex(57.5, 15);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(QUADS);\nvertex(30, 20);\nvertex(30, 75);\nvertex(50, 75);\nvertex(50, 20);\nvertex(65, 20);\nvertex(65, 75);\nvertex(85, 75);\nvertex(85, 20);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(QUAD_STRIP);\nvertex(30, 20);\nvertex(30, 75);\nvertex(50, 20);\nvertex(50, 75);\nvertex(65, 20);\nvertex(65, 75);\nvertex(85, 20);\nvertex(85, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape();\nvertex(20, 20);\nvertex(40, 20);\nvertex(40, 40);\nvertex(60, 40);\nvertex(60, 60);\nvertex(20, 60);\nendShape(CLOSE);\n</code>\n</div>"
            ],
            "alt": "white square-shape with black outline in middle-right of canvas.\n4 black points in a square shape in middle-right of canvas.\n2 horizontal black lines. In the top-right and bottom-right of canvas.\n3 line shape with horizontal on top, vertical in middle and horizontal bottom.\nsquare line shape in middle-right of canvas.\n2 white triangle shapes mid-right canvas. left one pointing up and right down.\n5 horizontal interlocking and alternating white triangles in mid-right canvas.\n4 interlocking white triangles in 45 degree rotated square-shape.\n2 white rectangle shapes in mid-right canvas. Both 20x55.\n3 side-by-side white rectangles center rect is smaller in mid-right canvas.\nThick white l-shape with black outline mid-top-left of canvas.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "../p5.js/src/core/shape/vertex.js",
            "line": 270,
            "description": "Specifies vertex coordinates for Bezier curves. Each call to\nbezierVertex() defines the position of two control points and\none anchor point of a Bezier curve, adding a new segment to a\nline or shape. For WebGL mode bezierVertex() can be used in 2D\nas well as 3D mode. 2D mode expects 6 parameters, while 3D mode\nexpects 9 parameters (including z coordinates).\n<br><br>\nThe first time bezierVertex() is used within a <a href=\"#/p5/beginShape\">beginShape()</a>\ncall, it must be prefaced with a call to <a href=\"#/p5/vertex\">vertex()</a> to set the first anchor\npoint. This function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a>\nand only when there is no MODE or POINTS parameter specified to\n<a href=\"#/p5/beginShape\">beginShape()</a>.",
            "itemtype": "method",
            "name": "bezierVertex",
            "params": [
                {
                    "name": "x2",
                    "description": "x-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate for the first control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the second control point",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "x-coordinate for the anchor point",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "y-coordinate for the anchor point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nnoFill();\nbeginShape();\nvertex(30, 20);\nbezierVertex(80, 0, 80, 75, 30, 75);\nendShape();\n</code>\n</div>",
                "\n<div>\n<code>\nbeginShape();\nvertex(30, 20);\nbezierVertex(80, 0, 80, 75, 30, 75);\nbezierVertex(50, 80, 60, 25, 30, 20);\nendShape();\n</code>\n</div>",
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  setAttributes('antialias', true);\n}\nfunction draw() {\n  orbitControl();\n  background(50);\n  strokeWeight(4);\n  stroke(255);\n  point(-25, 30);\n  point(25, 30);\n  point(25, -30);\n  point(-25, -30);\n\n  strokeWeight(1);\n  noFill();\n\n  beginShape();\n  vertex(-25, 30);\n  bezierVertex(25, 30, 25, -30, -25, -30);\n  endShape();\n\n  beginShape();\n  vertex(-25, 30, 20);\n  bezierVertex(25, 30, 20, 25, -30, 20, -25, -30, 20);\n  endShape();\n}\n</code>\n</div>"
            ],
            "alt": "crescent shape in middle of canvas with another crescent shape on positive z-axis.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "../p5.js/src/core/shape/vertex.js",
            "line": 358,
            "itemtype": "method",
            "name": "bezierVertex",
            "params": [
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z2",
                    "description": "z-coordinate for the first control point (for WebGL mode)",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z3",
                    "description": "z-coordinate for the second control point (for WebGL mode)",
                    "type": "Number"
                },
                {
                    "name": "x4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y4",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z4",
                    "description": "z-coordinate for the anchor point (for WebGL mode)",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "../p5.js/src/core/shape/vertex.js",
            "line": 396,
            "description": "Specifies vertex coordinates for curves. This function may only\nbe used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a> and only when there\nis no MODE parameter specified to <a href=\"#/p5/beginShape\">beginShape()</a>.\nFor WebGL mode curveVertex() can be used in 2D as well as 3D mode.\n2D mode expects 2 parameters, while 3D mode expects 3 parameters.\n<br><br>\nThe first and last points in a series of curveVertex() lines will be used to\nguide the beginning and end of a the curve. A minimum of four\npoints is required to draw a tiny curve between the second and\nthird points. Adding a fifth point with curveVertex() will draw\nthe curve between the second, third, and fourth points. The\ncurveVertex() function is an implementation of Catmull-Rom\nsplines.",
            "itemtype": "method",
            "name": "curveVertex",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the vertex",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the vertex",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nstrokeWeight(5);\npoint(84, 91);\npoint(68, 19);\npoint(21, 17);\npoint(32, 91);\nstrokeWeight(1);\n\nnoFill();\nbeginShape();\ncurveVertex(84, 91);\ncurveVertex(84, 91);\ncurveVertex(68, 19);\ncurveVertex(21, 17);\ncurveVertex(32, 91);\ncurveVertex(32, 91);\nendShape();\n</code>\n</div>"
            ],
            "alt": "Upside-down u-shape line, mid canvas. left point extends beyond canvas view.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "../p5.js/src/core/shape/vertex.js",
            "line": 441,
            "itemtype": "method",
            "name": "curveVertex",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z-coordinate of the vertex (for WebGL mode)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  setAttributes('antialias', true);\n}\nfunction draw() {\n  orbitControl();\n  background(50);\n  strokeWeight(4);\n  stroke(255);\n\n  point(-25, 25);\n  point(-25, 25);\n  point(-25, -25);\n  point(25, -25);\n  point(25, 25);\n  point(25, 25);\n\n  strokeWeight(1);\n  noFill();\n\n  beginShape();\n  curveVertex(-25, 25);\n  curveVertex(-25, 25);\n  curveVertex(-25, -25);\n  curveVertex(25, -25);\n  curveVertex(25, 25);\n  curveVertex(25, 25);\n  endShape();\n\n  beginShape();\n  curveVertex(-25, 25, 20);\n  curveVertex(-25, 25, 20);\n  curveVertex(-25, -25, 20);\n  curveVertex(25, -25, 20);\n  curveVertex(25, 25, 20);\n  curveVertex(25, 25, 20);\n  endShape();\n}\n</code>\n</div>"
            ],
            "alt": "Upside-down u-shape line, mid canvas with the same shape in positive z-axis.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "../p5.js/src/core/shape/vertex.js",
            "line": 506,
            "description": "Use the <a href=\"#/p5/beginContour\">beginContour()</a> and <a href=\"#/p5/endContour\">endContour()</a> functions to create negative\nshapes within shapes such as the center of the letter 'O'. <a href=\"#/p5/beginContour\">beginContour()</a>\nbegins recording vertices for the shape and <a href=\"#/p5/endContour\">endContour()</a> stops recording.\nThe vertices that define a negative shape must \"wind\" in the opposite\ndirection from the exterior shape. First draw vertices for the exterior\nclockwise order, then for internal shapes, draw vertices\nshape in counter-clockwise.\n<br><br>\nThese functions can only be used within a <a href=\"#/p5/beginShape\">beginShape()</a>/<a href=\"#/p5/endShape\">endShape()</a> pair and\ntransformations such as <a href=\"#/p5/translate\">translate()</a>, <a href=\"#/p5/rotate\">rotate()</a>, and <a href=\"#/p5/scale\">scale()</a> do not work\nwithin a <a href=\"#/p5/beginContour\">beginContour()</a>/<a href=\"#/p5/endContour\">endContour()</a> pair. It is also not possible to use\nother shapes, such as <a href=\"#/p5/ellipse\">ellipse()</a> or <a href=\"#/p5/rect\">rect()</a> within.",
            "itemtype": "method",
            "name": "endContour",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntranslate(50, 50);\nstroke(255, 0, 0);\nbeginShape();\n// Exterior part of shape, clockwise winding\nvertex(-40, -40);\nvertex(40, -40);\nvertex(40, 40);\nvertex(-40, 40);\n// Interior part of shape, counter-clockwise winding\nbeginContour();\nvertex(-20, -20);\nvertex(-20, 20);\nvertex(20, 20);\nvertex(20, -20);\nendContour();\nendShape(CLOSE);\n</code>\n</div>"
            ],
            "alt": "white rect and smaller grey rect with red outlines in center of canvas.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "../p5.js/src/core/shape/vertex.js",
            "line": 566,
            "description": "The <a href=\"#/p5/endShape\">endShape()</a> function is the companion to <a href=\"#/p5/beginShape\">beginShape()</a> and may only be\ncalled after <a href=\"#/p5/beginShape\">beginShape()</a>. When <a href=\"#/p5/endshape\">endshape()</a> is called, all of image data\ndefined since the previous call to <a href=\"#/p5/beginShape\">beginShape()</a> is written into the image\nbuffer. The constant CLOSE as the value for the MODE parameter to close\nthe shape (to connect the beginning and the end).",
            "itemtype": "method",
            "name": "endShape",
            "params": [
                {
                    "name": "mode",
                    "description": "use CLOSE to close the shape",
                    "type": "Constant",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nnoFill();\n\nbeginShape();\nvertex(20, 20);\nvertex(45, 20);\nvertex(45, 80);\nendShape(CLOSE);\n\nbeginShape();\nvertex(50, 20);\nvertex(75, 20);\nvertex(75, 80);\nendShape();\n</code>\n</div>"
            ],
            "alt": "Triangle line shape with smallest interior angle on bottom and upside-down L.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "../p5.js/src/core/shape/vertex.js",
            "line": 652,
            "description": "Specifies vertex coordinates for quadratic Bezier curves. Each call to\nquadraticVertex() defines the position of one control points and one\nanchor point of a Bezier curve, adding a new segment to a line or shape.\nThe first time quadraticVertex() is used within a <a href=\"#/p5/beginShape\">beginShape()</a> call, it\nmust be prefaced with a call to <a href=\"#/p5/vertex\">vertex()</a> to set the first anchor point.\nFor WebGL mode quadraticVertex() can be used in 2D as well as 3D mode.\n2D mode expects 4 parameters, while 3D mode expects 6 parameters\n(including z coordinates).\n<br><br>\nThis function must be used between <a href=\"#/p5/beginShape\">beginShape()</a> and <a href=\"#/p5/endShape\">endShape()</a>\nand only when there is no MODE or POINTS parameter specified to\n<a href=\"#/p5/beginShape\">beginShape()</a>.",
            "itemtype": "method",
            "name": "quadraticVertex",
            "params": [
                {
                    "name": "cx",
                    "description": "x-coordinate for the control point",
                    "type": "Number"
                },
                {
                    "name": "cy",
                    "description": "y-coordinate for the control point",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "x-coordinate for the anchor point",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "y-coordinate for the anchor point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nstrokeWeight(5);\npoint(20, 20);\npoint(80, 20);\npoint(50, 50);\n\nnoFill();\nstrokeWeight(1);\nbeginShape();\nvertex(20, 20);\nquadraticVertex(80, 20, 50, 50);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nstrokeWeight(5);\npoint(20, 20);\npoint(80, 20);\npoint(50, 50);\n\npoint(20, 80);\npoint(80, 80);\npoint(80, 60);\n\nnoFill();\nstrokeWeight(1);\nbeginShape();\nvertex(20, 20);\nquadraticVertex(80, 20, 50, 50);\nquadraticVertex(20, 80, 80, 80);\nvertex(80, 60);\nendShape();\n</code>\n</div>"
            ],
            "alt": "arched-shaped black line with 4 pixel thick stroke weight.\nbackwards s-shaped black line with 4 pixel thick stroke weight.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "../p5.js/src/core/shape/vertex.js",
            "line": 718,
            "itemtype": "method",
            "name": "quadraticVertex",
            "params": [
                {
                    "name": "cx",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cy",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cz",
                    "description": "z-coordinate for the control point (for WebGL mode)",
                    "type": "Number"
                },
                {
                    "name": "x3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z3",
                    "description": "z-coordinate for the anchor point (for WebGL mode)",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  setAttributes('antialias', true);\n}\nfunction draw() {\n  orbitControl();\n  background(50);\n  strokeWeight(4);\n  stroke(255);\n\n  point(-35, -35);\n  point(35, -35);\n  point(0, 0);\n  point(-35, 35);\n  point(35, 35);\n  point(35, 10);\n\n  strokeWeight(1);\n  noFill();\n\n  beginShape();\n  vertex(-35, -35);\n  quadraticVertex(35, -35, 0, 0);\n  quadraticVertex(-35, 35, 35, 35);\n  vertex(35, 10);\n  endShape();\n\n  beginShape();\n  vertex(-35, -35, 20);\n  quadraticVertex(35, -35, 20, 0, 0, 20);\n  quadraticVertex(-35, 35, 20, 35, 35, 20);\n  vertex(35, 10, 20);\n  endShape();\n}\n</code>\n</div>"
            ],
            "alt": "backwards s-shaped black line with the same s-shaped line in postive z-axis.",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "../p5.js/src/core/shape/vertex.js",
            "line": 810,
            "description": "All shapes are constructed by connecting a series of vertices. <a href=\"#/p5/vertex\">vertex()</a>\nis used to specify the vertex coordinates for points, lines, triangles,\nquads, and polygons. It is used exclusively within the <a href=\"#/p5/beginShape\">beginShape()</a> and\n<a href=\"#/p5/endShape\">endShape()</a> functions.",
            "itemtype": "method",
            "name": "vertex",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the vertex",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the vertex",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nstrokeWeight(3);\nbeginShape(POINTS);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>"
            ],
            "alt": "8 points making 4 lines",
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "../p5.js/src/core/shape/vertex.js",
            "line": 897,
            "itemtype": "method",
            "name": "vertex",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z-coordinate of the vertex",
                    "type": "Number"
                },
                {
                    "name": "u",
                    "description": "the vertex's texture u-coordinate",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "v",
                    "description": "the vertex's texture v-coordinate",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Shape",
            "submodule": "Vertex"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 13,
            "itemtype": "property",
            "name": "P2D",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 18,
            "itemtype": "property",
            "name": "WEBGL",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 25,
            "itemtype": "property",
            "name": "ARROW",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 30,
            "itemtype": "property",
            "name": "CROSS",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 35,
            "itemtype": "property",
            "name": "HAND",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 40,
            "itemtype": "property",
            "name": "MOVE",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 45,
            "itemtype": "property",
            "name": "TEXT",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 50,
            "itemtype": "property",
            "name": "WAIT",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 58,
            "description": "HALF_PI is a mathematical constant with the value\n1.57079632679489661923. It is half the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.",
            "itemtype": "property",
            "name": "HALF_PI",
            "type": "Number",
            "final": 1,
            "example": [
                "\n<div><code>\narc(50, 50, 80, 80, 0, HALF_PI);\n</code></div>"
            ],
            "alt": "80x80 white quarter-circle with curve toward bottom right of canvas.",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 77,
            "description": "PI is a mathematical constant with the value\n3.14159265358979323846. It is the ratio of the circumference\nof a circle to its diameter. It is useful in combination with\nthe trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.",
            "itemtype": "property",
            "name": "PI",
            "type": "Number",
            "final": 1,
            "example": [
                "\n<div><code>\narc(50, 50, 80, 80, 0, PI);\n</code></div>"
            ],
            "alt": "white half-circle with curve toward bottom of canvas.",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 96,
            "description": "QUARTER_PI is a mathematical constant with the value 0.7853982.\nIt is one quarter the ratio of the circumference of a circle to\nits diameter. It is useful in combination with the trigonometric\nfunctions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.",
            "itemtype": "property",
            "name": "QUARTER_PI",
            "type": "Number",
            "final": 1,
            "example": [
                "\n<div><code>\narc(50, 50, 80, 80, 0, QUARTER_PI);\n</code></div>"
            ],
            "alt": "white eighth-circle rotated about 40 degrees with curve bottom right canvas.",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 115,
            "description": "TAU is an alias for TWO_PI, a mathematical constant with the\nvalue 6.28318530717958647693. It is twice the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.",
            "itemtype": "property",
            "name": "TAU",
            "type": "Number",
            "final": 1,
            "example": [
                "\n<div><code>\narc(50, 50, 80, 80, 0, TAU);\n</code></div>"
            ],
            "alt": "80x80 white ellipse shape in center of canvas.",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 134,
            "description": "TWO_PI is a mathematical constant with the value\n6.28318530717958647693. It is twice the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions <a href=\"#/p5/sin\">sin()</a> and <a href=\"#/p5/cos\">cos()</a>.",
            "itemtype": "property",
            "name": "TWO_PI",
            "type": "Number",
            "final": 1,
            "example": [
                "\n<div><code>\narc(50, 50, 80, 80, 0, TWO_PI);\n</code></div>"
            ],
            "alt": "80x80 white ellipse shape in center of canvas.",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 153,
            "description": "Constant to be used with <a href=\"#/p5/angleMode\">angleMode()</a> function, to set the mode which\np5.js interprates and calculates angles (either DEGREES or RADIANS).",
            "itemtype": "property",
            "name": "DEGREES",
            "type": "String",
            "final": 1,
            "example": [
                "\n<div class='norender'><code>\nfunction setup() {\n  angleMode(DEGREES);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 167,
            "description": "Constant to be used with <a href=\"#/p5/angleMode\">angleMode()</a> function, to set the mode which\np5.js interprates and calculates angles (either RADIANS or DEGREES).",
            "itemtype": "property",
            "name": "RADIANS",
            "type": "String",
            "final": 1,
            "example": [
                "\n<div class='norender'><code>\nfunction setup() {\n  angleMode(RADIANS);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 185,
            "itemtype": "property",
            "name": "CORNER",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 190,
            "itemtype": "property",
            "name": "CORNERS",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 195,
            "itemtype": "property",
            "name": "RADIUS",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 200,
            "itemtype": "property",
            "name": "RIGHT",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 205,
            "itemtype": "property",
            "name": "LEFT",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 210,
            "itemtype": "property",
            "name": "CENTER",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 215,
            "itemtype": "property",
            "name": "TOP",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 220,
            "itemtype": "property",
            "name": "BOTTOM",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 225,
            "itemtype": "property",
            "name": "BASELINE",
            "type": "String",
            "final": 1,
            "default": "alphabetic",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 231,
            "itemtype": "property",
            "name": "POINTS",
            "type": "Number",
            "final": 1,
            "default": "0x0000",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 237,
            "itemtype": "property",
            "name": "LINES",
            "type": "Number",
            "final": 1,
            "default": "0x0001",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 243,
            "itemtype": "property",
            "name": "LINE_STRIP",
            "type": "Number",
            "final": 1,
            "default": "0x0003",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 249,
            "itemtype": "property",
            "name": "LINE_LOOP",
            "type": "Number",
            "final": 1,
            "default": "0x0002",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 255,
            "itemtype": "property",
            "name": "TRIANGLES",
            "type": "Number",
            "final": 1,
            "default": "0x0004",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 261,
            "itemtype": "property",
            "name": "TRIANGLE_FAN",
            "type": "Number",
            "final": 1,
            "default": "0x0006",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 267,
            "itemtype": "property",
            "name": "TRIANGLE_STRIP",
            "type": "Number",
            "final": 1,
            "default": "0x0005",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 273,
            "itemtype": "property",
            "name": "QUADS",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 278,
            "itemtype": "property",
            "name": "QUAD_STRIP",
            "type": "String",
            "final": 1,
            "default": "quad_strip",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 284,
            "itemtype": "property",
            "name": "CLOSE",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 289,
            "itemtype": "property",
            "name": "OPEN",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 294,
            "itemtype": "property",
            "name": "CHORD",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 299,
            "itemtype": "property",
            "name": "PIE",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 304,
            "itemtype": "property",
            "name": "PROJECT",
            "type": "String",
            "final": 1,
            "default": "square",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 310,
            "itemtype": "property",
            "name": "SQUARE",
            "type": "String",
            "final": 1,
            "default": "butt",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 316,
            "itemtype": "property",
            "name": "ROUND",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 321,
            "itemtype": "property",
            "name": "BEVEL",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 326,
            "itemtype": "property",
            "name": "MITER",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 333,
            "itemtype": "property",
            "name": "RGB",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 338,
            "itemtype": "property",
            "name": "HSB",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 343,
            "itemtype": "property",
            "name": "HSL",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 350,
            "itemtype": "property",
            "name": "AUTO",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 373,
            "itemtype": "property",
            "name": "BLEND",
            "type": "String",
            "final": 1,
            "default": "source-over",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 379,
            "itemtype": "property",
            "name": "ADD",
            "type": "String",
            "final": 1,
            "default": "lighter",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 387,
            "itemtype": "property",
            "name": "DARKEST",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 392,
            "itemtype": "property",
            "name": "LIGHTEST",
            "type": "String",
            "final": 1,
            "default": "lighten",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 398,
            "itemtype": "property",
            "name": "DIFFERENCE",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 403,
            "itemtype": "property",
            "name": "EXCLUSION",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 408,
            "itemtype": "property",
            "name": "MULTIPLY",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 413,
            "itemtype": "property",
            "name": "SCREEN",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 418,
            "itemtype": "property",
            "name": "REPLACE",
            "type": "String",
            "final": 1,
            "default": "copy",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 424,
            "itemtype": "property",
            "name": "OVERLAY",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 429,
            "itemtype": "property",
            "name": "HARD_LIGHT",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 434,
            "itemtype": "property",
            "name": "SOFT_LIGHT",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 439,
            "itemtype": "property",
            "name": "DODGE",
            "type": "String",
            "final": 1,
            "default": "color-dodge",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 445,
            "itemtype": "property",
            "name": "BURN",
            "type": "String",
            "final": 1,
            "default": "color-burn",
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 453,
            "itemtype": "property",
            "name": "THRESHOLD",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 458,
            "itemtype": "property",
            "name": "GRAY",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 463,
            "itemtype": "property",
            "name": "OPAQUE",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 468,
            "itemtype": "property",
            "name": "INVERT",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 473,
            "itemtype": "property",
            "name": "POSTERIZE",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 478,
            "itemtype": "property",
            "name": "DILATE",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 483,
            "itemtype": "property",
            "name": "ERODE",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 488,
            "itemtype": "property",
            "name": "BLUR",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 495,
            "itemtype": "property",
            "name": "NORMAL",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 500,
            "itemtype": "property",
            "name": "ITALIC",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 505,
            "itemtype": "property",
            "name": "BOLD",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 536,
            "itemtype": "property",
            "name": "LANDSCAPE",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 541,
            "itemtype": "property",
            "name": "PORTRAIT",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 551,
            "itemtype": "property",
            "name": "GRID",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/constants.js",
            "line": 557,
            "itemtype": "property",
            "name": "AXES",
            "type": "String",
            "final": 1,
            "class": "p5",
            "module": "Constants",
            "submodule": "Constants"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 22,
            "description": "The <a href=\"#/p5/print\">print()</a> function writes to the console area of your browser.\nThis function is often helpful for looking at the data a program is\nproducing. This function creates a new line of text for each call to\nthe function. Individual elements can be\nseparated with quotes (\"\") and joined with the addition operator (+).\n\nNote that calling print() without any arguments invokes the window.print()\nfunction which opens the browser's print dialog. To print a blank line\nto console you can write print('\\n').",
            "itemtype": "method",
            "name": "print",
            "params": [
                {
                    "name": "contents",
                    "description": "any combination of Number, String, Object, Boolean,\n                      Array to print",
                    "type": "Any"
                }
            ],
            "example": [
                "\n<div><code class='norender'>\nvar x = 10;\nprint('The value of x is ' + x);\n// prints \"The value of x is 10\"\n</code></div>"
            ],
            "alt": "default grey canvas",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 53,
            "description": "The system variable <a href=\"#/p5/frameCount\">frameCount</a> contains the number of frames that have\nbeen displayed since the program started. Inside <a href=\"#/p5/setup\">setup()</a> the value is 0,\nafter the first iteration of draw it is 1, etc.",
            "itemtype": "property",
            "name": "frameCount",
            "type": "Integer",
            "readonly": "",
            "example": [
                "\n  <div><code>\nfunction setup() {\n  frameRate(30);\n  textSize(30);\n  textAlign(CENTER);\n}\n\nfunction draw() {\n  background(200);\n  text(frameCount, width / 2, height / 2);\n}\n</code></div>"
            ],
            "alt": "numbers rapidly counting upward with frame count set to 30.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 80,
            "description": "Confirms if the window a p5.js program is in is \"focused,\" meaning that\nthe sketch will accept mouse or keyboard input. This variable is\n\"true\" if the window is focused and \"false\" if not.",
            "itemtype": "property",
            "name": "focused",
            "type": "Boolean",
            "readonly": "",
            "example": [
                "\n<div><code>\n// To demonstrate, put two windows side by side.\n// Click on the window that the p5 sketch isn't in!\nfunction draw() {\n  background(200);\n  noStroke();\n  fill(0, 200, 0);\n  ellipse(25, 25, 50, 50);\n\n  if (!focused) {\n   // or \"if (focused === false)\"\n    stroke(200, 0, 0);\n    line(0, 0, 100, 100);\n    line(100, 0, 0, 100);\n  }\n}\n</code></div>"
            ],
            "alt": "green 50x50 ellipse at top left. Red X covers canvas when page focus changes",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 112,
            "description": "Sets the cursor to a predefined symbol or an image, or makes it visible\nif already hidden. If you are trying to set an image as the cursor, the\nrecommended size is 16x16 or 32x32 pixels. The values for parameters x and y\nmust be less than the dimensions of the image.",
            "itemtype": "method",
            "name": "cursor",
            "params": [
                {
                    "name": "type",
                    "description": "either ARROW, CROSS, HAND, MOVE, TEXT, or\n                              WAIT, or path for image",
                    "type": "String|Constant"
                },
                {
                    "name": "x",
                    "description": "the horizontal active spot of the cursor",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "the vertical active spot of the cursor",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\n// Move the mouse left and right across the image\n// to see the cursor change from a cross to a hand\nfunction draw() {\n  line(width / 2, 0, width / 2, height);\n  if (mouseX < 50) {\n    cursor(CROSS);\n  } else {\n    cursor(HAND);\n  }\n}\n</code></div>"
            ],
            "alt": "horizontal line divides canvas. cursor on left is a cross, right is hand.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 171,
            "description": "Specifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within <a href=\"#/p5/setup\">setup()</a> is\nrecommended. The default frame rate is based on the frame rate of the display\n(here also called \"refresh rate\"), which is set to 60 frames per second on most\ncomputers. A frame rate of 24 frames per second (usual for movies) or above\nwill be enough for smooth animations\nThis is the same as setFrameRate(val).\n<br><br>\nCalling <a href=\"#/p5/frameRate\">frameRate()</a> with no arguments returns the current framerate. The\ndraw function must run at least once before it will return a value. This\nis the same as <a href=\"#/p5/getFrameRate\">getFrameRate()</a>.\n<br><br>\nCalling <a href=\"#/p5/frameRate\">frameRate()</a> with arguments that are not of the type numbers\nor are non positive also returns current framerate.",
            "itemtype": "method",
            "name": "frameRate",
            "params": [
                {
                    "name": "fps",
                    "description": "number of frames to be displayed every second",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n\n<div><code>\nvar rectX = 0;\nvar fr = 30; //starting FPS\nvar clr;\n\nfunction setup() {\n  background(200);\n  frameRate(fr); // Attempt to refresh at starting FPS\n  clr = color(255, 0, 0);\n}\n\nfunction draw() {\n  background(200);\n  rectX = rectX += 1; // Move Rectangle\n\n  if (rectX >= width) {\n   // If you go off screen.\n    if (fr === 30) {\n      clr = color(0, 0, 255);\n      fr = 10;\n      frameRate(fr); // make frameRate 10 FPS\n    } else {\n      clr = color(255, 0, 0);\n      fr = 30;\n      frameRate(fr); // make frameRate 30 FPS\n    }\n    rectX = 0;\n  }\n  fill(clr);\n  rect(rectX, 40, 20, 20);\n}\n</code></div>"
            ],
            "alt": "blue rect moves left to right, followed by red rect moving faster. Loops.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 232,
            "itemtype": "method",
            "name": "frameRate",
            "return": {
                "description": "current frameRate",
                "type": "Number"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 246,
            "description": "Returns the current framerate.",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "current frameRate",
                "type": "Number"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 256,
            "description": "Specifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within <a href=\"#/p5/setup\">setup()</a> is\nrecommended. The default rate is 60 frames per second.\n\nCalling <a href=\"#/p5/frameRate\">frameRate()</a> with no arguments returns the current framerate.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "fps",
                    "description": "number of frames to be displayed every second",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 272,
            "description": "Hides the cursor from view.",
            "itemtype": "method",
            "name": "noCursor",
            "example": [
                "\n<div><code>\nfunction setup() {\n  noCursor();\n}\n\nfunction draw() {\n  background(200);\n  ellipse(mouseX, mouseY, 10, 10);\n}\n</code></div>"
            ],
            "alt": "cursor becomes 10x 10 white ellipse the moves with mouse x and y.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 297,
            "description": "System variable that stores the width of the screen display according to The\ndefault <a href=\"#/p5/pixelDensity\">pixelDensity</a>. This is used to run a\nfull-screen program on any display size. To return actual screen size,\nmultiply this by pixelDensity.",
            "itemtype": "property",
            "name": "displayWidth",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class=\"norender\"><code>\ncreateCanvas(displayWidth, displayHeight);\n</code></div>"
            ],
            "alt": "cursor becomes 10x 10 white ellipse the moves with mouse x and y.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 316,
            "description": "System variable that stores the height of the screen display according to The\ndefault <a href=\"#/p5/pixelDensity\">pixelDensity</a>. This is used to run a\nfull-screen program on any display size. To return actual screen size,\nmultiply this by pixelDensity.",
            "itemtype": "property",
            "name": "displayHeight",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class=\"norender\"><code>\ncreateCanvas(displayWidth, displayHeight);\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 335,
            "description": "System variable that stores the width of the inner window, it maps to\nwindow.innerWidth.",
            "itemtype": "property",
            "name": "windowWidth",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class=\"norender\"><code>\ncreateCanvas(windowWidth, windowHeight);\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 351,
            "description": "System variable that stores the height of the inner window, it maps to\nwindow.innerHeight.",
            "itemtype": "property",
            "name": "windowHeight",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div class=\"norender\"><code>\ncreateCanvas(windowWidth, windowHeight);\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 367,
            "description": "The <a href=\"#/p5/windowResized\">windowResized()</a> function is called once every time the browser window\nis resized. This is a good place to resize the canvas or do any other\nadjustments to accommodate the new window size.",
            "itemtype": "method",
            "name": "windowResized",
            "example": [
                "\n<div class=\"norender\"><code>\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n}\n\nfunction draw() {\n  background(0, 100, 200);\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 421,
            "description": "System variable that stores the width of the drawing canvas. This value\nis set by the first parameter of the <a href=\"#/p5/createCanvas\">createCanvas()</a> function.\nFor example, the function call createCanvas(320, 240) sets the width\nvariable to the value 320. The value of width defaults to 100 if\n<a href=\"#/p5/createCanvas\">createCanvas()</a> is not used in a program.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 433,
            "description": "System variable that stores the height of the drawing canvas. This value\nis set by the second parameter of the <a href=\"#/p5/createCanvas\">createCanvas()</a> function. For\nexample, the function call createCanvas(320, 240) sets the height\nvariable to the value 240. The value of height defaults to 100 if\n<a href=\"#/p5/createCanvas\">createCanvas()</a> is not used in a program.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 445,
            "description": "If argument is given, sets the sketch to fullscreen or not based on the\nvalue of the argument. If no argument is given, returns the current\nfullscreen state. Note that due to browser restrictions this can only\nbe called on user input, for example, on mouse press like the example\nbelow.",
            "itemtype": "method",
            "name": "fullscreen",
            "params": [
                {
                    "name": "val",
                    "description": "whether the sketch should be in fullscreen mode\nor not",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "current fullscreen state",
                "type": "Boolean"
            },
            "example": [
                "\n<div>\n<code>\n// Clicking in the box toggles fullscreen on and off.\nfunction setup() {\n  background(200);\n}\nfunction mousePressed() {\n  if (mouseX > 0 && mouseX < 100 && mouseY > 0 && mouseY < 100) {\n    var fs = fullscreen();\n    fullscreen(!fs);\n  }\n}\n</code>\n</div>"
            ],
            "alt": "no display.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 496,
            "description": "Sets the pixel scaling for high pixel density displays. By default\npixel density is set to match display density, call pixelDensity(1)\nto turn this off. Calling <a href=\"#/p5/pixelDensity\">pixelDensity()</a> with no arguments returns\nthe current pixel density of the sketch.",
            "itemtype": "method",
            "name": "pixelDensity",
            "params": [
                {
                    "name": "val",
                    "description": "whether or how much the sketch should scale",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  pixelDensity(1);\n  createCanvas(100, 100);\n  background(200);\n  ellipse(width / 2, height / 2, 50, 50);\n}\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  pixelDensity(3.0);\n  createCanvas(100, 100);\n  background(200);\n  ellipse(width / 2, height / 2, 50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "fuzzy 50x50 white ellipse with black outline in center of canvas.\nsharp 50x50 white ellipse with black outline in center of canvas.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 531,
            "itemtype": "method",
            "name": "pixelDensity",
            "return": {
                "description": "current pixel density of the sketch",
                "type": "Number"
            },
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 551,
            "description": "Returns the pixel density of the current display the sketch is running on.",
            "itemtype": "method",
            "name": "displayDensity",
            "return": {
                "description": "current pixel density of the display",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  var density = displayDensity();\n  pixelDensity(density);\n  createCanvas(100, 100);\n  background(200);\n  ellipse(width / 2, height / 2, 50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 white ellipse with black outline in center of canvas.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 608,
            "description": "Gets the current URL.",
            "itemtype": "method",
            "name": "getURL",
            "return": {
                "description": "url",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nvar url;\nvar x = 100;\n\nfunction setup() {\n  fill(0);\n  noStroke();\n  url = getURL();\n}\n\nfunction draw() {\n  background(200);\n  text(url, x, height / 2);\n  x--;\n}\n</code>\n</div>"
            ],
            "alt": "current url (http://p5js.org/reference/#/p5/getURL) moves right to left.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 639,
            "description": "Gets the current URL path as an array.",
            "itemtype": "method",
            "name": "getURLPath",
            "return": {
                "description": "path components",
                "type": "String[]"
            },
            "example": [
                "\n<div class='norender'><code>\nfunction setup() {\n  var urlPath = getURLPath();\n  for (var i = 0; i < urlPath.length; i++) {\n    text(urlPath[i], 10, i * 20 + 20);\n  }\n}\n</code></div>"
            ],
            "alt": "no display",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/environment.js",
            "line": 662,
            "description": "Gets the current URL params as an Object.",
            "itemtype": "method",
            "name": "getURLParams",
            "return": {
                "description": "URL params",
                "type": "Object"
            },
            "example": [
                "\n<div class='norender notest'>\n<code>\n// Example: http://p5js.org?year=2014&month=May&day=15\n\nfunction setup() {\n  var params = getURLParams();\n  text(params.day, 10, 20);\n  text(params.month, 10, 40);\n  text(params.year, 10, 60);\n}\n</code>\n</div>"
            ],
            "alt": "no display.",
            "class": "p5",
            "module": "Environment",
            "submodule": "Environment"
        },
        {
            "file": "../p5.js/src/core/error_helpers.js",
            "line": 1,
            "requires": [
                "core"
            ],
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "../p5.js/src/core/error_helpers.js",
            "line": 65,
            "description": "Prints out a fancy, colorful message to the console log",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "message",
                    "description": "the words to be said",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "the name of the function to link",
                    "type": "String"
                },
                {
                    "name": "color",
                    "description": "CSS color string or error type",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "console logs"
            },
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "../p5.js/src/core/error_helpers.js",
            "line": 563,
            "description": "Validates parameters\nparam  {String}               func    the name of the function\nparam  {Array}                args    user input arguments\n\nexample:\n var a;\n ellipse(10,10,a,5);\nconsole ouput:\n \"It looks like ellipse received an empty variable in spot #2.\"\n\nexample:\n ellipse(10,\"foo\",5,5);\nconsole output:\n \"ellipse was expecting a number for parameter #1,\n          received \"foo\" instead.\"",
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "../p5.js/src/core/error_helpers.js",
            "line": 624,
            "description": "Prints out all the colors in the color pallete with white text.\nFor color blindness testing.",
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "../p5.js/src/core/helpers.js",
            "line": 1,
            "requires": [
                "constants"
            ],
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "../p5.js/src/core/init.js",
            "line": 5,
            "description": "_globalInit\n\nTODO: ???\nif sketch is on window\nassume \"global\" mode\nand instantiate p5 automatically\notherwise do nothing",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "../p5.js/src/core/legacy.js",
            "line": 1,
            "requires": [
                "core\nThese are functions that are part of the Processing API but are not part of\nthe p5.js API. In some cases they have a new name",
                "in others",
                "they are\nremoved completely. Not all unsupported Processing functions are listed here\nbut we try to include ones that a user coming from Processing might likely\ncall."
            ],
            "class": "p5",
            "module": "Environment"
        },
        {
            "file": "../p5.js/src/core/main.js",
            "line": 49,
            "description": "Called directly before <a href=\"#/p5/setup\">setup()</a>, the <a href=\"#/p5/preload\">preload()</a> function is used to handle\nasynchronous loading of external files in a blocking way. If a preload\nfunction is defined, <a href=\"#/p5/setup\">setup()</a> will wait until any load calls within have\nfinished. Nothing besides load calls (<a href=\"#/p5/loadImage\">loadImage</a>, <a href=\"#/p5/loadJSON\">loadJSON</a>, <a href=\"#/p5/loadFont\">loadFont</a>,\n<a href=\"#/p5/loadStrings\">loadStrings</a>, etc.) should be inside the preload function. If asynchronous\nloading is preferred, the load methods can instead be called in <a href=\"#/p5/setup\">setup()</a>\nor anywhere else with the use of a callback parameter.\n<br><br>\nBy default the text \"loading...\" will be displayed. To make your own\nloading page, include an HTML element with id \"p5_loading\" in your\npage. More information <a href=\"http://bit.ly/2kQ6Nio\">here</a>.",
            "itemtype": "method",
            "name": "preload",
            "example": [
                "\n<div><code>\nvar img;\nvar c;\nfunction preload() {\n  // preload() runs once\n  img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n  // setup() waits until preload() is done\n  img.loadPixels();\n  // get color of middle pixel\n  c = img.get(img.width / 2, img.height / 2);\n}\n\nfunction draw() {\n  background(c);\n  image(img, 25, 25, 50, 50);\n}\n</code></div>"
            ],
            "alt": "nothing displayed",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "../p5.js/src/core/main.js",
            "line": 90,
            "description": "The <a href=\"#/p5/setup\">setup()</a> function is called once when the program starts. It's used to\ndefine initial environment properties such as screen size and background\ncolor and to load media such as images and fonts as the program starts.\nThere can only be one <a href=\"#/p5/setup\">setup()</a> function for each program and it shouldn't\nbe called again after its initial execution.\n<br><br>\nNote: Variables declared within <a href=\"#/p5/setup\">setup()</a> are not accessible within other\nfunctions, including <a href=\"#/p5/draw\">draw()</a>.",
            "itemtype": "method",
            "name": "setup",
            "example": [
                "\n<div><code>\nvar a = 0;\n\nfunction setup() {\n  background(0);\n  noStroke();\n  fill(102);\n}\n\nfunction draw() {\n  rect(a++ % width, 10, 2, 80);\n}\n</code></div>"
            ],
            "alt": "nothing displayed",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "../p5.js/src/core/main.js",
            "line": 121,
            "description": "Called directly after <a href=\"#/p5/setup\">setup()</a>, the <a href=\"#/p5/draw\">draw()</a> function continuously executes\nthe lines of code contained inside its block until the program is stopped\nor <a href=\"#/p5/noLoop\">noLoop()</a> is called. Note if <a href=\"#/p5/noLoop\">noLoop()</a> is called in <a href=\"#/p5/setup\">setup()</a>, <a href=\"#/p5/draw\">draw()</a> will\nstill be executed once before stopping. <a href=\"#/p5/draw\">draw()</a> is called automatically and\nshould never be called explicitly.\n<br><br>\nIt should always be controlled with <a href=\"#/p5/noLoop\">noLoop()</a>, <a href=\"#/p5/redraw\">redraw()</a> and <a href=\"#/p5/loop\">loop()</a>. After\n<a href=\"#/p5/noLoop\">noLoop()</a> stops the code in <a href=\"#/p5/draw\">draw()</a> from executing, <a href=\"#/p5/redraw\">redraw()</a> causes the\ncode inside <a href=\"#/p5/draw\">draw()</a> to execute once, and <a href=\"#/p5/loop\">loop()</a> will cause the code\ninside <a href=\"#/p5/draw\">draw()</a> to resume executing continuously.\n<br><br>\nThe number of times <a href=\"#/p5/draw\">draw()</a> executes in each second may be controlled with\nthe <a href=\"#/p5/frameRate\">frameRate()</a> function.\n<br><br>\nThere can only be one <a href=\"#/p5/draw\">draw()</a> function for each sketch, and <a href=\"#/p5/draw\">draw()</a> must\nexist if you want the code to run continuously, or to process events such\nas <a href=\"#/p5/mousePressed\">mousePressed()</a>. Sometimes, you might have an empty call to <a href=\"#/p5/draw\">draw()</a> in\nyour program, as shown in the above example.\n<br><br>\nIt is important to note that the drawing coordinate system will be reset\nat the beginning of each <a href=\"#/p5/draw\">draw()</a> call. If any transformations are performed\nwithin <a href=\"#/p5/draw\">draw()</a> (ex: scale, rotate, translate), their effects will be\nundone at the beginning of <a href=\"#/p5/draw\">draw()</a>, so transformations will not accumulate\nover time. On the other hand, styling applied (ex: fill, stroke, etc) will\nremain in effect.",
            "itemtype": "method",
            "name": "draw",
            "example": [
                "\n<div><code>\nvar yPos = 0;\nfunction setup() {\n  // setup() runs once\n  frameRate(30);\n}\nfunction draw() {\n  // draw() loops forever, until stopped\n  background(204);\n  yPos = yPos - 1;\n  if (yPos < 0) {\n    yPos = height;\n  }\n  line(0, yPos, width, yPos);\n}\n</code></div>"
            ],
            "alt": "nothing displayed",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "../p5.js/src/core/main.js",
            "line": 408,
            "description": "Removes the entire p5 sketch. This will remove the canvas and any\nelements created by p5.js. It will also stop the draw loop and unbind\nany properties or methods from the window global scope. It will\nleave a variable p5 in case you wanted to create a new p5 sketch.\nIf you like, you can set p5 = null to erase it. While all functions and\nvariables and objects created by the p5 library will be removed, any\nother global variables created by your code will remain.",
            "itemtype": "method",
            "name": "remove",
            "example": [
                "\n<div class='norender'><code>\nfunction draw() {\n  ellipse(50, 50, 10, 10);\n}\n\nfunction mousePressed() {\n  remove(); // remove whole sketch on mouse press\n}\n</code></div>"
            ],
            "alt": "nothing displayed",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 26,
            "description": "Underlying HTML element. All normal HTML methods can be called on this.",
            "example": [
                "\n<div>\n<code>\ncreateCanvas(300, 500);\nbackground(0, 0, 0, 0);\nvar input = createInput();\ninput.position(20, 225);\nvar inputElem = new p5.Element(input.elt);\ninputElem.style('width:450px;');\ninputElem.value('some string');\n</code>\n</div>"
            ],
            "itemtype": "property",
            "name": "elt",
            "readonly": "",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 51,
            "description": "Attaches the element to the parent specified. A way of setting\n the container for the element. Accepts either a string ID, DOM\n node, or <a href=\"#/p5.Element\">p5.Element</a>. If no arguments given, parent node is returned.\n For more ways to position the canvas, see the\n <a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>\n positioning the canvas</a> wiki page.",
            "itemtype": "method",
            "name": "parent",
            "params": [
                {
                    "name": "parent",
                    "description": "the ID, DOM node, or <a href=\"#/p5.Element\">p5.Element</a>\n                         of desired parent element",
                    "type": "String|p5.Element|Object"
                }
            ],
            "chainable": 1,
            "example": [
                "\n <div class=\"norender notest\"><code>\n // in the html file:\n // &lt;div id=\"myContainer\">&lt;/div>\n// in the js file:\n var cnv = createCanvas(100, 100);\n cnv.parent('myContainer');\n </code></div>\n <div class='norender'><code>\n var div0 = createDiv('this is the parent');\n var div1 = createDiv('this is the child');\n div1.parent(div0); // use p5.Element\n </code></div>\n <div class='norender'><code>\n var div0 = createDiv('this is the parent');\n div0.id('apples');\n var div1 = createDiv('this is the child');\n div1.parent('apples'); // use id\n </code></div>\n <div class='norender notest'><code>\n var elt = document.getElementById('myParentDiv');\n var div1 = createDiv('this is the child');\n div1.parent(elt); // use element from page\n </code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 94,
            "itemtype": "method",
            "name": "parent",
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 116,
            "description": "Sets the ID of the element. If no ID argument is passed in, it instead\n returns the current ID of the element.",
            "itemtype": "method",
            "name": "id",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the element",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n <div class='norender'><code>\n function setup() {\n   var cnv = createCanvas(100, 100);\n   // Assigns a CSS selector ID to\n   // the canvas element.\n   cnv.id('mycanvas');\n }\n </code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 138,
            "itemtype": "method",
            "name": "id",
            "return": {
                "description": "the id of the element",
                "type": "String"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 153,
            "description": "Adds given class to the element. If no class argument is passed in, it\n instead returns a string containing the current class(es) of the element.",
            "itemtype": "method",
            "name": "class",
            "params": [
                {
                    "name": "class",
                    "description": "class to add",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "example": [
                "\n <div class='norender'><code>\n function setup() {\n   var cnv = createCanvas(100, 100);\n   // Assigns a CSS selector class 'small'\n   // to the canvas element.\n   cnv.class('small');\n }\n </code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 175,
            "itemtype": "method",
            "name": "class",
            "return": {
                "description": "the class of the element",
                "type": "String"
            },
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 188,
            "description": "The .<a href=\"#/p5.Element/mousePressed\">mousePressed()</a> function is called once after every time a\nmouse button is pressed over the element.\nSome mobile browsers may also trigger this event on a touch screen,\nif the user performs a quick tap.\nThis can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "mousePressed",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                               pressed over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nvar cnv;\nvar d;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mousePressed(changeGray); // attach listener for\n  // canvas click only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires with any click anywhere\nfunction mousePressed() {\n  d = d + 10;\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 249,
            "description": "The .<a href=\"#/p5.Element/doubleClicked\">doubleClicked()</a> function is called once after every time a\nmouse button is pressed twice over the element. This can be used to\nattach element and action specific event listeners.",
            "itemtype": "method",
            "name": "doubleClicked",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                               double clicked over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Element"
            },
            "example": [
                "\n<div class='norender'><code>\nvar cnv;\nvar d;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.doubleClicked(changeGray); // attach listener for\n  // canvas double click only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires with any double click anywhere\nfunction doubleClicked() {\n  d = d + 10;\n}\n\n// this function fires only when cnv is double clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 298,
            "description": "The .<a href=\"#/p5.Element/mouseWheel\">mouseWheel()</a> function is called once after every time a\nmouse wheel is scrolled over the element. This can be used to\nattach element specific event listeners.\n<br><br>\nThe function accepts a callback function as argument which will be executed\nwhen the `wheel` event is triggered on the element, the callback function is\npassed one argument `event`. The `event.deltaY` property returns negative\nvalues if the mouse wheel is rotated up or away from the user and positive\nin the other direction. The `event.deltaX` does the same as `event.deltaY`\nexcept it reads the horizontal wheel scroll of the mouse wheel.\n<br><br>\nOn OS X with \"natural\" scrolling enabled, the `event.deltaY` values are\nreversed.",
            "itemtype": "method",
            "name": "mouseWheel",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                               scrolled over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nvar cnv;\nvar d;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mouseWheel(changeSize); // attach listener for\n  // activity on canvas only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires with mousewheel movement\n// anywhere on screen\nfunction mouseWheel() {\n  g = g + 10;\n}\n\n// this function fires with mousewheel movement\n// over canvas only\nfunction changeSize(event) {\n  if (event.deltaY > 0) {\n    d = d + 10;\n  } else {\n    d = d - 10;\n  }\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 364,
            "description": "The .<a href=\"#/p5.Element/mouseReleased\">mouseReleased()</a> function is called once after every time a\nmouse button is released over the element.\nSome mobile browsers may also trigger this event on a touch screen,\nif the user performs a quick tap.\nThis can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "mouseReleased",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                               released over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nvar cnv;\nvar d;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mouseReleased(changeGray); // attach listener for\n  // activity on canvas only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires after the mouse has been\n// released\nfunction mouseReleased() {\n  d = d + 10;\n}\n\n// this function fires after the mouse has been\n// released while on canvas\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 418,
            "description": "The .<a href=\"#/p5.Element/mouseClicked\">mouseClicked()</a> function is called once after a mouse button is\npressed and released over the element.\nSome mobile browsers may also trigger this event on a touch screen,\nif the user performs a quick tap.\nThis can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "mouseClicked",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when mouse is\n                               clicked over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar cnv;\nvar d;\nvar g;\n\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mouseClicked(changeGray); // attach listener for\n  // activity on canvas only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires after the mouse has been\n// clicked anywhere\nfunction mouseClicked() {\n  d = d + 10;\n}\n\n// this function fires after the mouse has been\n// clicked on canvas\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code>\n</div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 474,
            "description": "The .<a href=\"#/p5.Element/mouseMoved\">mouseMoved()</a> function is called once every time a\nmouse moves over the element. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "mouseMoved",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a mouse moves\n                               over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nvar cnv;\nvar d = 30;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mouseMoved(changeSize); // attach listener for\n  // activity on canvas only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  fill(200);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires when mouse moves anywhere on\n// page\nfunction mouseMoved() {\n  g = g + 5;\n  if (g > 255) {\n    g = 0;\n  }\n}\n\n// this function fires when mouse moves over canvas\nfunction changeSize() {\n  d = d + 2;\n  if (d > 100) {\n    d = 0;\n  }\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 532,
            "description": "The .<a href=\"#/p5.Element/mouseOver\">mouseOver()</a> function is called once after every time a\nmouse moves onto the element. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "mouseOver",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a mouse moves\n                               onto the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nvar cnv;\nvar d;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mouseOver(changeGray);\n  d = 10;\n}\n\nfunction draw() {\n  ellipse(width / 2, height / 2, d, d);\n}\n\nfunction changeGray() {\n  d = d + 10;\n  if (d > 100) {\n    d = 0;\n  }\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 575,
            "description": "The .<a href=\"#/p5.Element/changed\">changed()</a> function is called when the value of an\nelement changes.\nThis can be used to attach an element specific event listener.",
            "itemtype": "method",
            "name": "changed",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when the value of\n                               an element changes.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div><code>\nvar sel;\n\nfunction setup() {\n  textAlign(CENTER);\n  background(200);\n  sel = createSelect();\n  sel.position(10, 10);\n  sel.option('pear');\n  sel.option('kiwi');\n  sel.option('grape');\n  sel.changed(mySelectEvent);\n}\n\nfunction mySelectEvent() {\n  var item = sel.value();\n  background(200);\n  text(\"it's a \" + item + '!', 50, 50);\n}\n</code></div>\n<div><code>\nvar checkbox;\nvar cnv;\n\nfunction setup() {\n  checkbox = createCheckbox(' fill');\n  checkbox.changed(changeFill);\n  cnv = createCanvas(100, 100);\n  cnv.position(0, 30);\n  noFill();\n}\n\nfunction draw() {\n  background(200);\n  ellipse(50, 50, 50, 50);\n}\n\nfunction changeFill() {\n  if (checkbox.checked()) {\n    fill(0);\n  } else {\n    noFill();\n  }\n}\n</code></div>"
            ],
            "alt": "dropdown: pear, kiwi, grape. When selected text \"its a\" + selection shown.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 642,
            "description": "The .<a href=\"#/p5.Element/input\">input()</a> function is called when any user input is\ndetected with an element. The input event is often used\nto detect keystrokes in a input element, or changes on a\nslider element. This can be used to attach an element specific\nevent listener.",
            "itemtype": "method",
            "name": "input",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when any user input is\n                               detected within the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\n// Open your console to see the output\nfunction setup() {\n  var inp = createInput('');\n  inp.input(myInputEvent);\n}\n\nfunction myInputEvent() {\n  console.log('you are typing: ', this.value());\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 677,
            "description": "The .<a href=\"#/p5.Element/mouseOut\">mouseOut()</a> function is called once after every time a\nmouse moves off the element. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "mouseOut",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a mouse\n                               moves off of an element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nvar cnv;\nvar d;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mouseOut(changeGray);\n  d = 10;\n}\n\nfunction draw() {\n  ellipse(width / 2, height / 2, d, d);\n}\n\nfunction changeGray() {\n  d = d + 10;\n  if (d > 100) {\n    d = 0;\n  }\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 719,
            "description": "The .<a href=\"#/p5.Element/touchStarted\">touchStarted()</a> function is called once after every time a touch is\nregistered. This can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "touchStarted",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a touch\n                               starts over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nvar cnv;\nvar d;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.touchStarted(changeGray); // attach listener for\n  // canvas click only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires with any touch anywhere\nfunction touchStarted() {\n  d = d + 10;\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 767,
            "description": "The .<a href=\"#/p5.Element/touchMoved\">touchMoved()</a> function is called once after every time a touch move is\nregistered. This can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "touchMoved",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a touch moves over\n                               the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nvar cnv;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.touchMoved(changeGray); // attach listener for\n  // canvas click only\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 807,
            "description": "The .<a href=\"#/p5.Element/touchEnded\">touchEnded()</a> function is called once after every time a touch is\nregistered. This can be used to attach element specific event listeners.",
            "itemtype": "method",
            "name": "touchEnded",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a touch ends\n                               over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class='norender'><code>\nvar cnv;\nvar d;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.touchEnded(changeGray); // attach listener for\n  // canvas click only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width / 2, height / 2, d, d);\n}\n\n// this function fires with any touch anywhere\nfunction touchEnded() {\n  d = d + 10;\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>"
            ],
            "alt": "no display.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 856,
            "description": "The .<a href=\"#/p5.Element/dragOver\">dragOver()</a> function is called once after every time a\nfile is dragged over the element. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "dragOver",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a file is\n                               dragged over the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div><code>\n// To test this sketch, simply drag a\n// file over the canvas\nfunction setup() {\n  var c = createCanvas(100, 100);\n  background(200);\n  textAlign(CENTER);\n  text('Drag file', width / 2, height / 2);\n  c.dragOver(dragOverCallback);\n}\n\n// This function will be called whenever\n// a file is dragged over the canvas\nfunction dragOverCallback() {\n  background(240);\n  text('Dragged over', width / 2, height / 2);\n}\n</code></div>"
            ],
            "alt": "nothing displayed",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 894,
            "description": "The .dragLeave() function is called once after every time a\ndragged file leaves the element area. This can be used to attach an\nelement specific event listener.",
            "itemtype": "method",
            "name": "dragLeave",
            "params": [
                {
                    "name": "fxn",
                    "description": "function to be fired when a file is\n                               dragged off the element.\n                               if `false` is passed instead, the previously\n                               firing function will no longer fire.",
                    "type": "Function|Boolean"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div><code>\n// To test this sketch, simply drag a file\n// over and then out of the canvas area\nfunction setup() {\n  var c = createCanvas(100, 100);\n  background(200);\n  textAlign(CENTER);\n  text('Drag file', width / 2, height / 2);\n  c.dragLeave(dragLeaveCallback);\n}\n\n// This function will be called whenever\n// a file is dragged out of the canvas\nfunction dragLeaveCallback() {\n  background(240);\n  text('Dragged off', width / 2, height / 2);\n}\n</code></div>"
            ],
            "alt": "nothing displayed",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 932,
            "description": "Registers a callback that gets called every time a file that is\ndropped on the element has been loaded.\np5 will load every dropped file into memory and pass it as a p5.File object to the callback.\nMultiple files dropped at the same time will result in multiple calls to the callback.\n\nYou can optionally pass a second callback which will be registered to the raw\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/drop\">drop</a> event.\nThe callback will thus be provided the original\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DragEvent\">DragEvent</a>.\nDropping multiple files at the same time will trigger the second callback once per drop,\nwhereas the first callback will trigger for each loaded file.",
            "itemtype": "method",
            "name": "drop",
            "params": [
                {
                    "name": "callback",
                    "description": "callback to receive loaded file.",
                    "type": "Function"
                },
                {
                    "name": "fxn",
                    "description": "callback triggered when files are dropped.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div><code>\nfunction setup() {\n  var c = createCanvas(100, 100);\n  background(200);\n  textAlign(CENTER);\n  text('drop file', width / 2, height / 2);\n  c.drop(gotFile);\n}\n\nfunction gotFile(file) {\n  background(200);\n  text('received file:', width / 2, height / 2);\n  text(file.name, width / 2, height / 2 + 50);\n}\n</code></div>\n\n<div><code>\nvar img;\n\nfunction setup() {\n  var c = createCanvas(100, 100);\n  background(200);\n  textAlign(CENTER);\n  text('drop image', width / 2, height / 2);\n  c.drop(gotFile);\n}\n\nfunction draw() {\n  if (img) {\n    image(img, 0, 0, width, height);\n  }\n}\n\nfunction gotFile(file) {\n  img = createImg(file.data).hide();\n}\n</code></div>"
            ],
            "alt": "Canvas turns into whatever image is dragged/dropped onto it.",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Element.js",
            "line": 1094,
            "description": "Helper fxn for sharing pixel methods",
            "class": "p5.Element",
            "module": "DOM",
            "submodule": "DOM"
        },
        {
            "file": "../p5.js/src/core/p5.Graphics.js",
            "line": 65,
            "description": "Removes a Graphics object from the page and frees any resources\nassociated with it.",
            "itemtype": "method",
            "name": "remove",
            "example": [
                "\n<div class='norender'><code>\nvar bg;\nfunction setup() {\n  bg = createCanvas(100, 100);\n  bg.background(0);\n  image(bg, 0, 0);\n  bg.remove();\n}\n</code></div>\n\n<div><code>\nvar bg;\nfunction setup() {\n  pixelDensity(1);\n  createCanvas(100, 100);\n  stroke(255);\n  fill(0);\n\n  // create and draw the background image\n  bg = createGraphics(100, 100);\n  bg.background(200);\n  bg.ellipse(50, 50, 80, 80);\n}\nfunction draw() {\n  var t = millis() / 1000;\n  // draw the background\n  if (bg) {\n    image(bg, frameCount % 100, 0);\n    image(bg, frameCount % 100 - 100, 0);\n  }\n  // draw the foreground\n  var p = p5.Vector.fromAngle(t, 35).add(50, 50);\n  ellipse(p.x, p.y, 30);\n}\nfunction mouseClicked() {\n  // remove the background\n  if (bg) {\n    bg.remove();\n    bg = null;\n  }\n}\n</code></div>"
            ],
            "alt": "no image\na multi-colored circle moving back and forth over a scrolling background.",
            "class": "p5.Graphics",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/core/p5.Renderer.js",
            "line": 96,
            "description": "Resize our canvas element.",
            "class": "p5.Renderer",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/core/p5.Renderer.js",
            "line": 300,
            "description": "Helper fxn to check font type (system or otf)",
            "class": "p5.Renderer",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/core/p5.Renderer.js",
            "line": 353,
            "description": "Helper fxn to measure ascent and descent.\nAdapted from http://stackoverflow.com/a/25355178",
            "class": "p5.Renderer",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/core/p5.Renderer2D.js",
            "line": 9,
            "description": "p5.Renderer2D\nThe 2D graphics canvas renderer class.\nextends p5.Renderer",
            "class": "p5",
            "module": "Rendering"
        },
        {
            "file": "../p5.js/src/core/p5.Renderer2D.js",
            "line": 414,
            "description": "Generate a cubic Bezier representing an arc on the unit circle of total\nangle `size` radians, beginning `start` radians above the x-axis. Up to\nfour of these curves are combined to make a full arc.\n\nSee www.joecridge.me/bezier.pdf for an explanation of the method.",
            "class": "p5",
            "module": "Rendering"
        },
        {
            "file": "../p5.js/src/core/rendering.js",
            "line": 17,
            "description": "Creates a canvas element in the document, and sets the dimensions of it\nin pixels. This method should be called only once at the start of setup.\nCalling <a href=\"#/p5/createCanvas\">createCanvas</a> more than once in a sketch will result in very\nunpredictable behavior. If you want more than one drawing canvas\nyou could use <a href=\"#/p5/createGraphics\">createGraphics</a> (hidden by default but it can be shown).\n<br><br>\nThe system variables width and height are set by the parameters passed\nto this function. If <a href=\"#/p5/createCanvas\">createCanvas()</a> is not used, the window will be\ngiven a default size of 100x100 pixels.\n<br><br>\nFor more ways to position the canvas, see the\n<a href='https://github.com/processing/p5.js/wiki/Positioning-your-canvas'>\npositioning the canvas</a> wiki page.",
            "itemtype": "method",
            "name": "createCanvas",
            "params": [
                {
                    "name": "w",
                    "description": "width of the canvas",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the canvas",
                    "type": "Number"
                },
                {
                    "name": "renderer",
                    "description": "either P2D or WEBGL",
                    "type": "Constant",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Renderer"
            },
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 50);\n  background(153);\n  line(0, 0, width, height);\n}\n</code>\n</div>"
            ],
            "alt": "Black line extending from top-left of canvas to bottom right.",
            "class": "p5",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/core/rendering.js",
            "line": 119,
            "description": "Resizes the canvas to given width and height. The canvas will be cleared\nand draw will be called immediately, allowing the sketch to re-render itself\nin the resized canvas.",
            "itemtype": "method",
            "name": "resizeCanvas",
            "params": [
                {
                    "name": "w",
                    "description": "width of the canvas",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the canvas",
                    "type": "Number"
                },
                {
                    "name": "noRedraw",
                    "description": "don't redraw the canvas immediately",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n<div class=\"norender\"><code>\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n}\n\nfunction draw() {\n  background(0, 100, 200);\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n}\n</code></div>"
            ],
            "alt": "No image displayed.",
            "class": "p5",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/core/rendering.js",
            "line": 174,
            "description": "Removes the default canvas for a p5 sketch that doesn't\nrequire a canvas",
            "itemtype": "method",
            "name": "noCanvas",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  noCanvas();\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/core/rendering.js",
            "line": 197,
            "description": "Creates and returns a new p5.Renderer object. Use this class if you need\nto draw into an off-screen graphics buffer. The two parameters define the\nwidth and height in pixels.",
            "itemtype": "method",
            "name": "createGraphics",
            "params": [
                {
                    "name": "w",
                    "description": "width of the offscreen graphics buffer",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "height of the offscreen graphics buffer",
                    "type": "Number"
                },
                {
                    "name": "renderer",
                    "description": "either P2D or WEBGL\nundefined defaults to p2d",
                    "type": "Constant",
                    "optional": true
                }
            ],
            "return": {
                "description": "offscreen graphics buffer",
                "type": "p5.Graphics"
            },
            "example": [
                "\n<div>\n<code>\nvar pg;\nfunction setup() {\n  createCanvas(100, 100);\n  pg = createGraphics(100, 100);\n}\nfunction draw() {\n  background(200);\n  pg.background(100);\n  pg.noStroke();\n  pg.ellipse(pg.width / 2, pg.height / 2, 50, 50);\n  image(pg, 50, 50);\n  image(pg, 0, 0, 50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "4 grey squares alternating light and dark grey. White quarter circle mid-left.",
            "class": "p5",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/core/rendering.js",
            "line": 236,
            "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA\\*factor + B. This is the default blending mode.</li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A\\*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A\\*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.</li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values.</li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower.</li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh.\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks.</li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights.</li>\n</ul>",
            "itemtype": "method",
            "name": "blendMode",
            "params": [
                {
                    "name": "mode",
                    "description": "blend mode to set for canvas.\n               either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,\n               EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n               SOFT_LIGHT, DODGE, BURN, ADD or NORMAL",
                    "type": "Constant"
                }
            ],
            "example": [
                "\n<div>\n<code>\nblendMode(LIGHTEST);\nstrokeWeight(30);\nstroke(80, 150, 255);\nline(25, 25, 75, 75);\nstroke(255, 50, 50);\nline(75, 25, 25, 75);\n</code>\n</div>\n<div>\n<code>\nblendMode(MULTIPLY);\nstrokeWeight(30);\nstroke(80, 150, 255);\nline(25, 25, 75, 75);\nstroke(255, 50, 50);\nline(75, 25, 25, 75);\n</code>\n</div>"
            ],
            "alt": "translucent image thick red & blue diagonal rounded lines intersecting center\nThick red & blue diagonal rounded lines intersecting center. dark at overlap",
            "class": "p5",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/core/shim.js",
            "line": 23,
            "description": "shim for Uint8ClampedArray.slice\n(allows arrayCopy to work with pixels[])\nwith thanks to http://halfpapstudios.com/blog/tag/html5-canvas/\nEnumerable set to false to protect for...in from\nUint8ClampedArray.prototype pollution.",
            "class": "p5",
            "module": "Rendering"
        },
        {
            "file": "../p5.js/src/core/shim.js",
            "line": 45,
            "description": "this is implementation of Object.assign() which is unavailable in\nIE11 and (non-Chrome) Android browsers.\nThe assign() method is used to copy the values of all enumerable\nown properties from one or more source objects to a target object.\nIt will return the target object.\nModified from https://github.com/ljharb/object.assign",
            "class": "p5",
            "module": "Rendering"
        },
        {
            "file": "../p5.js/src/core/structure.js",
            "line": 12,
            "description": "Stops p5.js from continuously executing the code within <a href=\"#/p5/draw\">draw()</a>.\nIf <a href=\"#/p5/loop\">loop()</a> is called, the code in <a href=\"#/p5/draw\">draw()</a> begins to run continuously again.\nIf using <a href=\"#/p5/noLoop\">noLoop()</a> in <a href=\"#/p5/setup\">setup()</a>, it should be the last line inside the block.\n<br><br>\nWhen <a href=\"#/p5/noLoop\">noLoop()</a> is used, it's not possible to manipulate or access the\nscreen inside event handling functions such as <a href=\"#/p5/mousePressed\">mousePressed()</a> or\n<a href=\"#/p5/keyPressed\">keyPressed()</a>. Instead, use those functions to call <a href=\"#/p5/redraw\">redraw()</a> or <a href=\"#/p5/loop\">loop()</a>,\nwhich will run <a href=\"#/p5/draw\">draw()</a>, which can update the screen properly. This means\nthat when <a href=\"#/p5/noLoop\">noLoop()</a> has been called, no drawing can happen, and functions\nlike <a href=\"#/p5/saveFrame\">saveFrame()</a> or <a href=\"#/p5/loadPixels\">loadPixels()</a> may not be used.\n<br><br>\nNote that if the sketch is resized, <a href=\"#/p5/redraw\">redraw()</a> will be called to update\nthe sketch, even after <a href=\"#/p5/noLoop\">noLoop()</a> has been specified. Otherwise, the sketch\nwould enter an odd state until <a href=\"#/p5/loop\">loop()</a> was called.",
            "itemtype": "method",
            "name": "noLoop",
            "example": [
                "\n<div><code>\nfunction setup() {\n  createCanvas(100, 100);\n  background(200);\n  noLoop();\n}\n\nfunction draw() {\n  line(10, 10, 90, 90);\n}\n</code></div>\n\n<div><code>\nvar x = 0;\nfunction setup() {\n  createCanvas(100, 100);\n}\n\nfunction draw() {\n  background(204);\n  x = x + 0.1;\n  if (x > width) {\n    x = 0;\n  }\n  line(x, 0, x, height);\n}\n\nfunction mousePressed() {\n  noLoop();\n}\n\nfunction mouseReleased() {\n  loop();\n}\n</code></div>"
            ],
            "alt": "113 pixel long line extending from top-left to bottom right of canvas.\nhorizontal line moves slowly from left. Loops but stops on mouse press.",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "../p5.js/src/core/structure.js",
            "line": 74,
            "description": "By default, p5.js loops through draw() continuously, executing the code\nwithin it. However, the <a href=\"#/p5/draw\">draw()</a> loop may be stopped by calling <a href=\"#/p5/noLoop\">noLoop()</a>.\nIn that case, the <a href=\"#/p5/draw\">draw()</a> loop can be resumed with loop().",
            "itemtype": "method",
            "name": "loop",
            "example": [
                "\n<div><code>\nvar x = 0;\nfunction setup() {\n  createCanvas(100, 100);\n  noLoop();\n}\n\nfunction draw() {\n  background(204);\n  x = x + 0.1;\n  if (x > width) {\n    x = 0;\n  }\n  line(x, 0, x, height);\n}\n\nfunction mousePressed() {\n  loop();\n}\n\nfunction mouseReleased() {\n  noLoop();\n}\n</code></div>"
            ],
            "alt": "horizontal line moves slowly from left. Loops but stops on mouse press.",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "../p5.js/src/core/structure.js",
            "line": 116,
            "description": "The <a href=\"#/p5/push\">push()</a> function saves the current drawing style settings and\ntransformations, while <a href=\"#/p5/pop\">pop()</a> restores these settings. Note that these\nfunctions are always used together. They allow you to change the style\nand transformation settings and later return to what you had. When a new\nstate is started with <a href=\"#/p5/push\">push()</a>, it builds on the current style and transform\ninformation. The <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions can be embedded to provide\nmore control. (See the second example for a demonstration.)\n<br><br>\n<a href=\"#/p5/push\">push()</a> stores information related to the current transformation state\nand style settings controlled by the following functions: <a href=\"#/p5/fill\">fill()</a>,\n<a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/tint\">tint()</a>, <a href=\"#/p5/strokeWeight\">strokeWeight()</a>, <a href=\"#/p5/strokeCap\">strokeCap()</a>, <a href=\"#/p5/strokeJoin\">strokeJoin()</a>,\n<a href=\"#/p5/imageMode\">imageMode()</a>, <a href=\"#/p5/rectMode\">rectMode()</a>, <a href=\"#/p5/ellipseMode\">ellipseMode()</a>, <a href=\"#/p5/colorMode\">colorMode()</a>, <a href=\"#/p5/textAlign\">textAlign()</a>,\n<a href=\"#/p5/textFont\">textFont()</a>, <a href=\"#/p5/textMode\">textMode()</a>, <a href=\"#/p5/textSize\">textSize()</a>, <a href=\"#/p5/textLeading\">textLeading()</a>.",
            "itemtype": "method",
            "name": "push",
            "example": [
                "\n<div>\n<code>\nellipse(0, 50, 33, 33); // Left circle\n\npush(); // Start a new drawing state\nstrokeWeight(10);\nfill(204, 153, 0);\ntranslate(50, 0);\nellipse(0, 50, 33, 33); // Middle circle\npop(); // Restore original state\n\nellipse(100, 50, 33, 33); // Right circle\n</code>\n</div>\n<div>\n<code>\nellipse(0, 50, 33, 33); // Left circle\n\npush(); // Start a new drawing state\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(33, 50, 33, 33); // Left-middle circle\n\npush(); // Start another new drawing state\nstroke(0, 102, 153);\nellipse(66, 50, 33, 33); // Right-middle circle\npop(); // Restore previous state\n\npop(); // Restore original state\n\nellipse(100, 50, 33, 33); // Right circle\n</code>\n</div>"
            ],
            "alt": "Gold ellipse + thick black outline @center 2 white ellipses on left and right.\n2 Gold ellipses left black right blue stroke. 2 white ellipses on left+right.",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "../p5.js/src/core/structure.js",
            "line": 181,
            "description": "The <a href=\"#/p5/push\">push()</a> function saves the current drawing style settings and\ntransformations, while <a href=\"#/p5/pop\">pop()</a> restores these settings. Note that these\nfunctions are always used together. They allow you to change the style\nand transformation settings and later return to what you had. When a new\nstate is started with <a href=\"#/p5/push\">push()</a>, it builds on the current style and transform\ninformation. The <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions can be embedded to provide\nmore control. (See the second example for a demonstration.)\n<br><br>\n<a href=\"#/p5/push\">push()</a> stores information related to the current transformation state\nand style settings controlled by the following functions: <a href=\"#/p5/fill\">fill()</a>,\n<a href=\"#/p5/stroke\">stroke()</a>, <a href=\"#/p5/tint\">tint()</a>, <a href=\"#/p5/strokeWeight\">strokeWeight()</a>, <a href=\"#/p5/strokeCap\">strokeCap()</a>, <a href=\"#/p5/strokeJoin\">strokeJoin()</a>,\n<a href=\"#/p5/imageMode\">imageMode()</a>, <a href=\"#/p5/rectMode\">rectMode()</a>, <a href=\"#/p5/ellipseMode\">ellipseMode()</a>, <a href=\"#/p5/colorMode\">colorMode()</a>, <a href=\"#/p5/textAlign\">textAlign()</a>,\n<a href=\"#/p5/textFont\">textFont()</a>, <a href=\"#/p5/textMode\">textMode()</a>, <a href=\"#/p5/textSize\">textSize()</a>, <a href=\"#/p5/textLeading\">textLeading()</a>.",
            "itemtype": "method",
            "name": "pop",
            "example": [
                "\n<div>\n<code>\nellipse(0, 50, 33, 33); // Left circle\n\npush(); // Start a new drawing state\ntranslate(50, 0);\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(0, 50, 33, 33); // Middle circle\npop(); // Restore original state\n\nellipse(100, 50, 33, 33); // Right circle\n</code>\n</div>\n<div>\n<code>\nellipse(0, 50, 33, 33); // Left circle\n\npush(); // Start a new drawing state\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(33, 50, 33, 33); // Left-middle circle\n\npush(); // Start another new drawing state\nstroke(0, 102, 153);\nellipse(66, 50, 33, 33); // Right-middle circle\npop(); // Restore previous state\n\npop(); // Restore original state\n\nellipse(100, 50, 33, 33); // Right circle\n</code>\n</div>"
            ],
            "alt": "Gold ellipse + thick black outline @center 2 white ellipses on left and right.\n2 Gold ellipses left black right blue stroke. 2 white ellipses on left+right.",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "../p5.js/src/core/structure.js",
            "line": 247,
            "description": "Executes the code within <a href=\"#/p5/draw\">draw()</a> one time. This functions allows the\n program to update the display window only when necessary, for example\n when an event registered by <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/keyPressed\">keyPressed()</a> occurs.\n <br><br>\n In structuring a program, it only makes sense to call <a href=\"#/p5/redraw\">redraw()</a> within\n events such as <a href=\"#/p5/mousePressed\">mousePressed()</a>. This is because <a href=\"#/p5/redraw\">redraw()</a> does not run\n <a href=\"#/p5/draw\">draw()</a> immediately (it only sets a flag that indicates an update is\n needed).\n <br><br>\n The <a href=\"#/p5/redraw\">redraw()</a> function does not work properly when called inside <a href=\"#/p5/draw\">draw()</a>.\n To enable/disable animations, use <a href=\"#/p5/loop\">loop()</a> and <a href=\"#/p5/noLoop\">noLoop()</a>.\n <br><br>\n In addition you can set the number of redraws per method call. Just\n add an integer as single parameter for the number of redraws.",
            "itemtype": "method",
            "name": "redraw",
            "params": [
                {
                    "name": "n",
                    "description": "Redraw for n-times. The default value is 1.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "example": [
                "\n <div><code>\n var x = 0;\nfunction setup() {\n   createCanvas(100, 100);\n   noLoop();\n }\nfunction draw() {\n   background(204);\n   line(x, 0, x, height);\n }\nfunction mousePressed() {\n   x += 1;\n   redraw();\n }\n </code></div>\n<div class='norender'><code>\n var x = 0;\nfunction setup() {\n   createCanvas(100, 100);\n   noLoop();\n }\nfunction draw() {\n   background(204);\n   x += 1;\n   line(x, 0, x, height);\n }\nfunction mousePressed() {\n   redraw(5);\n }\n </code></div>"
            ],
            "alt": "black line on far left of canvas\n black line on far left of canvas",
            "class": "p5",
            "module": "Structure",
            "submodule": "Structure"
        },
        {
            "file": "../p5.js/src/core/transform.js",
            "line": 13,
            "description": "Multiplies the current matrix by the one specified through the parameters.\nThis is a powerful operation that can perform the equivalent of translate,\nscale, shear and rotate all at once. You can learn more about transformation\nmatrices on <a href=\"https://en.wikipedia.org/wiki/Transformation_matrix\">\nWikipedia</a>.\n\nThe naming of the arguments here follows the naming of the <a href=\n\"https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-transform\">\nWHATWG specification</a> and corresponds to a\ntransformation matrix of the\nform:\n\n> <img style=\"max-width: 150px\" src=\"assets/transformation-matrix.png\"\nalt=\"The transformation matrix used when applyMatrix is called\"/>",
            "itemtype": "method",
            "name": "applyMatrix",
            "params": [
                {
                    "name": "a",
                    "description": "numbers which define the 2x3 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "numbers which define the 2x3 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "numbers which define the 2x3 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "d",
                    "description": "numbers which define the 2x3 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "numbers which define the 2x3 matrix to be multiplied",
                    "type": "Number"
                },
                {
                    "name": "f",
                    "description": "numbers which define the 2x3 matrix to be multiplied",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  frameRate(10);\n  rectMode(CENTER);\n}\n\nfunction draw() {\n  var step = frameCount % 20;\n  background(200);\n  // Equivalent to translate(x, y);\n  applyMatrix(1, 0, 0, 1, 40 + step, 50);\n  rect(0, 0, 50, 50);\n}\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  frameRate(10);\n  rectMode(CENTER);\n}\n\nfunction draw() {\n  var step = frameCount % 20;\n  background(200);\n  translate(50, 50);\n  // Equivalent to scale(x, y);\n  applyMatrix(1 / step, 0, 0, 1 / step, 0, 0);\n  rect(0, 0, 50, 50);\n}\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  frameRate(10);\n  rectMode(CENTER);\n}\n\nfunction draw() {\n  var step = frameCount % 20;\n  var angle = map(step, 0, 20, 0, TWO_PI);\n  var cos_a = cos(angle);\n  var sin_a = sin(angle);\n  background(200);\n  translate(50, 50);\n  // Equivalent to rotate(angle);\n  applyMatrix(cos_a, sin_a, -sin_a, cos_a, 0, 0);\n  rect(0, 0, 50, 50);\n}\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  frameRate(10);\n  rectMode(CENTER);\n}\n\nfunction draw() {\n  var step = frameCount % 20;\n  var angle = map(step, 0, 20, -PI / 4, PI / 4);\n  background(200);\n  translate(50, 50);\n  // equivalent to shearX(angle);\n  var shear_factor = 1 / tan(PI / 2 - angle);\n  applyMatrix(1, 0, shear_factor, 1, 0, 0);\n  rect(0, 0, 50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "A rectangle translating to the right\nA rectangle shrinking to the center\nA rectangle rotating clockwise about the center\nA rectangle shearing",
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "../p5.js/src/core/transform.js",
            "line": 135,
            "description": "Replaces the current matrix with the identity matrix.",
            "itemtype": "method",
            "name": "resetMatrix",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntranslate(50, 50);\napplyMatrix(0.5, 0.5, -0.5, 0.5, 0, 0);\nrect(0, 0, 20, 20);\n// Note that the translate is also reset.\nresetMatrix();\nrect(0, 0, 20, 20);\n</code>\n</div>"
            ],
            "alt": "A rotated retangle in the center with another at the top left corner",
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "../p5.js/src/core/transform.js",
            "line": 161,
            "description": "Rotates a shape the amount specified by the angle parameter. This\nfunction accounts for <a href=\"#/p5/angleMode\">angleMode</a>, so angles can be entered in either\nRADIANS or DEGREES.\n<br><br>\nObjects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a clockwise direction.\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nrotate(HALF_PI) and then rotate(HALF_PI) is the same as rotate(PI).\nAll tranformations are reset when <a href=\"#/p5/draw\">draw()</a> begins again.\n<br><br>\nTechnically, <a href=\"#/p5/rotate\">rotate()</a> multiplies the current transformation matrix\nby a rotation matrix. This function can be further controlled by\nthe <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "(in 3d) the axis to rotate around",
                    "type": "p5.Vector|Number[]",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntranslate(width / 2, height / 2);\nrotate(PI / 3.0);\nrect(-26, -26, 52, 52);\n</code>\n</div>"
            ],
            "alt": "white 52x52 rect with black outline at center rotated counter 45 degrees",
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "../p5.js/src/core/transform.js",
            "line": 201,
            "description": "Rotates around X axis.",
            "itemtype": "method",
            "name": "rotateX",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(255);\n  rotateX(millis() / 1000);\n  box();\n}\n</code>\n</div>"
            ],
            "alt": "3d box rotating around the x axis.",
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "../p5.js/src/core/transform.js",
            "line": 231,
            "description": "Rotates around Y axis.",
            "itemtype": "method",
            "name": "rotateY",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(255);\n  rotateY(millis() / 1000);\n  box();\n}\n</code>\n</div>"
            ],
            "alt": "3d box rotating around the y axis.",
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "../p5.js/src/core/transform.js",
            "line": 261,
            "description": "Rotates around Z axis. Webgl mode only.",
            "itemtype": "method",
            "name": "rotateZ",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(255);\n  rotateZ(millis() / 1000);\n  box();\n}\n</code>\n</div>"
            ],
            "alt": "3d box rotating around the z axis.",
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "../p5.js/src/core/transform.js",
            "line": 291,
            "description": "Increases or decreases the size of a shape by expanding and contracting\nvertices. Objects always scale from their relative origin to the\ncoordinate system. Scale values are specified as decimal percentages.\nFor example, the function call scale(2.0) increases the dimension of a\nshape by 200%.\n<br><br>\nTransformations apply to everything that happens after and subsequent\ncalls to the function multiply the effect. For example, calling scale(2.0)\nand then scale(1.5) is the same as scale(3.0). If <a href=\"#/p5/scale\">scale()</a> is called\nwithin <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when the loop begins again.\n<br><br>\nUsing this function with the z parameter is only available in WEBGL mode.\nThis function can be further controlled with <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "s",
                    "description": "percent to scale the object, or percentage to\n                     scale the object in the x-axis if multiple arguments\n                     are given",
                    "type": "Number|p5.Vector|Number[]"
                },
                {
                    "name": "y",
                    "description": "percent to scale the object in the y-axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "percent to scale the object in the z-axis (webgl only)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nrect(30, 20, 50, 50);\nscale(0.5);\nrect(30, 20, 50, 50);\n</code>\n</div>\n\n<div>\n<code>\nrect(30, 20, 50, 50);\nscale(0.5, 1.3);\nrect(30, 20, 50, 50);\n</code>\n</div>"
            ],
            "alt": "white 52x52 rect with black outline at center rotated counter 45 degrees\n2 white rects with black outline- 1 50x50 at center. other 25x65 bottom left",
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "../p5.js/src/core/transform.js",
            "line": 336,
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "scales",
                    "description": "per-axis percents to scale the object",
                    "type": "p5.Vector|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "../p5.js/src/core/transform.js",
            "line": 366,
            "description": "Shears a shape around the x-axis the amount specified by the angle\nparameter. Angles should be specified in the current angleMode.\nObjects are always sheared around their relative position to the origin\nand positive numbers shear objects in a clockwise direction.\n<br><br>\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nshearX(PI/2) and then shearX(PI/2) is the same as shearX(PI).\nIf <a href=\"#/p5/shearX\">shearX()</a> is called within the <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when\nthe loop begins again.\n<br><br>\nTechnically, <a href=\"#/p5/shearX\">shearX()</a> multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by the\n<a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.",
            "itemtype": "method",
            "name": "shearX",
            "params": [
                {
                    "name": "angle",
                    "description": "angle of shear specified in radians or degrees,\n                       depending on current angleMode",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntranslate(width / 4, height / 4);\nshearX(PI / 4.0);\nrect(0, 0, 30, 30);\n</code>\n</div>"
            ],
            "alt": "white irregular quadrilateral with black outline at top middle.",
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "../p5.js/src/core/transform.js",
            "line": 405,
            "description": "Shears a shape around the y-axis the amount specified by the angle\nparameter. Angles should be specified in the current angleMode. Objects\nare always sheared around their relative position to the origin and\npositive numbers shear objects in a clockwise direction.\n<br><br>\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nshearY(PI/2) and then shearY(PI/2) is the same as shearY(PI). If\n<a href=\"#/p5/shearY\">shearY()</a> is called within the <a href=\"#/p5/draw\">draw()</a>, the transformation is reset when\nthe loop begins again.\n<br><br>\nTechnically, <a href=\"#/p5/shearY\">shearY()</a> multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by the\n<a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a> functions.",
            "itemtype": "method",
            "name": "shearY",
            "params": [
                {
                    "name": "angle",
                    "description": "angle of shear specified in radians or degrees,\n                       depending on current angleMode",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntranslate(width / 4, height / 4);\nshearY(PI / 4.0);\nrect(0, 0, 30, 30);\n</code>\n</div>"
            ],
            "alt": "white irregular quadrilateral with black outline at middle bottom.",
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "../p5.js/src/core/transform.js",
            "line": 444,
            "description": "Specifies an amount to displace objects within the display window.\nThe x parameter specifies left/right translation, the y parameter\nspecifies up/down translation.\n<br><br>\nTransformations are cumulative and apply to everything that happens after\nand subsequent calls to the function accumulates the effect. For example,\ncalling translate(50, 0) and then translate(20, 0) is the same as\ntranslate(70, 0). If <a href=\"#/p5/translate\">translate()</a> is called within <a href=\"#/p5/draw\">draw()</a>, the\ntransformation is reset when the loop begins again. This function can be\nfurther controlled by using <a href=\"#/p5/push\">push()</a> and <a href=\"#/p5/pop\">pop()</a>.",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "x",
                    "description": "left/right translation",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "up/down translation",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "forward/backward translation (webgl only)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntranslate(30, 20);\nrect(0, 0, 55, 55);\n</code>\n</div>\n\n<div>\n<code>\nrect(0, 0, 55, 55); // Draw rect at original 0,0\ntranslate(30, 20);\nrect(0, 0, 55, 55); // Draw rect at new 0,0\ntranslate(14, 14);\nrect(0, 0, 55, 55); // Draw rect at new 0,0\n</code>\n</div>\n\n\n<div>\n<code>\nfunction draw() {\n  background(200);\n  rectMode(CENTER);\n  translate(width / 2, height / 2);\n  translate(p5.Vector.fromAngle(millis() / 1000, 40));\n  rect(0, 0, 20, 20);\n}\n</code>\n</div>"
            ],
            "alt": "white 55x55 rect with black outline at center right.\n3 white 55x55 rects with black outlines at top-l, center-r and bottom-r.\na 20x20 white rect moving in a circle around the canvas",
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "../p5.js/src/core/transform.js",
            "line": 498,
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "vector",
                    "description": "the vector to translate by",
                    "type": "p5.Vector"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Transform",
            "submodule": "Transform"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 16,
            "description": "Creates a new instance of p5.StringDict using the key-value pair\n or the object you provide.",
            "itemtype": "method",
            "name": "createStringDict",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.StringDict"
            },
            "example": [
                "\n <div class=\"norender\">\n <code>\n function setup() {\n   var myDictionary = createStringDict('p5', 'js');\n   print(myDictionary.hasKey('p5')); // logs true to console\n  var anotherDictionary = createStringDict({ happy: 'coding' });\n   print(anotherDictionary.hasKey('happy')); // logs true to console\n }\n </code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 39,
            "itemtype": "method",
            "name": "createStringDict",
            "params": [
                {
                    "name": "object",
                    "description": "object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.StringDict"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 50,
            "description": "Creates a new instance of <a href=\"#/p5.NumberDict\">p5.NumberDict</a> using the key-value pair\n or object you provide.",
            "itemtype": "method",
            "name": "createNumberDict",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.NumberDict"
            },
            "example": [
                "\n <div class=\"norender\">\n <code>\n function setup() {\n   var myDictionary = createNumberDict(100, 42);\n   print(myDictionary.hasKey(100)); // logs true to console\n  var anotherDictionary = createNumberDict({ 200: 84 });\n   print(anotherDictionary.hasKey(200)); // logs true to console\n }\n </code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 73,
            "itemtype": "method",
            "name": "createNumberDict",
            "params": [
                {
                    "name": "object",
                    "description": "object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.NumberDict"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 103,
            "description": "Returns the number of key-value pairs currently stored in the Dictionary.",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "the number of key-value pairs in the Dictionary",
                "type": "Integer"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  var myDictionary = createNumberDict(1, 10);\n  myDictionary.create(2, 20);\n  myDictionary.create(3, 30);\n  print(myDictionary.size()); // logs 3 to the console\n}\n</code></div>\n"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 125,
            "description": "Returns true if the given key exists in the Dictionary,\notherwise returns false.",
            "itemtype": "method",
            "name": "hasKey",
            "params": [
                {
                    "name": "key",
                    "description": "that you want to look up",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "whether that key exists in Dictionary",
                "type": "Boolean"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  var myDictionary = createStringDict('p5', 'js');\n  print(myDictionary.hasKey('p5')); // logs true to console\n}\n</code></div>\n"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 148,
            "description": "Returns the value stored at the given key.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "the",
                    "description": "key you want to access",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "the value stored at that key",
                "type": "Number|String"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  var myDictionary = createStringDict('p5', 'js');\n  var myValue = myDictionary.get('p5');\n  print(myValue === 'js'); // logs true to console\n}\n</code></div>\n"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 175,
            "description": "Updates the value associated with the given key in case it already exists\nin the Dictionary. Otherwise a new key-value pair is added.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Number|String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  var myDictionary = createStringDict('p5', 'js');\n  myDictionary.set('p5', 'JS');\n  myDictionary.print(); // logs \"key: p5 - value: JS\" to console\n}\n</code></div>\n"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 203,
            "description": "private helper function to handle the user passing in objects\nduring construction or calls to create()",
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 214,
            "description": "Creates a new key-value pair in the Dictionary.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Number|String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  var myDictionary = createStringDict('p5', 'js');\n  myDictionary.create('happy', 'coding');\n  myDictionary.print();\n  // above logs \"key: p5 - value: js, key: happy - value: coding\" to console\n}\n</code></div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 232,
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "obj",
                    "description": "key/value pair",
                    "type": "Object"
                }
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 250,
            "description": "Removes all previously stored key-value pairs from the Dictionary.",
            "itemtype": "method",
            "name": "clear",
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  var myDictionary = createStringDict('p5', 'js');\n  print(myDictionary.hasKey('p5')); // prints 'true'\n  myDictionary.clear();\n  print(myDictionary.hasKey('p5')); // prints 'false'\n}\n</code>\n</div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 271,
            "description": "Removes the key-value pair stored at the given key from the Dictionary.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key",
                    "description": "for the pair to remove",
                    "type": "Number|String"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  var myDictionary = createStringDict('p5', 'js');\n  myDictionary.create('happy', 'coding');\n  myDictionary.print();\n  // above logs \"key: p5 - value: js, key: happy - value: coding\" to console\n  myDictionary.remove('p5');\n  myDictionary.print();\n  // above logs \"key: happy value: coding\" to console\n}\n</code></div>\n"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 301,
            "description": "Logs the set of items currently stored in the Dictionary to the console.",
            "itemtype": "method",
            "name": "print",
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  var myDictionary = createStringDict('p5', 'js');\n  myDictionary.create('happy', 'coding');\n  myDictionary.print();\n  // above logs \"key: p5 - value: js, key: happy - value: coding\" to console\n}\n</code>\n</div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 325,
            "description": "Converts the Dictionary into a CSV file for local download.",
            "itemtype": "method",
            "name": "saveTable",
            "example": [
                "\n<div>\n<code>\ncreateButton('save')\n  .position(10, 10)\n  .mousePressed(function() {\n    createStringDict({\n      john: 1940,\n      paul: 1942,\n      george: 1943,\n      ringo: 1940\n    }).saveTable('beatles');\n  });\n</code>\n</div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 357,
            "description": "Converts the Dictionary into a JSON file for local download.",
            "itemtype": "method",
            "name": "saveJSON",
            "example": [
                "\n<div>\n<code>\ncreateButton('save')\n  .position(10, 10)\n  .mousePressed(function() {\n    createStringDict({\n      john: 1940,\n      paul: 1942,\n      george: 1943,\n      ringo: 1940\n    }).saveJSON('beatles');\n  });\n</code>\n</div>"
            ],
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 382,
            "description": "private helper function to ensure that the user passed in valid\nvalues for the Dictionary type",
            "class": "p5.TypedDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 425,
            "description": "private helper function to ensure that the user passed in valid\nvalues for the Dictionary type",
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 434,
            "description": "Add the given number to the value currently stored at the given key.\nThe sum then replaces the value previously stored in the Dictionary.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "Key",
                    "description": "for the value you wish to add to",
                    "type": "Number"
                },
                {
                    "name": "Number",
                    "description": "to add to the value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  var myDictionary = createNumberDict(2, 5);\n  myDictionary.add(2, 2);\n  print(myDictionary.get(2)); // logs 7 to console.\n}\n</code></div>\n\n"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 462,
            "description": "Subtract the given number from the value currently stored at the given key.\nThe difference then replaces the value previously stored in the Dictionary.",
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "Key",
                    "description": "for the value you wish to subtract from",
                    "type": "Number"
                },
                {
                    "name": "Number",
                    "description": "to subtract from the value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  var myDictionary = createNumberDict(2, 5);\n  myDictionary.sub(2, 2);\n  print(myDictionary.get(2)); // logs 3 to console.\n}\n</code></div>\n\n"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 486,
            "description": "Multiply the given number with the value currently stored at the given key.\nThe product then replaces the value previously stored in the Dictionary.",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "Key",
                    "description": "for value you wish to multiply",
                    "type": "Number"
                },
                {
                    "name": "Amount",
                    "description": "to multiply the value by",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  var myDictionary = createNumberDict(2, 4);\n  myDictionary.mult(2, 2);\n  print(myDictionary.get(2)); // logs 8 to console.\n}\n</code></div>\n\n"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 514,
            "description": "Divide the given number with the value currently stored at the given key.\nThe quotient then replaces the value previously stored in the Dictionary.",
            "itemtype": "method",
            "name": "div",
            "params": [
                {
                    "name": "Key",
                    "description": "for value you wish to divide",
                    "type": "Number"
                },
                {
                    "name": "Amount",
                    "description": "to divide the value by",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  var myDictionary = createNumberDict(2, 8);\n  myDictionary.div(2, 2);\n  print(myDictionary.get(2)); // logs 4 to console.\n}\n</code></div>\n\n"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 542,
            "description": "private helper function for finding lowest or highest value\nthe argument 'flip' is used to flip the comparison arrow\nfrom 'less than' to 'greater than'",
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 567,
            "description": "Return the lowest number currently stored in the Dictionary.",
            "itemtype": "method",
            "name": "minValue",
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  var myDictionary = createNumberDict({ 2: -10, 4: 0.65, 1.2: 3 });\n  var lowestValue = myDictionary.minValue(); // value is -10\n  print(lowestValue);\n}\n</code></div>\n"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 588,
            "description": "Return the highest number currently stored in the Dictionary.",
            "itemtype": "method",
            "name": "maxValue",
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  var myDictionary = createNumberDict({ 2: -10, 4: 0.65, 1.2: 3 });\n  var highestValue = myDictionary.maxValue(); // value is 3\n  print(highestValue);\n}\n</code></div>\n"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 609,
            "description": "private helper function for finding lowest or highest key\nthe argument 'flip' is used to flip the comparison arrow\nfrom 'less than' to 'greater than'",
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 632,
            "description": "Return the lowest key currently used in the Dictionary.",
            "itemtype": "method",
            "name": "minKey",
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  var myDictionary = createNumberDict({ 2: 4, 4: 6, 1.2: 3 });\n  var lowestKey = myDictionary.minKey(); // value is 1.2\n  print(lowestKey);\n}\n</code></div>\n"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/data/p5.TypedDict.js",
            "line": 653,
            "description": "Return the highest key currently used in the Dictionary.",
            "itemtype": "method",
            "name": "maxKey",
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'>\n<code>\nfunction setup() {\n  var myDictionary = createNumberDict({ 2: 4, 4: 6, 1.2: 3 });\n  var highestKey = myDictionary.maxKey(); // value is 4\n  print(highestKey);\n}\n</code></div>\n"
            ],
            "class": "p5.NumberDict",
            "module": "Data",
            "submodule": "Dictionary"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 12,
            "description": "The system variable deviceOrientation always contains the orientation of\nthe device. The value of this variable will either be set 'landscape'\nor 'portrait'. If no data is available it will be set to 'undefined'.\neither LANDSCAPE or PORTRAIT.",
            "itemtype": "property",
            "name": "deviceOrientation",
            "type": "Constant",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 23,
            "description": "The system variable accelerationX always contains the acceleration of the\ndevice along the x axis. Value is represented as meters per second squared.",
            "itemtype": "property",
            "name": "accelerationX",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 32,
            "description": "The system variable accelerationY always contains the acceleration of the\ndevice along the y axis. Value is represented as meters per second squared.",
            "itemtype": "property",
            "name": "accelerationY",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 41,
            "description": "The system variable accelerationZ always contains the acceleration of the\ndevice along the z axis. Value is represented as meters per second squared.",
            "itemtype": "property",
            "name": "accelerationZ",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 50,
            "description": "The system variable pAccelerationX always contains the acceleration of the\ndevice along the x axis in the frame previous to the current frame. Value\nis represented as meters per second squared.",
            "itemtype": "property",
            "name": "pAccelerationX",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 60,
            "description": "The system variable pAccelerationY always contains the acceleration of the\ndevice along the y axis in the frame previous to the current frame. Value\nis represented as meters per second squared.",
            "itemtype": "property",
            "name": "pAccelerationY",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 70,
            "description": "The system variable pAccelerationZ always contains the acceleration of the\ndevice along the z axis in the frame previous to the current frame. Value\nis represented as meters per second squared.",
            "itemtype": "property",
            "name": "pAccelerationZ",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 80,
            "description": "_updatePAccelerations updates the pAcceleration values",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 91,
            "description": "The system variable rotationX always contains the rotation of the\ndevice along the x axis. Value is represented as 0 to +/-180 degrees.\n<br><br>\nNote: The order the rotations are called is important, ie. if used\ntogether, it must be called in the order Z-X-Y or there might be\nunexpected behaviour.",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  //rotateZ(radians(rotationZ));\n  rotateX(radians(rotationX));\n  //rotateY(radians(rotationY));\n  box(200, 200, 200);\n}\n</code>\n</div>"
            ],
            "itemtype": "property",
            "name": "rotationX",
            "type": "Number",
            "readonly": "",
            "alt": "red horizontal line right, green vertical line bottom. black background.",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 125,
            "description": "The system variable rotationY always contains the rotation of the\ndevice along the y axis. Value is represented as 0 to +/-90 degrees.\n<br><br>\nNote: The order the rotations are called is important, ie. if used\ntogether, it must be called in the order Z-X-Y or there might be\nunexpected behaviour.",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  //rotateZ(radians(rotationZ));\n  //rotateX(radians(rotationX));\n  rotateY(radians(rotationY));\n  box(200, 200, 200);\n}\n</code>\n</div>"
            ],
            "itemtype": "property",
            "name": "rotationY",
            "type": "Number",
            "readonly": "",
            "alt": "red horizontal line right, green vertical line bottom. black background.",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 158,
            "description": "The system variable rotationZ always contains the rotation of the\ndevice along the z axis. Value is represented as 0 to 359 degrees.\n<br><br>\nUnlike rotationX and rotationY, this variable is available for devices\nwith a built-in compass only.\n<br><br>\nNote: The order the rotations are called is important, ie. if used\ntogether, it must be called in the order Z-X-Y or there might be\nunexpected behaviour.",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  rotateZ(radians(rotationZ));\n  //rotateX(radians(rotationX));\n  //rotateY(radians(rotationY));\n  box(200, 200, 200);\n}\n</code>\n</div>"
            ],
            "itemtype": "property",
            "name": "rotationZ",
            "type": "Number",
            "readonly": "",
            "alt": "red horizontal line right, green vertical line bottom. black background.",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 194,
            "description": "The system variable pRotationX always contains the rotation of the\ndevice along the x axis in the frame previous to the current frame. Value\nis represented as 0 to +/-180 degrees.\n<br><br>\npRotationX can also be used with rotationX to determine the rotate\ndirection of the device along the X-axis.",
            "example": [
                "\n<div class='norender'>\n<code>\n// A simple if statement looking at whether\n// rotationX - pRotationX < 0 is true or not will be\n// sufficient for determining the rotate direction\n// in most cases.\n\n// Some extra logic is needed to account for cases where\n// the angles wrap around.\nvar rotateDirection = 'clockwise';\n\n// Simple range conversion to make things simpler.\n// This is not absolutely necessary but the logic\n// will be different in that case.\n\nvar rX = rotationX + 180;\nvar pRX = pRotationX + 180;\n\nif ((rX - pRX > 0 && rX - pRX < 270) || rX - pRX < -270) {\n  rotateDirection = 'clockwise';\n} else if (rX - pRX < 0 || rX - pRX > 270) {\n  rotateDirection = 'counter-clockwise';\n}\n\nprint(rotateDirection);\n</code>\n</div>"
            ],
            "alt": "no image to display.",
            "itemtype": "property",
            "name": "pRotationX",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 239,
            "description": "The system variable pRotationY always contains the rotation of the\ndevice along the y axis in the frame previous to the current frame. Value\nis represented as 0 to +/-90 degrees.\n<br><br>\npRotationY can also be used with rotationY to determine the rotate\ndirection of the device along the Y-axis.",
            "example": [
                "\n<div class='norender'>\n<code>\n// A simple if statement looking at whether\n// rotationY - pRotationY < 0 is true or not will be\n// sufficient for determining the rotate direction\n// in most cases.\n\n// Some extra logic is needed to account for cases where\n// the angles wrap around.\nvar rotateDirection = 'clockwise';\n\n// Simple range conversion to make things simpler.\n// This is not absolutely necessary but the logic\n// will be different in that case.\n\nvar rY = rotationY + 180;\nvar pRY = pRotationY + 180;\n\nif ((rY - pRY > 0 && rY - pRY < 270) || rY - pRY < -270) {\n  rotateDirection = 'clockwise';\n} else if (rY - pRY < 0 || rY - pRY > 270) {\n  rotateDirection = 'counter-clockwise';\n}\nprint(rotateDirection);\n</code>\n</div>"
            ],
            "alt": "no image to display.",
            "itemtype": "property",
            "name": "pRotationY",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 283,
            "description": "The system variable pRotationZ always contains the rotation of the\ndevice along the z axis in the frame previous to the current frame. Value\nis represented as 0 to 359 degrees.\n<br><br>\npRotationZ can also be used with rotationZ to determine the rotate\ndirection of the device along the Z-axis.",
            "example": [
                "\n<div class='norender'>\n<code>\n// A simple if statement looking at whether\n// rotationZ - pRotationZ < 0 is true or not will be\n// sufficient for determining the rotate direction\n// in most cases.\n\n// Some extra logic is needed to account for cases where\n// the angles wrap around.\nvar rotateDirection = 'clockwise';\n\nif (\n  (rotationZ - pRotationZ > 0 && rotationZ - pRotationZ < 270) ||\n  rotationZ - pRotationZ < -270\n) {\n  rotateDirection = 'clockwise';\n} else if (rotationZ - pRotationZ < 0 || rotationZ - pRotationZ > 270) {\n  rotateDirection = 'counter-clockwise';\n}\nprint(rotateDirection);\n</code>\n</div>"
            ],
            "alt": "no image to display.",
            "itemtype": "property",
            "name": "pRotationZ",
            "type": "Number",
            "readonly": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 341,
            "description": "When a device is rotated, the axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a>\nmethod is stored in the turnAxis variable. The turnAxis variable is only defined within\nthe scope of deviceTurned().",
            "itemtype": "property",
            "name": "turnAxis",
            "type": "String",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\n// Run this example on a mobile device\n// Rotate the device by 90 degrees in the\n// X-axis to change the value.\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceTurned() {\n  if (turnAxis === 'X') {\n    if (value === 0) {\n      value = 255;\n    } else if (value === 255) {\n      value = 0;\n    }\n  }\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect in center of canvas. turns white on mobile when device turns\n50x50 black rect in center of canvas. turns white on mobile when x-axis turns",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 380,
            "description": "The <a href=\"#/p5/setMoveThreshold\">setMoveThreshold()</a> function is used to set the movement threshold for\nthe <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function. The default threshold is set to 0.5.",
            "itemtype": "method",
            "name": "setMoveThreshold",
            "params": [
                {
                    "name": "value",
                    "description": "The threshold value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Run this example on a mobile device\n// You will need to move the device incrementally further\n// the closer the square's color gets to white in order to change the value.\n\nvar value = 0;\nvar threshold = 0.5;\nfunction setup() {\n  setMoveThreshold(threshold);\n}\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceMoved() {\n  value = value + 5;\n  threshold = threshold + 0.1;\n  if (value > 255) {\n    value = 0;\n    threshold = 30;\n  }\n  setMoveThreshold(threshold);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect in center of canvas. turns white on mobile when device moves",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 423,
            "description": "The <a href=\"#/p5/setShakeThreshold\">setShakeThreshold()</a> function is used to set the movement threshold for\nthe <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function. The default threshold is set to 30.",
            "itemtype": "method",
            "name": "setShakeThreshold",
            "params": [
                {
                    "name": "value",
                    "description": "The threshold value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Run this example on a mobile device\n// You will need to shake the device more firmly\n// the closer the box's fill gets to white in order to change the value.\n\nvar value = 0;\nvar threshold = 30;\nfunction setup() {\n  setShakeThreshold(threshold);\n}\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceMoved() {\n  value = value + 5;\n  threshold = threshold + 5;\n  if (value > 255) {\n    value = 0;\n    threshold = 30;\n  }\n  setShakeThreshold(threshold);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect in center of canvas. turns white on mobile when device\nis being shaked",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 467,
            "description": "The <a href=\"#/p5/deviceMoved\">deviceMoved()</a> function is called when the device is moved by more than\nthe threshold value along X, Y or Z axis. The default threshold is set to\n0.5.",
            "itemtype": "method",
            "name": "deviceMoved",
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Run this example on a mobile device\n// Move the device around\n// to change the value.\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceMoved() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect in center of canvas. turns white on mobile when device moves",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 498,
            "description": "The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> function is called when the device rotates by\nmore than 90 degrees continuously.\n<br><br>\nThe axis that triggers the <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method is stored in the turnAxis\nvariable. The <a href=\"#/p5/deviceTurned\">deviceTurned()</a> method can be locked to trigger on any axis:\nX, Y or Z by comparing the turnAxis variable to 'X', 'Y' or 'Z'.",
            "itemtype": "method",
            "name": "deviceTurned",
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Run this example on a mobile device\n// Rotate the device by 90 degrees\n// to change the value.\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceTurned() {\n  if (value === 0) {\n    value = 255;\n  } else if (value === 255) {\n    value = 0;\n  }\n}\n</code>\n</div>\n<div>\n<code>\n// Run this example on a mobile device\n// Rotate the device by 90 degrees in the\n// X-axis to change the value.\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceTurned() {\n  if (turnAxis === 'X') {\n    if (value === 0) {\n      value = 255;\n    } else if (value === 255) {\n      value = 0;\n    }\n  }\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect in center of canvas. turns white on mobile when device turns\n50x50 black rect in center of canvas. turns white on mobile when x-axis turns",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/acceleration.js",
            "line": 557,
            "description": "The <a href=\"#/p5/deviceShaken\">deviceShaken()</a> function is called when the device total acceleration\nchanges of accelerationX and accelerationY values is more than\nthe threshold value. The default threshold is set to 30.",
            "itemtype": "method",
            "name": "deviceShaken",
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Run this example on a mobile device\n// Shake the device to change the value.\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceShaken() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect in center of canvas. turns white on mobile when device shakes",
            "class": "p5",
            "module": "Events",
            "submodule": "Acceleration"
        },
        {
            "file": "../p5.js/src/events/keyboard.js",
            "line": 12,
            "description": "Holds the key codes of currently pressed keys.",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "../p5.js/src/events/keyboard.js",
            "line": 18,
            "description": "The boolean system variable <a href=\"#/p5/keyIsPressed\">keyIsPressed</a> is true if any key is pressed\nand false if no keys are pressed.",
            "itemtype": "property",
            "name": "keyIsPressed",
            "type": "Boolean",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  if (keyIsPressed === true) {\n    fill(0);\n  } else {\n    fill(255);\n  }\n  rect(25, 25, 50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 white rect that turns black on keypress.",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "../p5.js/src/events/keyboard.js",
            "line": 45,
            "description": "The system variable key always contains the value of the most recent\nkey on the keyboard that was typed. To get the proper capitalization, it\nis best to use it within <a href=\"#/p5/keyTyped\">keyTyped()</a>. For non-ASCII keys, use the <a href=\"#/p5/keyCode\">keyCode</a>\nvariable.",
            "itemtype": "property",
            "name": "key",
            "type": "String",
            "readonly": "",
            "example": [
                "\n<div><code>\n// Click any key to display it!\n// (Not Guaranteed to be Case Sensitive)\nfunction setup() {\n  fill(245, 123, 158);\n  textSize(50);\n}\n\nfunction draw() {\n  background(200);\n  text(key, 33, 65); // Display last key pressed.\n}\n</code></div>"
            ],
            "alt": "canvas displays any key value that is pressed in pink font.",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "../p5.js/src/events/keyboard.js",
            "line": 74,
            "description": "The variable keyCode is used to detect special keys such as BACKSPACE,\nDELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW,\nDOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.\nYou can also check for custom keys by looking up the keyCode of any key\non a site like this: <a href=\"http://keycode.info/\">keycode.info</a>.",
            "itemtype": "property",
            "name": "keyCode",
            "type": "Integer",
            "readonly": "",
            "example": [
                "\n<div><code>\nvar fillVal = 126;\nfunction draw() {\n  fill(fillVal);\n  rect(25, 25, 50, 50);\n}\n\nfunction keyPressed() {\n  if (keyCode === UP_ARROW) {\n    fillVal = 255;\n  } else if (keyCode === DOWN_ARROW) {\n    fillVal = 0;\n  }\n  return false; // prevent default\n}\n</code></div>"
            ],
            "alt": "Grey rect center. turns white when up arrow pressed and black when down",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "../p5.js/src/events/keyboard.js",
            "line": 107,
            "description": "The <a href=\"#/p5/keyPressed\">keyPressed()</a> function is called once every time a key is pressed. The\nkeyCode for the key that was pressed is stored in the <a href=\"#/p5/keyCode\">keyCode</a> variable.\n<br><br>\nFor non-ASCII keys, use the keyCode variable. You can check if the keyCode\nequals BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL,\nOPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.\n<br><br>\nFor ASCII keys that was pressed is stored in the key variable. However, it\ndoes not distinguish between uppercase and lowercase. For this reason, it\nis recommended to use <a href=\"#/p5/keyTyped\">keyTyped()</a> to read the key variable, in which the\ncase of the variable will be distinguished.\n<br><br>\nBecause of how operating systems handle key repeats, holding down a key\nmay cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The\nrate of repeat is set by the operating system and how each computer is\nconfigured.<br><br>\nBrowsers may have different default\nbehaviors attached to various key events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "keyPressed",
            "example": [
                "\n<div>\n<code>\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyPressed() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n<div>\n<code>\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyPressed() {\n  if (keyCode === LEFT_ARROW) {\n    value = 255;\n  } else if (keyCode === RIGHT_ARROW) {\n    value = 0;\n  }\n}\n</code>\n</div>\n<div class=\"norender\">\n<code>\nfunction keyPressed() {\n  // Do something\n  return false; // prevent any default behaviour\n}\n</code>\n</div>"
            ],
            "alt": "black rect center. turns white when key pressed and black when released\nblack rect center. turns white when left arrow pressed and black when right.",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "../p5.js/src/events/keyboard.js",
            "line": 194,
            "description": "The <a href=\"#/p5/keyReleased\">keyReleased()</a> function is called once every time a key is released.\nSee <a href=\"#/p5/key\">key</a> and <a href=\"#/p5/keyCode\">keyCode</a> for more information.<br><br>\nBrowsers may have different default\nbehaviors attached to various key events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "keyReleased",
            "example": [
                "\n<div>\n<code>\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyReleased() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n  return false; // prevent any default behavior\n}\n</code>\n</div>"
            ],
            "alt": "black rect center. turns white when key pressed and black when pressed again",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "../p5.js/src/events/keyboard.js",
            "line": 246,
            "description": "The <a href=\"#/p5/keyTyped\">keyTyped()</a> function is called once every time a key is pressed, but\naction keys such as Ctrl, Shift, and Alt are ignored. The most recent\nkey pressed will be stored in the key variable.\n<br><br>\nBecause of how operating systems handle key repeats, holding down a key\nwill cause multiple calls to <a href=\"#/p5/keyTyped\">keyTyped()</a> (and <a href=\"#/p5/keyReleased\">keyReleased()</a> as well). The\nrate of repeat is set by the operating system and how each computer is\nconfigured.<br><br>\nBrowsers may have different default behaviors attached to various key\nevents. To prevent any default behavior for this event, add \"return false\"\nto the end of the method.",
            "itemtype": "method",
            "name": "keyTyped",
            "example": [
                "\n<div>\n<code>\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyTyped() {\n  if (key === 'a') {\n    value = 255;\n  } else if (key === 'b') {\n    value = 0;\n  }\n  // uncomment to prevent any default behavior\n  // return false;\n}\n</code>\n</div>"
            ],
            "alt": "black rect center. turns white when 'a' key typed and black when 'b' pressed",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "../p5.js/src/events/keyboard.js",
            "line": 300,
            "description": "The onblur function is called when the user is no longer focused\non the p5 element. Because the keyup events will not fire if the user is\nnot focused on the element we must assume all keys currently down have\nbeen released.",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "../p5.js/src/events/keyboard.js",
            "line": 310,
            "description": "The <a href=\"#/p5/keyIsDown\">keyIsDown()</a> function checks if the key is currently down, i.e. pressed.\nIt can be used if you have an object that moves, and you want several keys\nto be able to affect its behaviour simultaneously, such as moving a\nsprite diagonally. You can put in any number representing the keyCode of\nthe key, or use any of the variable <a href=\"#/p5/keyCode\">keyCode</a> names listed\n<a href=\"http://p5js.org/reference/#p5/keyCode\">here</a>.",
            "itemtype": "method",
            "name": "keyIsDown",
            "params": [
                {
                    "name": "code",
                    "description": "The key to check for.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "whether key is down or not",
                "type": "Boolean"
            },
            "example": [
                "\n<div><code>\nvar x = 100;\nvar y = 100;\n\nfunction setup() {\n  createCanvas(512, 512);\n}\n\nfunction draw() {\n  if (keyIsDown(LEFT_ARROW)) {\n    x -= 5;\n  }\n\n  if (keyIsDown(RIGHT_ARROW)) {\n    x += 5;\n  }\n\n  if (keyIsDown(UP_ARROW)) {\n    y -= 5;\n  }\n\n  if (keyIsDown(DOWN_ARROW)) {\n    y += 5;\n  }\n\n  clear();\n  fill(255, 0, 0);\n  ellipse(x, y, 50, 50);\n}\n</code></div>\n\n<div><code>\nvar diameter = 50;\n\nfunction setup() {\n  createCanvas(512, 512);\n}\n\nfunction draw() {\n  // 107 and 187 are keyCodes for \"+\"\n  if (keyIsDown(107) || keyIsDown(187)) {\n    diameter += 1;\n  }\n\n  // 109 and 189 are keyCodes for \"-\"\n  if (keyIsDown(109) || keyIsDown(189)) {\n    diameter -= 1;\n  }\n\n  clear();\n  fill(255, 0, 0);\n  ellipse(50, 50, diameter, diameter);\n}\n</code></div>"
            ],
            "alt": "50x50 red ellipse moves left, right, up and down with arrow presses.\n50x50 red ellipse gets bigger or smaller when + or - are pressed.",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "../p5.js/src/events/keyboard.js",
            "line": 387,
            "description": "The checkDownKeys function returns a boolean true if any keys pressed\nand a false if no keys are currently pressed.\n\nHelps avoid instances where a multiple keys are pressed simultaneously and\nreleasing a single key will then switch the\nkeyIsPressed property to true.",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Keyboard"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 22,
            "description": "The system variable mouseX always contains the current horizontal\nposition of the mouse, relative to (0, 0) of the canvas. If touch is\nused instead of mouse input, mouseX will hold the x value of the most\nrecent touch point.",
            "itemtype": "property",
            "name": "mouseX",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\n// Move the mouse across the canvas\nfunction draw() {\n  background(244, 248, 252);\n  line(mouseX, 0, mouseX, 100);\n}\n</code>\n</div>"
            ],
            "alt": "horizontal black line moves left and right with mouse x-position",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 48,
            "description": "The system variable mouseY always contains the current vertical position\nof the mouse, relative to (0, 0) of the canvas. If touch is\nused instead of mouse input, mouseY will hold the y value of the most\nrecent touch point.",
            "itemtype": "property",
            "name": "mouseY",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\n// Move the mouse across the canvas\nfunction draw() {\n  background(244, 248, 252);\n  line(0, mouseY, 100, mouseY);\n}\n</code>\n</div>"
            ],
            "alt": "vertical black line moves up and down with mouse y-position",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 74,
            "description": "The system variable pmouseX always contains the horizontal position of\nthe mouse or finger in the frame previous to the current frame, relative to\n(0, 0) of the canvas. Note: pmouseX will be reset to the current mouseX\nvalue at the start of each touch event.",
            "itemtype": "property",
            "name": "pmouseX",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\n// Move the mouse across the canvas to leave a trail\nfunction setup() {\n  //slow down the frameRate to make it more visible\n  frameRate(10);\n}\n\nfunction draw() {\n  background(244, 248, 252);\n  line(mouseX, mouseY, pmouseX, pmouseY);\n  print(pmouseX + ' -> ' + mouseX);\n}\n</code>\n</div>"
            ],
            "alt": "line trail is created from cursor movements. faster movement make longer line.",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 106,
            "description": "The system variable pmouseY always contains the vertical position of the\nmouse or finger in the frame previous to the current frame, relative to\n(0, 0) of the canvas. Note: pmouseY will be reset to the current mouseY\nvalue at the start of each touch event.",
            "itemtype": "property",
            "name": "pmouseY",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n  //draw a square only if the mouse is not moving\n  if (mouseY === pmouseY && mouseX === pmouseX) {\n    rect(20, 20, 60, 60);\n  }\n\n  print(pmouseY + ' -> ' + mouseY);\n}\n</code>\n</div>"
            ],
            "alt": "60x60 black rect center, fuschia background. rect flickers on mouse movement",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 137,
            "description": "The system variable winMouseX always contains the current horizontal\nposition of the mouse, relative to (0, 0) of the window.",
            "itemtype": "property",
            "name": "winMouseX",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nvar myCanvas;\n\nfunction setup() {\n  //use a variable to store a pointer to the canvas\n  myCanvas = createCanvas(100, 100);\n}\n\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n\n  //move the canvas to the horizontal mouse position\n  //rela                    tive to the window\n  myCanvas.position(winMouseX + 1, windowHeight / 2);\n\n  //the y of the square is relative to the canvas\n  rect(20, mouseY, 60, 60);\n}\n</code>\n</div>"
            ],
            "alt": "60x60 black rect y moves with mouse y and fuschia canvas moves with mouse x",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 174,
            "description": "The system variable winMouseY always contains the current vertical\nposition of the mouse, relative to (0, 0) of the window.",
            "itemtype": "property",
            "name": "winMouseY",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nvar myCanvas;\n\nfunction setup() {\n  //use a variable to store a pointer to the canvas\n  myCanvas = createCanvas(100, 100);\n}\n\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n\n  //move the canvas to the vertical mouse position\n  //rel                    ative to the window\n  myCanvas.position(windowWidth / 2, winMouseY + 1);\n\n  //the x of the square is relative to the canvas\n  rect(mouseX, 20, 60, 60);\n}\n</code>\n</div>"
            ],
            "alt": "60x60 black rect x moves with mouse x and fuschia canvas y moves with mouse y",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 211,
            "description": "The system variable pwinMouseX always contains the horizontal position\nof the mouse in the frame previous to the current frame, relative to\n(0, 0) of the window. Note: pwinMouseX will be reset to the current winMouseX\nvalue at the start of each touch event.",
            "itemtype": "property",
            "name": "pwinMouseX",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nvar myCanvas;\n\nfunction setup() {\n  //use a variable to store a pointer to the canvas\n  myCanvas = createCanvas(100, 100);\n  noStroke();\n  fill(237, 34, 93);\n}\n\nfunction draw() {\n  clear();\n  //the difference between previous and\n  //current x position is the horizontal mouse speed\n  var speed = abs(winMouseX - pwinMouseX);\n  //change the size of the circle\n  //according to the horizontal speed\n  ellipse(50, 50, 10 + speed * 5, 10 + speed * 5);\n  //move the canvas to the mouse position\n  myCanvas.position(winMouseX + 1, winMouseY + 1);\n}\n</code>\n</div>"
            ],
            "alt": "fuschia ellipse moves with mouse x and y. Grows and shrinks with mouse speed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 252,
            "description": "The system variable pwinMouseY always contains the vertical position of\nthe mouse in the frame previous to the current frame, relative to (0, 0)\nof the window. Note: pwinMouseY will be reset to the current winMouseY\nvalue at the start of each touch event.",
            "itemtype": "property",
            "name": "pwinMouseY",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nvar myCanvas;\n\nfunction setup() {\n  //use a variable to store a pointer to the canvas\n  myCanvas = createCanvas(100, 100);\n  noStroke();\n  fill(237, 34, 93);\n}\n\nfunction draw() {\n  clear();\n  //the difference between previous and\n  //current y position is the vertical mouse speed\n  var speed = abs(winMouseY - pwinMouseY);\n  //change the size of the circle\n  //according to the vertical speed\n  ellipse(50, 50, 10 + speed * 5, 10 + speed * 5);\n  //move the canvas to the mouse position\n  myCanvas.position(winMouseX + 1, winMouseY + 1);\n}\n</code>\n</div>"
            ],
            "alt": "fuschia ellipse moves with mouse x and y. Grows and shrinks with mouse speed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 294,
            "description": "Processing automatically tracks if the mouse button is pressed and which\nbutton is pressed. The value of the system variable mouseButton is either\nLEFT, RIGHT, or CENTER depending on which button was pressed last.\nWarning: different browsers may track mouseButton differently.",
            "itemtype": "property",
            "name": "mouseButton",
            "type": "Constant",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n\n  if (mouseIsPressed) {\n    if (mouseButton === LEFT) {\n      ellipse(50, 50, 50, 50);\n    }\n    if (mouseButton === RIGHT) {\n      rect(25, 25, 50, 50);\n    }\n    if (mouseButton === CENTER) {\n      triangle(23, 75, 50, 20, 78, 75);\n    }\n  }\n\n  print(mouseButton);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black ellipse appears on center of fuschia canvas on mouse click/press.",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 333,
            "description": "The boolean system variable mouseIsPressed is true if the mouse is pressed\nand false if not.",
            "itemtype": "property",
            "name": "mouseIsPressed",
            "type": "Boolean",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n\n  if (mouseIsPressed) {\n    ellipse(50, 50, 50, 50);\n  } else {\n    rect(25, 25, 50, 50);\n  }\n\n  print(mouseIsPressed);\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect becomes ellipse with mouse click/press. fuschia background.",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 424,
            "description": "The <a href=\"#/p5/mouseMoved\">mouseMoved()</a> function is called every time the mouse moves and a mouse\nbutton is not pressed.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "mouseMoved",
            "params": [
                {
                    "name": "event",
                    "description": "optional MouseEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Move the mouse across the page\n// to change its value\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mouseMoved() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseMoved() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a MouseEvent object\n// as a callback argument\nfunction mouseMoved(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect becomes lighter with mouse movements until white then resets\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 479,
            "description": "The <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is called once every time the mouse moves and\na mouse button is pressed. If no <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function is defined, the\n<a href=\"#/p5/touchMoved\">touchMoved()</a> function will be called instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "mouseDragged",
            "params": [
                {
                    "name": "event",
                    "description": "optional MouseEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Drag the mouse across the page\n// to change its value\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mouseDragged() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseDragged() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a MouseEvent object\n// as a callback argument\nfunction mouseDragged(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect turns lighter with mouse click and drag until white, resets\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 560,
            "description": "The <a href=\"#/p5/mousePressed\">mousePressed()</a> function is called once after every time a mouse button\nis pressed. The mouseButton variable (see the related reference entry)\ncan be used to determine which button has been pressed. If no\n<a href=\"#/p5/mousePressed\">mousePressed()</a> function is defined, the <a href=\"#/p5/touchStarted\">touchStarted()</a> function will be\ncalled instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "mousePressed",
            "params": [
                {
                    "name": "event",
                    "description": "optional MouseEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mousePressed() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mousePressed() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a MouseEvent object\n// as a callback argument\nfunction mousePressed(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect turns white with mouse click/press.\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 637,
            "description": "The <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is called every time a mouse button is\nreleased. If no <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function is defined, the <a href=\"#/p5/touchEnded\">touchEnded()</a>\nfunction will be called instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "mouseReleased",
            "params": [
                {
                    "name": "event",
                    "description": "optional MouseEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\n// after the mouse has been clicked\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mouseReleased() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseReleased() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a MouseEvent object\n// as a callback argument\nfunction mouseReleased(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect turns white with mouse click/press.\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 715,
            "description": "The <a href=\"#/p5/mouseClicked\">mouseClicked()</a> function is called once after a mouse button has been\npressed and then released.<br><br>\nBrowsers handle clicks differently, so this function is only guaranteed to be\nrun when the left mouse button is clicked. To handle other mouse buttons\nbeing pressed or released, see <a href=\"#/p5/mousePressed\">mousePressed()</a> or <a href=\"#/p5/mouseReleased\">mouseReleased()</a>.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method.",
            "itemtype": "method",
            "name": "mouseClicked",
            "params": [
                {
                    "name": "event",
                    "description": "optional MouseEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\n// after the mouse has been clicked\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\n\nfunction mouseClicked() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseClicked() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a MouseEvent object\n// as a callback argument\nfunction mouseClicked(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect turns white with mouse click/press.\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 785,
            "description": "The <a href=\"#/p5/doubleClicked\">doubleClicked()</a> function is executed every time a event\nlistener has detected a dblclick event which is a part of the\nDOM L3 specification. The doubleClicked event is fired when a\npointing device button (usually a mouse's primary button)\nis clicked twice on a single element. For more info on the\ndblclick event refer to mozilla's documentation here:\nhttps://developer.mozilla.org/en-US/docs/Web/Events/dblclick",
            "itemtype": "method",
            "name": "doubleClicked",
            "params": [
                {
                    "name": "event",
                    "description": "optional MouseEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\n// after the mouse has been double clicked\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\n\nfunction doubleClicked() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction doubleClicked() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a MouseEvent object\n// as a callback argument\nfunction doubleClicked(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect turns white with mouse doubleClick/press.\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 854,
            "description": "For use with WebGL orbitControl.",
            "itemtype": "property",
            "name": "_mouseWheelDeltaY",
            "type": "Number",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 862,
            "description": "For use with WebGL orbitControl.",
            "itemtype": "property",
            "name": "_pmouseWheelDeltaY",
            "type": "Number",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/mouse.js",
            "line": 870,
            "description": "The function <a href=\"#/p5/mouseWheel\">mouseWheel()</a> is executed every time a vertical mouse wheel\nevent is detected either triggered by an actual mouse wheel or by a\ntouchpad.<br><br>\nThe event.delta property returns the amount the mouse wheel\nhave scrolled. The values can be positive or negative depending on the\nscroll direction (on OS X with \"natural\" scrolling enabled, the signs\nare inverted).<br><br>\nBrowsers may have different default behaviors attached to various\nmouse events. To prevent any default behavior for this event, add\n\"return false\" to the end of the method.<br><br>\nDue to the current support of the \"wheel\" event on Safari, the function\nmay only work as expected if \"return false\" is included while using Safari.",
            "itemtype": "method",
            "name": "mouseWheel",
            "params": [
                {
                    "name": "event",
                    "description": "optional WheelEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar pos = 25;\n\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n  rect(25, pos, 50, 50);\n}\n\nfunction mouseWheel(event) {\n  print(event.delta);\n  //move the square according to the vertical scroll amount\n  pos += event.delta;\n  //uncomment to block page scrolling\n  //return false;\n}\n</code>\n</div>"
            ],
            "alt": "black 50x50 rect moves up and down with vertical scroll. fuschia background",
            "class": "p5",
            "module": "Events",
            "submodule": "Mouse"
        },
        {
            "file": "../p5.js/src/events/touch.js",
            "line": 12,
            "description": "The system variable touches[] contains an array of the positions of all\ncurrent touch points, relative to (0, 0) of the canvas, and IDs identifying a\nunique touch as it moves. Each element in the array is an object with x, y,\nand id properties.\n\nThe touches[] array is not supported on Safari and IE on touch-based\ndesktops (laptops).",
            "itemtype": "property",
            "name": "touches",
            "type": "Object[]",
            "readonly": "",
            "example": [
                "\n<div>\n<code>\n// On a touchscreen device, touch\n// the canvas using one or more fingers\n// at the same time\nfunction draw() {\n  clear();\n  var display = touches.length + ' touches';\n  text(display, 5, 10);\n}\n</code>\n</div>"
            ],
            "alt": "Number of touches currently registered are displayed on the canvas",
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "../p5.js/src/events/touch.js",
            "line": 74,
            "description": "The touchStarted() function is called once after every time a touch is\nregistered. If no <a href=\"#/p5/touchStarted\">touchStarted()</a> function is defined, the <a href=\"#/p5/mousePressed\">mousePressed()</a>\nfunction will be called instead if it is defined.<br><br>\nBrowsers may have different default behaviors attached to various touch\nevents. To prevent any default behavior for this event, add \"return false\"\nto the end of the method.",
            "itemtype": "method",
            "name": "touchStarted",
            "params": [
                {
                    "name": "event",
                    "description": "optional TouchEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Touch within the image to change\n// the value of the rectangle\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction touchStarted() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction touchStarted() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a TouchEvent object\n// as a callback argument\nfunction touchStarted(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect turns white with touch event.\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "../p5.js/src/events/touch.js",
            "line": 149,
            "description": "The <a href=\"#/p5/touchMoved\">touchMoved()</a> function is called every time a touch move is registered.\nIf no <a href=\"#/p5/touchMoved\">touchMoved()</a> function is defined, the <a href=\"#/p5/mouseDragged\">mouseDragged()</a> function will\nbe called instead if it is defined.<br><br>\nBrowsers may have different default behaviors attached to various touch\nevents. To prevent any default behavior for this event, add \"return false\"\nto the end of the method.",
            "itemtype": "method",
            "name": "touchMoved",
            "params": [
                {
                    "name": "event",
                    "description": "optional TouchEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Move your finger across the page\n// to change its value\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction touchMoved() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction touchMoved() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a TouchEvent object\n// as a callback argument\nfunction touchMoved(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect turns lighter with touch until white. resets\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "../p5.js/src/events/touch.js",
            "line": 222,
            "description": "The <a href=\"#/p5/touchEnded\">touchEnded()</a> function is called every time a touch ends. If no\n<a href=\"#/p5/touchEnded\">touchEnded()</a> function is defined, the <a href=\"#/p5/mouseReleased\">mouseReleased()</a> function will be\ncalled instead if it is defined.<br><br>\nBrowsers may have different default behaviors attached to various touch\nevents. To prevent any default behavior for this event, add \"return false\"\nto the end of the method.",
            "itemtype": "method",
            "name": "touchEnded",
            "params": [
                {
                    "name": "event",
                    "description": "optional TouchEvent callback argument.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\n// Release touch within the image to\n// change the value of the rectangle\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction touchEnded() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction touchEnded() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// returns a TouchEvent object\n// as a callback argument\nfunction touchEnded(event) {\n  console.log(event);\n}\n</code>\n</div>"
            ],
            "alt": "50x50 black rect turns white with touch.\nno image displayed",
            "class": "p5",
            "module": "Events",
            "submodule": "Touch"
        },
        {
            "file": "../p5.js/src/image/filters.js",
            "line": 3,
            "description": "This module defines the filters for use with image buffers.\n\nThis module is basically a collection of functions stored in an object\nas opposed to modules. The functions are destructive, modifying\nthe passed in canvas rather than creating a copy.\n\nGenerally speaking users of this module will use the Filters.apply method\non a canvas to create an effect.\n\nA number of functions are borrowed/adapted from\nhttp://www.html5rocks.com/en/tutorials/canvas/imagefilters/\nor the java processing implementation.",
            "class": "p5",
            "module": "Events"
        },
        {
            "file": "../p5.js/src/image/filters.js",
            "line": 26,
            "description": "Returns the pixel buffer for a canvas",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "the canvas to get pixels from",
                    "type": "Canvas|ImageData"
                }
            ],
            "return": {
                "description": "a one-dimensional array containing\n                                  the data in thc RGBA order, with integer\n                                  values between 0 and 255",
                "type": "Uint8ClampedArray"
            },
            "class": "p5",
            "module": "Events"
        },
        {
            "file": "../p5.js/src/image/filters.js",
            "line": 46,
            "description": "Returns a 32 bit number containing ARGB data at ith pixel in the\n1D array containing pixels data.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "array returned by _toPixels()",
                    "type": "Uint8ClampedArray"
                },
                {
                    "name": "i",
                    "description": "index of a 1D Image Array",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "32 bit integer value representing\n                                 ARGB value.",
                "type": "Integer"
            },
            "class": "p5",
            "module": "Events"
        },
        {
            "file": "../p5.js/src/image/filters.js",
            "line": 67,
            "description": "Modifies pixels RGBA values to values contained in the data object.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "pixels",
                    "description": "array returned by _toPixels()",
                    "type": "Uint8ClampedArray"
                },
                {
                    "name": "data",
                    "description": "source 1D array where each value\n                                  represents ARGB values",
                    "type": "Int32Array"
                }
            ],
            "class": "p5",
            "module": "Events"
        },
        {
            "file": "../p5.js/src/image/filters.js",
            "line": 87,
            "description": "Returns the ImageData object for a canvas\nhttps://developer.mozilla.org/en-US/docs/Web/API/ImageData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "canvas to get image data from",
                    "type": "Canvas|ImageData"
                }
            ],
            "return": {
                "description": "Holder of pixel data (and width and\n                                  height) for a canvas",
                "type": "ImageData"
            },
            "class": "p5",
            "module": "Events"
        },
        {
            "file": "../p5.js/src/image/filters.js",
            "line": 107,
            "description": "Returns a blank ImageData object.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "ImageData"
            },
            "class": "p5",
            "module": "Events"
        },
        {
            "file": "../p5.js/src/image/filters.js",
            "line": 122,
            "description": "Applys a filter function to a canvas.\n\nThe difference between this and the actual filter functions defined below\nis that the filter functions generally modify the pixel buffer but do\nnot actually put that data back to the canvas (where it would actually\nupdate what is visible). By contrast this method does make the changes\nactually visible in the canvas.\n\nThe apply method is the method that callers of this module would generally\nuse. It has been separated from the actual filters to support an advanced\nuse case of creating a filter chain that executes without actually updating\nthe canvas in between everystep.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "[description]",
                    "type": "HTMLCanvasElement"
                },
                {
                    "name": "func",
                    "description": "[description]",
                    "type": "Function(ImageData,Object)"
                },
                {
                    "name": "filterParam",
                    "description": "[description]",
                    "type": "Object"
                }
            ],
            "class": "p5",
            "module": "Events"
        },
        {
            "file": "../p5.js/src/image/filters.js",
            "line": 159,
            "description": "Converts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                },
                {
                    "name": "level",
                    "description": "",
                    "type": "Float"
                }
            ],
            "class": "p5",
            "module": "Events"
        },
        {
            "file": "../p5.js/src/image/filters.js",
            "line": 193,
            "description": "Converts any colors in the image to grayscale equivalents.\nNo parameter is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5",
            "module": "Events"
        },
        {
            "file": "../p5.js/src/image/filters.js",
            "line": 216,
            "description": "Sets the alpha channel to entirely opaque. No parameter is used.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5",
            "module": "Events"
        },
        {
            "file": "../p5.js/src/image/filters.js",
            "line": 232,
            "description": "Sets each pixel to its inverse value. No parameter is used.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5",
            "module": "Events"
        },
        {
            "file": "../p5.js/src/image/filters.js",
            "line": 247,
            "description": "Limits each channel of the image to the number of colors specified as\nthe parameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n\nAdapted from java based processing implementation",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                },
                {
                    "name": "level",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "p5",
            "module": "Events"
        },
        {
            "file": "../p5.js/src/image/filters.js",
            "line": 279,
            "description": "reduces the bright areas in an image",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5",
            "module": "Events"
        },
        {
            "file": "../p5.js/src/image/filters.js",
            "line": 367,
            "description": "increases the bright areas in an image",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "canvas",
                    "description": "",
                    "type": "Canvas"
                }
            ],
            "class": "p5",
            "module": "Events"
        },
        {
            "file": "../p5.js/src/image/image.js",
            "line": 8,
            "description": "This module defines the p5 methods for the <a href=\"#/p5.Image\">p5.Image</a> class\nfor drawing images to the main display canvas.",
            "class": "p5",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/image.js",
            "line": 22,
            "description": "Creates a new <a href=\"#/p5.Image\">p5.Image</a> (the datatype for storing images). This provides a\nfresh buffer of pixels to play with. Set the size of the buffer with the\nwidth and height parameters.\n<br><br>\n.<a href=\"#/p5.Image/pixels\">pixels</a> gives access to an array containing the values for all the pixels\nin the display window.\nThese values are numbers. This array is the size (including an appropriate\nfactor for the <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4,\nrepresenting the R, G, B, A values in order for each pixel, moving from\nleft to right across each row, then down each column. See .<a href=\"#/p5.Image/pixels\">pixels</a> for\nmore info. It may also be simpler to use <a href=\"#/p5.Image/set\">set()</a> or <a href=\"#/p5.Image/get\">get()</a>.\n<br><br>\nBefore accessing the pixels of an image, the data must loaded with the\n<a href=\"#/p5.Image/loadPixels\">loadPixels()</a> function. After the array data has been modified, the\n<a href=\"#/p5.Image/updatePixels\">updatePixels()</a> function must be run to update the changes.",
            "itemtype": "method",
            "name": "createImage",
            "params": [
                {
                    "name": "width",
                    "description": "width in pixels",
                    "type": "Integer"
                },
                {
                    "name": "height",
                    "description": "height in pixels",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "the <a href=\"#/p5.Image\">p5.Image</a> object",
                "type": "p5.Image"
            },
            "example": [
                "\n<div>\n<code>\nvar img = createImage(66, 66);\nimg.loadPixels();\nfor (var i = 0; i < img.width; i++) {\n  for (var j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102));\n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>\n\n<div>\n<code>\nvar img = createImage(66, 66);\nimg.loadPixels();\nfor (var i = 0; i < img.width; i++) {\n  for (var j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102, (i % img.width) * 2));\n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\nimage(img, 34, 34);\n</code>\n</div>\n\n<div>\n<code>\nvar pink = color(255, 102, 204);\nvar img = createImage(66, 66);\nimg.loadPixels();\nvar d = pixelDensity();\nvar halfImage = 4 * (img.width * d) * (img.height / 2 * d);\nfor (var i = 0; i < halfImage; i += 4) {\n  img.pixels[i] = red(pink);\n  img.pixels[i + 1] = green(pink);\n  img.pixels[i + 2] = blue(pink);\n  img.pixels[i + 3] = alpha(pink);\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>"
            ],
            "alt": "66x66 dark turquoise rect in center of canvas.\n2 gradated dark turquoise rects fade left. 1 center 1 bottom right of canvas\nno image displayed",
            "class": "p5",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/image.js",
            "line": 102,
            "description": "Save the current canvas as an image. The browser will either save the\nfile immediately, or prompt the user with a dialogue window.",
            "itemtype": "method",
            "name": "saveCanvas",
            "params": [
                {
                    "name": "selectedCanvas",
                    "description": "a variable\n                                representing a specific html5 canvas (optional)",
                    "type": "p5.Element|HTMLCanvasElement"
                },
                {
                    "name": "filename",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "extension",
                    "description": "'jpg' or 'png'",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n <div class='norender notest'><code>\n function setup() {\n var c = createCanvas(100, 100);\n background(255, 0, 0);\n saveCanvas(c, 'myCanvas', 'jpg');\n }\n </code></div>\n <div class='norender notest'><code>\n // note that this example has the same result as above\n // if no canvas is specified, defaults to main canvas\n function setup() {\n var c = createCanvas(100, 100);\n background(255, 0, 0);\n saveCanvas('myCanvas', 'jpg');\n\n // all of the following are valid\n saveCanvas(c, 'myCanvas', 'jpg');\n saveCanvas(c, 'myCanvas.jpg');\n saveCanvas(c, 'myCanvas');\n saveCanvas(c);\n saveCanvas('myCanvas', 'png');\n saveCanvas('myCanvas');\n saveCanvas();\n }\n </code></div>"
            ],
            "alt": "no image displayed\n no image displayed\n no image displayed",
            "class": "p5",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/image.js",
            "line": 144,
            "itemtype": "method",
            "name": "saveCanvas",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/image.js",
            "line": 195,
            "description": "Capture a sequence of frames that can be used to create a movie.\nAccepts a callback. For example, you may wish to send the frames\nto a server where they can be stored or converted into a movie.\nIf no callback is provided, the browser will pop up save dialogues in an\nattempt to download all of the images that have just been created. With the\ncallback provided the image data isn't saved by default but instead passed\nas an argument to the callback function as an array of objects, with the\nsize of array equal to the total number of frames.\n\nNote that <a href=\"#/p5.Image/saveFrames\">saveFrames()</a> will only save the first 15 frames of an animation.\nTo export longer animations, you might look into a library like\n<a href=\"https://github.com/spite/ccapture.js/\">ccapture.js</a>.",
            "itemtype": "method",
            "name": "saveFrames",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "'jpg' or 'png'",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "Duration in seconds to save the frames for.",
                    "type": "Number"
                },
                {
                    "name": "framerate",
                    "description": "Framerate to save the frames in.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "A callback function that will be executed\n                                to handle the image data. This function\n                                should accept an array as argument. The\n                                array will contain the specified number of\n                                frames of objects. Each object has three\n                                properties: imageData - an\n                                image/octet-stream, filename and extension.",
                    "type": "Function(Array)",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\n function draw() {\n background(mouseX);\n }\n\n function mousePressed() {\n saveFrames('out', 'png', 1, 25, function(data) {\n   print(data);\n });\n }\n</code></div>"
            ],
            "alt": "canvas background goes from light to dark with mouse x.",
            "class": "p5",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/loading_displaying.js",
            "line": 17,
            "description": "Loads an image from a path and creates a <a href=\"#/p5.Image\">p5.Image</a> from it.\n<br><br>\nThe image may not be immediately available for rendering\nIf you want to ensure that the image is ready before doing\nanything with it, place the <a href=\"#/p5/loadImage\">loadImage()</a> call in <a href=\"#/p5/preload\">preload()</a>.\nYou may also supply a callback function to handle the image when it's ready.\n<br><br>\nThe path to the image should be relative to the HTML file\nthat links in your sketch. Loading an image from a URL or other\nremote location may be blocked due to your browser's built-in\nsecurity.",
            "itemtype": "method",
            "name": "loadImage",
            "params": [
                {
                    "name": "path",
                    "description": "Path of the image to be loaded",
                    "type": "String"
                },
                {
                    "name": "successCallback",
                    "description": "Function to be called once\n                               the image is loaded. Will be passed the\n                               <a href=\"#/p5.Image\">p5.Image</a>.",
                    "type": "function(p5.Image)",
                    "optional": true
                },
                {
                    "name": "failureCallback",
                    "description": "called with event error if\n                               the image fails to load.",
                    "type": "Function(Event)",
                    "optional": true
                }
            ],
            "return": {
                "description": "the <a href=\"#/p5.Image\">p5.Image</a> object",
                "type": "p5.Image"
            },
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n}\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  // here we use a callback to display the image after loading\n  loadImage('assets/laDefense.jpg', function(img) {\n    image(img, 0, 0);\n  });\n}\n</code>\n</div>"
            ],
            "alt": "image of the underside of a white umbrella and grided ceililng above\nimage of the underside of a white umbrella and grided ceililng above",
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/image/loading_displaying.js",
            "line": 108,
            "description": "Validates clipping params. Per drawImage spec sWidth and sHight cannot be\nnegative or greater than image intrinsic width and height",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "sVal",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "iVal",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/image/loading_displaying.js",
            "line": 125,
            "description": "Draw an image to the p5.js canvas.\n\nThis function can be used with different numbers of parameters. The\nsimplest use requires only three parameters: img, x, and y—where (x, y) is\nthe position of the image. Two more parameters can optionally be added to\nspecify the width and height of the image.\n\nThis function can also be used with all eight Number parameters. To\ndifferentiate between all these parameters, p5.js uses the language of\n\"destination rectangle\" (which corresponds to \"dx\", \"dy\", etc.) and \"source\nimage\" (which corresponds to \"sx\", \"sy\", etc.) below. Specifying the\n\"source image\" dimensions can be useful when you want to display a\nsubsection of the source image instead of the whole thing. Here's a diagram\nto explain further:\n<img src=\"assets/drawImage.png\"></img>",
            "itemtype": "method",
            "name": "image",
            "params": [
                {
                    "name": "img",
                    "description": "the image to display",
                    "type": "p5.Image|p5.Element"
                },
                {
                    "name": "x",
                    "description": "the x-coordinate of the top-left corner of the image",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y-coordinate of the top-left corner of the image",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "the width to draw the image",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "the height to draw the image",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\nfunction setup() {\n  // Top-left corner of the img is at (0, 0)\n  // Width and height are the img's original width and height\n  image(img, 0, 0);\n}\n</code>\n</div>\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\nfunction setup() {\n  background(50);\n  // Top-left corner of the img is at (10, 10)\n  // Width and height are 50 x 50\n  image(img, 10, 10, 50, 50);\n}\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  // Here, we use a callback to display the image after loading\n  loadImage('assets/laDefense.jpg', function(img) {\n    image(img, 0, 0);\n  });\n}\n</code>\n</div>\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/gradient.png');\n}\nfunction setup() {\n  // 1. Background image\n  // Top-left corner of the img is at (0, 0)\n  // Width and height are the img's original width and height, 100 x 100\n  image(img, 0, 0);\n  // 2. Top right image\n  // Top-left corner of destination rectangle is at (50, 0)\n  // Destination rectangle width and height are 40 x 20\n  // The next parameters are relative to the source image:\n  // - Starting at position (50, 50) on the source image, capture a 50 x 50\n  // subsection\n  // - Draw this subsection to fill the dimensions of the destination rectangle\n  image(img, 50, 0, 40, 20, 50, 50, 50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "image of the underside of a white umbrella and gridded ceiling above\nimage of the underside of a white umbrella and gridded ceiling above",
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/image/loading_displaying.js",
            "line": 213,
            "itemtype": "method",
            "name": "image",
            "params": [
                {
                    "name": "img",
                    "description": "",
                    "type": "p5.Image|p5.Element"
                },
                {
                    "name": "dx",
                    "description": "the x-coordinate of the destination\n                          rectangle in which to draw the source image",
                    "type": "Number"
                },
                {
                    "name": "dy",
                    "description": "the y-coordinate of the destination\n                          rectangle in which to draw the source image",
                    "type": "Number"
                },
                {
                    "name": "dWidth",
                    "description": "the width of the destination rectangle",
                    "type": "Number"
                },
                {
                    "name": "dHeight",
                    "description": "the height of the destination rectangle",
                    "type": "Number"
                },
                {
                    "name": "sx",
                    "description": "the x-coordinate of the subsection of the source\nimage to draw into the destination rectangle",
                    "type": "Number"
                },
                {
                    "name": "sy",
                    "description": "the y-coordinate of the subsection of the source\nimage to draw into the destination rectangle",
                    "type": "Number"
                },
                {
                    "name": "sWidth",
                    "description": "the width of the subsection of the\n                          source image to draw into the destination\n                          rectangle",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sHeight",
                    "description": "the height of the subsection of the\n                           source image to draw into the destination rectangle",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/image/loading_displaying.js",
            "line": 296,
            "description": "Sets the fill value for displaying images. Images can be tinted to\nspecified colors or made transparent by including an alpha value.\n<br><br>\nTo apply transparency to an image without affecting its color, use\nwhite as the tint color and specify an alpha value. For instance,\ntint(255, 128) will make an image 50% transparent (assuming the default\nalpha range of 0-255, which can be changed with <a href=\"#/p5/colorMode\">colorMode()</a>).\n<br><br>\nThe value for the gray parameter must be less than or equal to the current\nmaximum value as specified by <a href=\"#/p5/colorMode\">colorMode()</a>. The default maximum value is\n255.",
            "itemtype": "method",
            "name": "tint",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value relative to\n                                the current color range",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  tint(0, 153, 204); // Tint blue\n  image(img, 50, 0);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  tint(0, 153, 204, 126); // Tint blue and set transparency\n  image(img, 50, 0);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  tint(255, 126); // Apply transparency without changing color\n  image(img, 50, 0);\n}\n</code>\n</div>"
            ],
            "alt": "2 side by side images of umbrella and ceiling, one image with blue tint\nImages of umbrella and ceiling, one half of image with blue tint\n2 side by side images of umbrella and ceiling, one image translucent",
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/image/loading_displaying.js",
            "line": 369,
            "itemtype": "method",
            "name": "tint",
            "params": [
                {
                    "name": "value",
                    "description": "a color string",
                    "type": "String"
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/image/loading_displaying.js",
            "line": 374,
            "itemtype": "method",
            "name": "tint",
            "params": [
                {
                    "name": "gray",
                    "description": "a gray value",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/image/loading_displaying.js",
            "line": 380,
            "itemtype": "method",
            "name": "tint",
            "params": [
                {
                    "name": "values",
                    "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                    "type": "Number[]"
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/image/loading_displaying.js",
            "line": 386,
            "itemtype": "method",
            "name": "tint",
            "params": [
                {
                    "name": "color",
                    "description": "the tint color",
                    "type": "p5.Color"
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/image/loading_displaying.js",
            "line": 396,
            "description": "Removes the current fill value for displaying images and reverts to\ndisplaying images with their original hues.",
            "itemtype": "method",
            "name": "noTint",
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  tint(0, 153, 204); // Tint blue\n  image(img, 0, 0);\n  noTint(); // Disable tint\n  image(img, 50, 0);\n}\n</code>\n</div>"
            ],
            "alt": "2 side by side images of bricks, left image with blue tint",
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/image/loading_displaying.js",
            "line": 425,
            "description": "Apply the current tint color to the input image, return the resulting\ncanvas.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "The",
                    "description": "image to be tinted",
                    "type": "p5.Image"
                }
            ],
            "return": {
                "description": "The resulting tinted canvas",
                "type": "Canvas"
            },
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/image/loading_displaying.js",
            "line": 462,
            "description": "Set image mode. Modifies the location from which images are drawn by\nchanging the way in which parameters given to <a href=\"#/p5/image\">image()</a> are interpreted.\nThe default mode is imageMode(CORNER), which interprets the second and\nthird parameters of <a href=\"#/p5/image\">image()</a> as the upper-left corner of the image. If\ntwo additional parameters are specified, they are used to set the image's\nwidth and height.\n<br><br>\nimageMode(CORNERS) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a>\nas the location of one corner, and the fourth and fifth parameters as the\nopposite corner.\n<br><br>\nimageMode(CENTER) interprets the second and third parameters of <a href=\"#/p5/image\">image()</a>\nas the image's center point. If two additional parameters are specified,\nthey are used to set the image's width and height.",
            "itemtype": "method",
            "name": "imageMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either CORNER, CORNERS, or CENTER",
                    "type": "Constant"
                }
            ],
            "example": [
                "\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  imageMode(CORNER);\n  image(img, 10, 10, 50, 50);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  imageMode(CORNERS);\n  image(img, 10, 10, 90, 40);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  imageMode(CENTER);\n  image(img, 50, 50, 80, 80);\n}\n</code>\n</div>"
            ],
            "alt": "small square image of bricks\nhorizontal rectangle image of bricks\nlarge square image of bricks",
            "class": "p5",
            "module": "Image",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 9,
            "description": "This module defines the <a href=\"#/p5.Image\">p5.Image</a> class and P5 methods for\ndrawing images to the main display canvas.",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 90,
            "description": "Image width.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div><code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  createCanvas(100, 100);\n  image(img, 0, 0);\n  for (var i = 0; i < img.width; i++) {\n    var c = img.get(i, img.height / 2);\n    stroke(c);\n    line(i, height / 2, i, height);\n  }\n}\n</code></div>"
            ],
            "alt": "rocky mountains in top and horizontal lines in corresponding colors in bottom.",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 117,
            "description": "Image height.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "readonly": "",
            "example": [
                "\n<div><code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  createCanvas(100, 100);\n  image(img, 0, 0);\n  for (var i = 0; i < img.height; i++) {\n    var c = img.get(img.width / 2, i);\n    stroke(c);\n    line(0, i, width / 2, i);\n  }\n}\n</code></div>"
            ],
            "alt": "rocky mountains on right and vertical lines in corresponding colors on left.",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 152,
            "description": "Array containing the values for all the pixels in the display window.\nThese values are numbers. This array is the size (include an appropriate\nfactor for pixelDensity) of the display window x4,\nrepresenting the R, G, B, A values in order for each pixel, moving from\nleft to right across each row, then down each column. Retina and other\nhigh denisty displays may have more pixels (by a factor of\npixelDensity^2).\nFor example, if the image is 100x100 pixels, there will be 40,000. With\npixelDensity = 2, there will be 160,000. The first four values\n(indices 0-3) in the array will be the R, G, B, A values of the pixel at\n(0, 0). The second four values (indices 4-7) will contain the R, G, B, A\nvalues of the pixel at (1, 0). More generally, to set values for a pixel\nat (x, y):\n```javascript\nvar d = pixelDensity();\nfor (var i = 0; i < d; i++) {\n  for (var j = 0; j < d; j++) {\n    // loop over\n    idx = 4 * ((y * d + j) * width * d + (x * d + i));\n    pixels[idx] = r;\n    pixels[idx+1] = g;\n    pixels[idx+2] = b;\n    pixels[idx+3] = a;\n  }\n}\n```\n<br><br>\nBefore accessing this array, the data must loaded with the <a href=\"#/p5.Image/loadPixels\">loadPixels()</a>\nfunction. After the array data has been modified, the <a href=\"#/p5.Image/updatePixels\">updatePixels()</a>\nfunction must be run to update the changes.",
            "itemtype": "property",
            "name": "pixels",
            "type": "Number[]",
            "example": [
                "\n<div>\n<code>\nvar img = createImage(66, 66);\nimg.loadPixels();\nfor (var i = 0; i < img.width; i++) {\n  for (var j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102));\n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>\n<div>\n<code>\nvar pink = color(255, 102, 204);\nvar img = createImage(66, 66);\nimg.loadPixels();\nfor (var i = 0; i < 4 * (width * height / 2); i += 4) {\n  img.pixels[i] = red(pink);\n  img.pixels[i + 1] = green(pink);\n  img.pixels[i + 2] = blue(pink);\n  img.pixels[i + 3] = alpha(pink);\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>"
            ],
            "alt": "66x66 turquoise rect in center of canvas\n66x66 pink rect in center of canvas",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 222,
            "description": "Helper fxn for sharing pixel methods",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 231,
            "description": "Loads the pixels data for this image into the [pixels] attribute.",
            "itemtype": "method",
            "name": "loadPixels",
            "example": [
                "\n<div><code>\nvar myImage;\nvar halfImage;\n\nfunction preload() {\n  myImage = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  myImage.loadPixels();\n  halfImage = 4 * width * height / 2;\n  for (var i = 0; i < halfImage; i++) {\n    myImage.pixels[i + halfImage] = myImage.pixels[i];\n  }\n  myImage.updatePixels();\n}\n\nfunction draw() {\n  image(myImage, 0, 0);\n}\n</code></div>"
            ],
            "alt": "2 images of rocky mountains vertically stacked",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 267,
            "description": "Updates the backing canvas for this image with the contents of\nthe [pixels] array.",
            "itemtype": "method",
            "name": "updatePixels",
            "params": [
                {
                    "name": "x",
                    "description": "x-offset of the target update area for the\n                             underlying canvas",
                    "type": "Integer"
                },
                {
                    "name": "y",
                    "description": "y-offset of the target update area for the\n                             underlying canvas",
                    "type": "Integer"
                },
                {
                    "name": "w",
                    "description": "height of the target update area for the\n                             underlying canvas",
                    "type": "Integer"
                },
                {
                    "name": "h",
                    "description": "height of the target update area for the\n                             underlying canvas",
                    "type": "Integer"
                }
            ],
            "example": [
                "\n<div><code>\nvar myImage;\nvar halfImage;\n\nfunction preload() {\n  myImage = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  myImage.loadPixels();\n  halfImage = 4 * width * height / 2;\n  for (var i = 0; i < halfImage; i++) {\n    myImage.pixels[i + halfImage] = myImage.pixels[i];\n  }\n  myImage.updatePixels();\n}\n\nfunction draw() {\n  image(myImage, 0, 0);\n}\n</code></div>"
            ],
            "alt": "2 images of rocky mountains vertically stacked",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 307,
            "itemtype": "method",
            "name": "updatePixels",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 315,
            "description": "Get a region of pixels from an image.\n\nIf no params are passed, those whole image is returned,\nif x and y are the only params passed a single pixel is extracted\nif all params are passed a rectangle region is extracted and a <a href=\"#/p5.Image\">p5.Image</a>\nis returned.\n\nReturns undefined if the region is outside the bounds of the image",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "width",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "color of pixel at x,y in array format\n                                   [R, G, B, A] or <a href=\"#/p5.Image\">p5.Image</a>",
                "type": "Number[]|Color|p5.Image"
            },
            "example": [
                "\n<div><code>\nvar myImage;\nvar c;\n\nfunction preload() {\n  myImage = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  background(myImage);\n  noStroke();\n  c = myImage.get(60, 90);\n  fill(c);\n  rect(25, 25, 50, 50);\n}\n\n//get() returns color here\n</code></div>"
            ],
            "alt": "image of rocky mountains with 50x50 green rect in front",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 360,
            "description": "Set the color of a single pixel or write an image into\nthis <a href=\"#/p5.Image\">p5.Image</a>.\n\nNote that for a large number of pixels this will\nbe slower than directly manipulating the pixels array\nand then calling <a href=\"#/p5.Image/updatePixels\">updatePixels()</a>.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "grayscale value | pixel array |\n                               a <a href=\"#/p5.Color\">p5.Color</a> | image to copy",
                    "type": "Number|Number[]|Object"
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar img = createImage(66, 66);\nimg.loadPixels();\nfor (var i = 0; i < img.width; i++) {\n  for (var j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102, (i % img.width) * 2));\n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\nimage(img, 34, 34);\n</code>\n</div>"
            ],
            "alt": "2 gradated dark turquoise rects fade left. 1 center 1 bottom right of canvas",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 398,
            "description": "Resize the image to a new width and height. To make the image scale\nproportionally, use 0 as the value for the wide or high parameter.\nFor instance, to make the width of an image 150 pixels, and change\nthe height using the same proportion, use resize(150, 0).",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "the resized image width",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the resized image height",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div><code>\nvar img;\n\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction draw() {\n  image(img, 0, 0);\n}\n\nfunction mousePressed() {\n  img.resize(50, 100);\n}\n</code></div>"
            ],
            "alt": "image of rocky mountains. zoomed in",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 483,
            "description": "Copies a region of pixels from one image to another. If no\nsrcImage is specified this is used as the source. If the source\nand destination regions aren't the same size, it will\nautomatically resize source pixels to fit the specified\ntarget region.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "p5.Image|p5.Element"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                }
            ],
            "example": [
                "\n<div><code>\nvar photo;\nvar bricks;\nvar x;\nvar y;\n\nfunction preload() {\n  photo = loadImage('assets/rockies.jpg');\n  bricks = loadImage('assets/bricks.jpg');\n}\n\nfunction setup() {\n  x = bricks.width / 2;\n  y = bricks.height / 2;\n  photo.copy(bricks, 0, 0, x, y, 0, 0, x, y);\n  image(photo, 0, 0);\n}\n</code></div>"
            ],
            "alt": "image of rocky mountains and smaller image on top of bricks at top left",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 524,
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "sx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 564,
            "description": "Masks part of an image from displaying by loading another\nimage and using it's alpha channel as an alpha channel for\nthis image.",
            "itemtype": "method",
            "name": "mask",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "p5.Image"
                }
            ],
            "example": [
                "\n<div><code>\nvar photo, maskImage;\nfunction preload() {\n  photo = loadImage('assets/rockies.jpg');\n  maskImage = loadImage('assets/mask2.png');\n}\n\nfunction setup() {\n  createCanvas(100, 100);\n  photo.mask(maskImage);\n  image(photo, 0, 0);\n}\n</code></div>"
            ],
            "alt": "image of rocky mountains with white at right\n\n\nhttp://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 627,
            "description": "Applies an image filter to a <a href=\"#/p5.Image\">p5.Image</a>",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "filterType",
                    "description": "either THRESHOLD, GRAY, OPAQUE, INVERT,\n                               POSTERIZE, BLUR, ERODE, DILATE or BLUR.\n                               See Filters.js for docs on\n                               each available filter",
                    "type": "Constant"
                },
                {
                    "name": "filterParam",
                    "description": "an optional parameter unique\n                               to each filter, see above",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\nvar photo1;\nvar photo2;\n\nfunction preload() {\n  photo1 = loadImage('assets/rockies.jpg');\n  photo2 = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  photo2.filter('gray');\n  image(photo1, 0, 0);\n  image(photo2, width / 2, 0);\n}\n</code></div>"
            ],
            "alt": "2 images of rocky mountains left one in color, right in black and white",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 663,
            "description": "Copies a region of pixels from one image to another, using a specified\nblend mode to do the operation.",
            "itemtype": "method",
            "name": "blend",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "p5.Image"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                },
                {
                    "name": "blendMode",
                    "description": "the blend mode. either\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.\n\nAvailable blend modes are: normal | multiply | screen | overlay |\n           darken | lighten | color-dodge | color-burn | hard-light |\n           soft-light | difference | exclusion | hue | saturation |\n           color | luminosity\n\n\nhttp://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/",
                    "type": "Constant"
                }
            ],
            "example": [
                "\n<div><code>\nvar mountains;\nvar bricks;\n\nfunction preload() {\n  mountains = loadImage('assets/rockies.jpg');\n  bricks = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n  mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, ADD);\n  image(mountains, 0, 0);\n  image(bricks, 0, 0);\n}\n</code></div>\n<div><code>\nvar mountains;\nvar bricks;\n\nfunction preload() {\n  mountains = loadImage('assets/rockies.jpg');\n  bricks = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n  mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);\n  image(mountains, 0, 0);\n  image(bricks, 0, 0);\n}\n</code></div>\n<div><code>\nvar mountains;\nvar bricks;\n\nfunction preload() {\n  mountains = loadImage('assets/rockies.jpg');\n  bricks = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n  mountains.blend(bricks, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);\n  image(mountains, 0, 0);\n  image(bricks, 0, 0);\n}\n</code></div>"
            ],
            "alt": "image of rocky mountains. Brick images on left and right. Right overexposed\nimage of rockies. Brickwall images on left and right. Right mortar transparent\nimage of rockies. Brickwall images on left and right. Right translucent",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 742,
            "itemtype": "method",
            "name": "blend",
            "params": [
                {
                    "name": "sx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "blendMode",
                    "description": "",
                    "type": "Constant"
                }
            ],
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 759,
            "description": "helper method for web GL mode to indicate that an image has been\nchanged or unchanged since last upload. gl texture upload will\nset this value to false after uploading the texture.",
            "itemtype": "method",
            "name": "setModified",
            "params": [
                {
                    "name": "val",
                    "description": "sets whether or not the image has been\nmodified.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 772,
            "description": "helper method for web GL mode to figure out if the image\nhas been modified and might need to be re-uploaded to texture\nmemory between frames.",
            "itemtype": "method",
            "name": "isModified",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "a boolean indicating whether or not the\nimage has been updated or modified since last texture upload.",
                "type": "Boolean"
            },
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/p5.Image.js",
            "line": 785,
            "description": "Saves the image to a file and force the browser to download it.\nAccepts two strings for filename and file extension\nSupports png (default) and jpg.",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "filename",
                    "description": "give your file a name",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "'png' or 'jpg'",
                    "type": "String"
                }
            ],
            "example": [
                "\n<div><code>\nvar photo;\n\nfunction preload() {\n  photo = loadImage('assets/rockies.jpg');\n}\n\nfunction draw() {\n  image(photo, 0, 0);\n}\n\nfunction keyTyped() {\n  if (key === 's') {\n    photo.save('photo', 'png');\n  }\n}\n</code></div>"
            ],
            "alt": "image of rocky mountains.",
            "class": "p5.Image",
            "module": "Image",
            "submodule": "Image"
        },
        {
            "file": "../p5.js/src/image/pixels.js",
            "line": 14,
            "description": "<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\n/Global_Objects/Uint8ClampedArray' target='_blank'>Uint8ClampedArray</a>\ncontaining the values for all the pixels in the display window.\nThese values are numbers. This array is the size (include an appropriate\nfactor for <a href=\"#/p5/pixelDensity\">pixelDensity</a>) of the display window x4,\nrepresenting the R, G, B, A values in order for each pixel, moving from\nleft to right across each row, then down each column. Retina and other\nhigh density displays will have more pixels[] (by a factor of\npixelDensity^2).\nFor example, if the image is 100x100 pixels, there will be 40,000. On a\nretina display, there will be 160,000.\n<br><br>\nThe first four values (indices 0-3) in the array will be the R, G, B, A\nvalues of the pixel at (0, 0). The second four values (indices 4-7) will\ncontain the R, G, B, A values of the pixel at (1, 0). More generally, to\nset values for a pixel at (x, y):\n```javascript\nvar d = pixelDensity();\nfor (var i = 0; i < d; i++) {\n  for (var j = 0; j < d; j++) {\n    // loop over\n    idx = 4 * ((y * d + j) * width * d + (x * d + i));\n    pixels[idx] = r;\n    pixels[idx+1] = g;\n    pixels[idx+2] = b;\n    pixels[idx+3] = a;\n  }\n}\n```\n<p>While the above method is complex, it is flexible enough to work with\nany pixelDensity. Note that <a href=\"#/p5/set\">set()</a> will automatically take care of\nsetting all the appropriate values in <a href=\"#/p5/pixels\">pixels[]</a> for a given (x, y) at\nany pixelDensity, but the performance may not be as fast when lots of\nmodifications are made to the pixel array.\n<br><br>\nBefore accessing this array, the data must loaded with the <a href=\"#/p5/loadPixels\">loadPixels()</a>\nfunction. After the array data has been modified, the <a href=\"#/p5/updatePixels\">updatePixels()</a>\nfunction must be run to update the changes.\n<br><br>\nNote that this is not a standard javascript array.  This means that\nstandard javascript functions such as <a href=\"#/p5/slice\">slice()</a> or\n<a href=\"#/p5/arrayCopy\">arrayCopy()</a> do not\nwork.</p>",
            "itemtype": "property",
            "name": "pixels",
            "type": "Number[]",
            "example": [
                "\n<div>\n<code>\nvar pink = color(255, 102, 204);\nloadPixels();\nvar d = pixelDensity();\nvar halfImage = 4 * (width * d) * (height / 2 * d);\nfor (var i = 0; i < halfImage; i += 4) {\n  pixels[i] = red(pink);\n  pixels[i + 1] = green(pink);\n  pixels[i + 2] = blue(pink);\n  pixels[i + 3] = alpha(pink);\n}\nupdatePixels();\n</code>\n</div>"
            ],
            "alt": "top half of canvas pink, bottom grey",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "../p5.js/src/image/pixels.js",
            "line": 83,
            "description": "Copies a region of pixels from one image to another, using a specified\nblend mode to do the operation.",
            "itemtype": "method",
            "name": "blend",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "p5.Image"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                },
                {
                    "name": "blendMode",
                    "description": "the blend mode. either\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.",
                    "type": "Constant"
                }
            ],
            "example": [
                "\n<div><code>\nvar img0;\nvar img1;\n\nfunction preload() {\n  img0 = loadImage('assets/rockies.jpg');\n  img1 = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n  background(img0);\n  image(img1, 0, 0);\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);\n}\n</code></div>\n<div><code>\nvar img0;\nvar img1;\n\nfunction preload() {\n  img0 = loadImage('assets/rockies.jpg');\n  img1 = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n  background(img0);\n  image(img1, 0, 0);\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);\n}\n</code></div>\n<div><code>\nvar img0;\nvar img1;\n\nfunction preload() {\n  img0 = loadImage('assets/rockies.jpg');\n  img1 = loadImage('assets/bricks_third.jpg');\n}\n\nfunction setup() {\n  background(img0);\n  image(img1, 0, 0);\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, ADD);\n}\n</code></div>"
            ],
            "alt": "image of rocky mountains. Brick images on left and right. Right overexposed\nimage of rockies. Brickwall images on left and right. Right mortar transparent\nimage of rockies. Brickwall images on left and right. Right translucent",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "../p5.js/src/image/pixels.js",
            "line": 156,
            "itemtype": "method",
            "name": "blend",
            "params": [
                {
                    "name": "sx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "blendMode",
                    "description": "",
                    "type": "Constant"
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "../p5.js/src/image/pixels.js",
            "line": 177,
            "description": "Copies a region of the canvas to another region of the canvas\nand copies a region of pixels from an image used as the srcImg parameter\ninto the canvas srcImage is specified this is used as the source. If\nthe source and destination regions aren't the same size, it will\nautomatically resize source pixels to fit the specified\ntarget region.",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "srcImage",
                    "description": "source image",
                    "type": "p5.Image|p5.Element"
                },
                {
                    "name": "sx",
                    "description": "X coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "Y coordinate of the source's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "source image width",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "source image height",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "X coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "Y coordinate of the destination's upper left corner",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "destination image width",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "destination image height",
                    "type": "Integer"
                }
            ],
            "example": [
                "\n<div><code>\nvar img;\n\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  background(img);\n  copy(img, 7, 22, 10, 10, 35, 25, 50, 50);\n  stroke(255);\n  noFill();\n  // Rectangle shows area being copied\n  rect(7, 22, 10, 10);\n}\n</code></div>"
            ],
            "alt": "image of rocky mountains. Brick images on left and right. Right overexposed\nimage of rockies. Brickwall images on left and right. Right mortar transparent\nimage of rockies. Brickwall images on left and right. Right translucent",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "../p5.js/src/image/pixels.js",
            "line": 220,
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "sx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "sh",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dx",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dy",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dw",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "dh",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "../p5.js/src/image/pixels.js",
            "line": 236,
            "description": "Applies a filter to the canvas.\n<br><br>\n\nThe presets options are:\n<br><br>\n\nTHRESHOLD\nConverts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n<br><br>\n\nGRAY\nConverts any colors in the image to grayscale equivalents. No parameter\nis used.\n<br><br>\n\nOPAQUE\nSets the alpha channel to entirely opaque. No parameter is used.\n<br><br>\n\nINVERT\nSets each pixel to its inverse value. No parameter is used.\n<br><br>\n\nPOSTERIZE\nLimits each channel of the image to the number of colors specified as the\nparameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n<br><br>\n\nBLUR\nExecutes a Gaussian blur with the level parameter specifying the extent\nof the blurring. If no parameter is used, the blur is equivalent to\nGaussian blur of radius 1. Larger values increase the blur.\n<br><br>\n\nERODE\nReduces the light areas. No parameter is used.\n<br><br>\n\nDILATE\nIncreases the light areas. No parameter is used.",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "filterType",
                    "description": "either THRESHOLD, GRAY, OPAQUE, INVERT,\n                               POSTERIZE, BLUR, ERODE, DILATE or BLUR.\n                               See Filters.js for docs on\n                               each available filter",
                    "type": "Constant"
                },
                {
                    "name": "filterParam",
                    "description": "an optional parameter unique\n                               to each filter, see above",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(THRESHOLD);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(GRAY);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(OPAQUE);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(INVERT);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(POSTERIZE, 3);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(DILATE);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(BLUR, 3);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/bricks.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  filter(ERODE);\n}\n</code>\n</div>"
            ],
            "alt": "black and white image of a brick wall.\ngreyscale image of a brickwall\nimage of a brickwall\njade colored image of a brickwall\nred and pink image of a brickwall\nimage of a brickwall\nblurry image of a brickwall\nimage of a brickwall\nimage of a brickwall with less detail",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "../p5.js/src/image/pixels.js",
            "line": 415,
            "description": "Returns an array of [R,G,B,A] values for any pixel or grabs a section of\nan image. If no parameters are specified, the entire image is returned.\nUse the x and y parameters to get the value of one pixel. Get a section of\nthe display window by specifying additional w and h parameters. When\ngetting an image, the x and y parameters define the coordinates for the\nupper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.\n<br><br>\nIf the pixel requested is outside of the image window, [0,0,0,255] is\nreturned. To get the numbers scaled according to the current color ranges\nand taking into account <a href=\"#/p5/colorMode\">colorMode</a>, use <a href=\"#/p5/getColor\">getColor</a> instead of get.\n<br><br>\nGetting the color of a single pixel with get(x, y) is easy, but not as fast\nas grabbing the data directly from <a href=\"#/p5/pixels\">pixels[]</a>. The equivalent statement to\nget(x, y) using <a href=\"#/p5/pixels\">pixels[]</a> with pixel density d is\n<code>\nvar x, y, d; // set these to the coordinates\nvar off = (y * width + x) * d * 4;\nvar components = [\n  pixels[off],\n  pixels[off + 1],\n  pixels[off + 2],\n  pixels[off + 3]\n];\nprint(components);\n</code>\n<br><br>\nSee the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.\n\nIf you want to extract an array of colors or a subimage from an p5.Image object,\ntake a look at <a href=\"#/p5.Image/get\">p5.Image.get()</a>",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "width",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "values of pixel at x,y in array format\n                             [R, G, B, A] or <a href=\"#/p5.Image\">p5.Image</a>",
                "type": "Number[]|p5.Image"
            },
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  var c = get();\n  image(c, width / 2, 0);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\nfunction setup() {\n  image(img, 0, 0);\n  var c = get(50, 90);\n  fill(c);\n  noStroke();\n  rect(25, 25, 50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "2 images of the rocky mountains, side-by-side\nImage of the rocky mountains with 50x50 green rect in center of canvas",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "../p5.js/src/image/pixels.js",
            "line": 494,
            "description": "Loads the pixel data for the display window into the <a href=\"#/p5/pixels\">pixels[]</a> array. This\nfunction must always be called before reading from or writing to <a href=\"#/p5/pixels\">pixels[]</a>.\nNote that only changes made with <a href=\"#/p5/set\">set()</a> or direct manipulation of <a href=\"#/p5/pixels\">pixels[]</a>\nwill occur.",
            "itemtype": "method",
            "name": "loadPixels",
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  image(img, 0, 0);\n  var d = pixelDensity();\n  var halfImage = 4 * (img.width * d) * (img.height * d / 2);\n  loadPixels();\n  for (var i = 0; i < halfImage; i++) {\n    pixels[i + halfImage] = pixels[i];\n  }\n  updatePixels();\n}\n</code>\n</div>"
            ],
            "alt": "two images of the rocky mountains. one on top, one on bottom of canvas.",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "../p5.js/src/image/pixels.js",
            "line": 531,
            "description": "<p>Changes the color of any pixel, or writes an image directly to the\ndisplay window.</p>\n<p>The x and y parameters specify the pixel to change and the c parameter\nspecifies the color value. This can be a <a href=\"#/p5.Color\">p5.Color</a> object, or [R, G, B, A]\npixel array. It can also be a single grayscale value.\nWhen setting an image, the x and y parameters define the coordinates for\nthe upper-left corner of the image, regardless of the current <a href=\"#/p5/imageMode\">imageMode()</a>.\n</p>\n<p>\nAfter using <a href=\"#/p5/set\">set()</a>, you must call <a href=\"#/p5/updatePixels\">updatePixels()</a> for your changes to appear.\nThis should be called once all pixels have been set, and must be called before\ncalling .<a href=\"#/p5/get\">get()</a> or drawing the image.\n</p>\n<p>Setting the color of a single pixel with set(x, y) is easy, but not as\nfast as putting the data directly into <a href=\"#/p5/pixels\">pixels[]</a>. Setting the <a href=\"#/p5/pixels\">pixels[]</a>\nvalues directly may be complicated when working with a retina display,\nbut will perform better when lots of pixels need to be set directly on\nevery loop.</p>\n<p>See the reference for <a href=\"#/p5/pixels\">pixels[]</a> for more information.</p>",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "insert a grayscale value | a pixel array |\n                               a <a href=\"#/p5.Color\">p5.Color</a> object | a <a href=\"#/p5.Image\">p5.Image</a> to copy",
                    "type": "Number|Number[]|Object"
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar black = color(0);\nset(30, 20, black);\nset(85, 20, black);\nset(85, 75, black);\nset(30, 75, black);\nupdatePixels();\n</code>\n</div>\n\n<div>\n<code>\nfor (var i = 30; i < width - 15; i++) {\n  for (var j = 20; j < height - 25; j++) {\n    var c = color(204 - j, 153 - i, 0);\n    set(i, j, c);\n  }\n}\nupdatePixels();\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  set(0, 0, img);\n  updatePixels();\n  line(0, 0, width, height);\n  line(0, height, width, 0);\n}\n</code>\n</div>"
            ],
            "alt": "4 black points in the shape of a square middle-right of canvas.\nsquare with orangey-brown gradient lightening at bottom right.\nimage of the rocky mountains. with lines like an 'x' through the center.",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "../p5.js/src/image/pixels.js",
            "line": 605,
            "description": "Updates the display window with the data in the <a href=\"#/p5/pixels\">pixels[]</a> array.\nUse in conjunction with <a href=\"#/p5/loadPixels\">loadPixels()</a>. If you're only reading pixels from\nthe array, there's no need to call <a href=\"#/p5/updatePixels\">updatePixels()</a> — updating is only\nnecessary to apply changes. <a href=\"#/p5/updatePixels\">updatePixels()</a> should be called anytime the\npixels array is manipulated or <a href=\"#/p5/set\">set()</a> is called, and only changes made with\n<a href=\"#/p5/set\">set()</a> or direct changes to <a href=\"#/p5/pixels\">pixels[]</a> will occur.",
            "itemtype": "method",
            "name": "updatePixels",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the upper-left corner of region\n                        to update",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the upper-left corner of region\n                        to update",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "width of region to update",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "height of region to update",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/rockies.jpg');\n}\n\nfunction setup() {\n  image(img, 0, 0);\n  var d = pixelDensity();\n  var halfImage = 4 * (img.width * d) * (img.height * d / 2);\n  loadPixels();\n  for (var i = 0; i < halfImage; i++) {\n    pixels[i + halfImage] = pixels[i];\n  }\n  updatePixels();\n}\n</code>\n</div>"
            ],
            "alt": "two images of the rocky mountains. one on top, one on bottom of canvas.",
            "class": "p5",
            "module": "Image",
            "submodule": "Pixels"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 19,
            "description": "Loads a JSON file from a file or a URL, and returns an Object.\nNote that even if the JSON file contains an Array, an Object will be\nreturned with index numbers as keys.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed. JSONP is supported via a polyfill and you\ncan pass in as the second argument an object with definitions of the json\ncallback following the syntax specified <a href=\"https://github.com/camsong/\nfetch-jsonp\">here</a>.\n\nThis method is suitable for fetching files up to size of 64MB.",
            "itemtype": "method",
            "name": "loadJSON",
            "params": [
                {
                    "name": "path",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "jsonpOptions",
                    "description": "options object for jsonp related settings",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "datatype",
                    "description": "\"json\" or \"jsonp\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                   <a href=\"#/p5/loadJSON\">loadJSON()</a> completes, data is passed\n                                   in as first argument",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "JSON data",
                "type": "Object|Array"
            },
            "example": [
                "\n\n<p>Calling <a href=\"#/p5/loadJSON\">loadJSON()</a> inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the\noperation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.</p>\n\n<div><code>\n// Examples use USGS Earthquake API:\n//   https://earthquake.usgs.gov/fdsnws/event/1/#methods\nvar earthquakes;\nfunction preload() {\n  // Get the most recent earthquake in the database\n  var url =\n   'https://earthquake.usgs.gov/earthquakes/feed/v1.0/' +\n    'summary/all_day.geojson';\n  earthquakes = loadJSON(url);\n}\n\nfunction setup() {\n  noLoop();\n}\n\nfunction draw() {\n  background(200);\n  // Get the magnitude and name of the earthquake out of the loaded JSON\n  var earthquakeMag = earthquakes.features[0].properties.mag;\n  var earthquakeName = earthquakes.features[0].properties.place;\n  ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n  textAlign(CENTER);\n  text(earthquakeName, 0, height - 30, width, 30);\n}\n</code></div>\n\n\n<p>Outside of preload(), you may supply a callback function to handle the\nobject:</p>\n<div><code>\nfunction setup() {\n  noLoop();\n  var url =\n   'https://earthquake.usgs.gov/earthquakes/feed/v1.0/' +\n    'summary/all_day.geojson';\n  loadJSON(url, drawEarthquake);\n}\n\nfunction draw() {\n  background(200);\n}\n\nfunction drawEarthquake(earthquakes) {\n  // Get the magnitude and name of the earthquake out of the loaded JSON\n  var earthquakeMag = earthquakes.features[0].properties.mag;\n  var earthquakeName = earthquakes.features[0].properties.place;\n  ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n  textAlign(CENTER);\n  text(earthquakeName, 0, height - 30, width, 30);\n}\n</code></div>"
            ],
            "alt": "50x50 ellipse that changes from black to white depending on the current humidity\n50x50 ellipse that changes from black to white depending on the current humidity",
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 105,
            "itemtype": "method",
            "name": "loadJSON",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "datatype",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object|Array"
            },
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 113,
            "itemtype": "method",
            "name": "loadJSON",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object|Array"
            },
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 180,
            "description": "Reads the contents of a file and creates a String array of its individual\nlines. If the name of the file is used as the parameter, as in the above\nexample, the file must be located in the sketch directory/folder.\n<br><br>\nAlternatively, the file maybe be loaded from anywhere on the local\ncomputer using an absolute path (something that starts with / on Unix and\nLinux, or a drive letter on Windows), or the filename parameter can be a\nURL for a file found on a network.\n<br><br>\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed.\n\nThis method is suitable for fetching files up to size of 64MB.",
            "itemtype": "method",
            "name": "loadStrings",
            "params": [
                {
                    "name": "filename",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be executed after <a href=\"#/p5/loadStrings\">loadStrings()</a>\n                              completes, Array is passed in as first\n                              argument",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if\n                              there is an error, response is passed\n                              in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of Strings",
                "type": "String[]"
            },
            "example": [
                "\n\n<p>Calling loadStrings() inside <a href=\"#/p5/preload\">preload()</a> guarantees to complete the\noperation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.</p>\n\n<div><code>\nvar result;\nfunction preload() {\n  result = loadStrings('assets/test.txt');\n}\n\nfunction setup() {\n  background(200);\n  var ind = floor(random(result.length));\n  text(result[ind], 10, 10, 80, 80);\n}\n</code></div>\n\n<p>Outside of preload(), you may supply a callback function to handle the\nobject:</p>\n\n<div><code>\nfunction setup() {\n  loadStrings('assets/test.txt', pickString);\n}\n\nfunction pickString(result) {\n  background(200);\n  var ind = floor(random(result.length));\n  text(result[ind], 10, 10, 80, 80);\n}\n</code></div>"
            ],
            "alt": "randomly generated text from a file, for example \"i smell like butter\"\nrandomly generated text from a file, for example \"i have three feet\"",
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 293,
            "description": "<p>Reads the contents of a file or URL and creates a <a href=\"#/p5.Table\">p5.Table</a> object with\nits values. If a file is specified, it must be located in the sketch's\n\"data\" folder. The filename parameter can also be a URL to a file found\nonline. By default, the file is assumed to be comma-separated (in CSV\nformat). Table only looks for a header row if the 'header' option is\nincluded.</p>\n\n<p>Possible options include:\n<ul>\n<li>csv - parse the table as comma-separated values</li>\n<li>tsv - parse the table as tab-separated values</li>\n<li>header - this table has a header (title) row</li>\n</ul>\n</p>\n\n<p>When passing in multiple options, pass them in as separate parameters,\nseperated by commas. For example:\n<br><br>\n<code>\nloadTable('my_csv_file.csv', 'csv', 'header');\n</code>\n</p>\n\n<p> All files loaded and saved use UTF-8 encoding.</p>\n\n<p>This method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed. Calling <a href=\"#/p5/loadTable\">loadTable()</a> inside <a href=\"#/p5/preload\">preload()</a>\nguarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\n<p>Outside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the\nobject:</p>\n</p>\n\nThis method is suitable for fetching files up to size of 64MB.",
            "itemtype": "method",
            "name": "loadTable",
            "params": [
                {
                    "name": "filename",
                    "description": "name of the file or URL to load",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "\"header\" \"csv\" \"tsv\"",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                    <a href=\"#/p5/loadTable\">loadTable()</a> completes. On success, the\n                                    <a href=\"#/p5.Table\">Table</a> object is passed in as the\n                                    first argument.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if\n                                    there is an error, response is passed\n                                    in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "<a href=\"#/p5.Table\">Table</a> object containing data",
                "type": "Object"
            },
            "example": [
                "\n<div class='norender'>\n<code>\n// Given the following CSV file called \"mammals.csv\"\n// located in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n  //the file can be remote\n  //table = loadTable(\"http://p5js.org/reference/assets/mammals.csv\",\n  //                  \"csv\", \"header\");\n}\n\nfunction setup() {\n  //count the columns\n  print(table.getRowCount() + ' total rows in table');\n  print(table.getColumnCount() + ' total columns in table');\n\n  print(table.getColumn('name'));\n  //[\"Goat\", \"Leopard\", \"Zebra\"]\n\n  //cycle through the table\n  for (var r = 0; r < table.getRowCount(); r++)\n    for (var c = 0; c < table.getColumnCount(); c++) {\n      print(table.getString(r, c));\n    }\n}\n</code>\n</div>"
            ],
            "alt": "randomly generated text from a file, for example \"i smell like butter\"\nrandomly generated text from a file, for example \"i have three feet\"",
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 383,
            "itemtype": "method",
            "name": "loadTable",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 603,
            "description": "Reads the contents of a file and creates an XML object with its values.\nIf the name of the file is used as the parameter, as in the above example,\nthe file must be located in the sketch directory/folder.\n\nAlternatively, the file maybe be loaded from anywhere on the local\ncomputer using an absolute path (something that starts with / on Unix and\nLinux, or a drive letter on Windows), or the filename parameter can be a\nURL for a file found on a network.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed. Calling <a href=\"#/p5/loadXML\">loadXML()</a> inside <a href=\"#/p5/preload\">preload()</a>\nguarantees to complete the operation before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.\n\nOutside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the\nobject.\n\nThis method is suitable for fetching files up to size of 64MB.",
            "itemtype": "method",
            "name": "loadXML",
            "params": [
                {
                    "name": "filename",
                    "description": "name of the file or URL to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be executed after <a href=\"#/p5/loadXML\">loadXML()</a>\n                              completes, XML object is passed in as\n                              first argument",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if\n                              there is an error, response is passed\n                              in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "XML object containing data",
                "type": "Object"
            },
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  var children = xml.getChildren('animal');\n\n  for (var i = 0; i < children.length; i++) {\n    var id = children[i].getNum('id');\n    var coloring = children[i].getString('species');\n    var name = children[i].getContent();\n    print(id + ', ' + coloring + ', ' + name);\n  }\n}\n\n// Sketch prints:\n// 0, Capra hircus, Goat\n// 1, Panthera pardus, Leopard\n// 2, Equus zebra, Zebra\n</code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 714,
            "description": "This method is suitable for fetching files up to size of 64MB.",
            "itemtype": "method",
            "name": "loadBytes",
            "params": [
                {
                    "name": "file",
                    "description": "name of the file or URL to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be executed after <a href=\"#/p5/loadBytes\">loadBytes()</a>\n                                   completes",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if there\n                                   is an error",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "an object whose 'bytes' property will be the loaded buffer",
                "type": "Object"
            },
            "example": [
                "\n<div class='norender'><code>\nvar data;\n\nfunction preload() {\n  data = loadBytes('assets/mammals.xml');\n}\n\nfunction setup() {\n  for (var i = 0; i < 5; i++) {\n    console.log(data.bytes[i].toString(16));\n  }\n}\n</code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 774,
            "description": "Method for executing an HTTP GET request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text. This is equivalent to\ncalling <code>httpDo(path, 'GET')</code>. The 'binary' datatype will return\na Blob object, and the 'arrayBuffer' datatype will return an ArrayBuffer\nwhich can be used to initialize typed arrays (such as Uint8Array).",
            "itemtype": "method",
            "name": "httpGet",
            "params": [
                {
                    "name": "path",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "datatype",
                    "description": "\"json\", \"jsonp\", \"binary\", \"arrayBuffer\",\n                                   \"xml\", or \"text\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "param data passed sent with request",
                    "type": "Object|Boolean",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                   <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in\n                                   as first argument",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise that resolves with the data when the operation\n                  completes successfully or rejects with the error after\n                  one occurs.",
                "type": "Promise"
            },
            "example": [
                "\n<div class='norender'><code>\n// Examples use USGS Earthquake API:\n//   https://earthquake.usgs.gov/fdsnws/event/1/#methods\nvar earthquakes;\nfunction preload() {\n  // Get the most recent earthquake in the database\n  var url =\n   'https://earthquake.usgs.gov/fdsnws/event/1/query?' +\n    'format=geojson&limit=1&orderby=time';\n  httpGet(url, 'jsonp', false, function(response) {\n    // when the HTTP request completes, populate the variable that holds the\n    // earthquake data used in the visualization.\n    earthquakes = response;\n  });\n}\n\nfunction draw() {\n  if (!earthquakes) {\n    // Wait until the earthquake data has loaded before drawing.\n    return;\n  }\n  background(200);\n  // Get the magnitude and name of the earthquake out of the loaded JSON\n  var earthquakeMag = earthquakes.features[0].properties.mag;\n  var earthquakeName = earthquakes.features[0].properties.place;\n  ellipse(width / 2, height / 2, earthquakeMag * 10, earthquakeMag * 10);\n  textAlign(CENTER);\n  text(earthquakeName, 0, height - 30, width, 30);\n  noLoop();\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 828,
            "itemtype": "method",
            "name": "httpGet",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object|Boolean"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 836,
            "itemtype": "method",
            "name": "httpGet",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 851,
            "description": "Method for executing an HTTP POST request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text. This is equivalent to\ncalling <code>httpDo(path, 'POST')</code>.",
            "itemtype": "method",
            "name": "httpPost",
            "params": [
                {
                    "name": "path",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "datatype",
                    "description": "\"json\", \"jsonp\", \"xml\", or \"text\".\n                                   If omitted, <a href=\"#/p5/httpPost\">httpPost()</a> will guess.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "param data passed sent with request",
                    "type": "Object|Boolean",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                   <a href=\"#/p5/httpPost\">httpPost()</a> completes, data is passed in\n                                   as first argument",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise that resolves with the data when the operation\n                  completes successfully or rejects with the error after\n                  one occurs.",
                "type": "Promise"
            },
            "example": [
                "\n<div>\n<code>\n// Examples use jsonplaceholder.typicode.com for a Mock Data API\n\nvar url = 'https://jsonplaceholder.typicode.com/posts';\nvar postData = { userId: 1, title: 'p5 Clicked!', body: 'p5.js is way cool.' };\n\nfunction setup() {\n  createCanvas(800, 800);\n}\n\nfunction mousePressed() {\n  // Pick new random color values\n  var r = random(255);\n  var g = random(255);\n  var b = random(255);\n\n  httpPost(url, 'json', postData, function(result) {\n    strokeWeight(2);\n    stroke(r, g, b);\n    fill(r, g, b, 127);\n    ellipse(mouseX, mouseY, 200, 200);\n    text(result.body, mouseX, mouseY);\n  });\n}\n</code>\n</div>\n\n\n<div><code>\nvar url = 'https://invalidURL'; // A bad URL that will cause errors\nvar postData = { title: 'p5 Clicked!', body: 'p5.js is way cool.' };\n\nfunction setup() {\n  createCanvas(800, 800);\n}\n\nfunction mousePressed() {\n  // Pick new random color values\n  var r = random(255);\n  var g = random(255);\n  var b = random(255);\n\n  httpPost(\n    url,\n    'json',\n    postData,\n    function(result) {\n      // ... won't be called\n    },\n    function(error) {\n      strokeWeight(2);\n      stroke(r, g, b);\n      fill(r, g, b, 127);\n      text(error.toString(), mouseX, mouseY);\n    }\n  );\n}\n</code></div>\n"
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 933,
            "itemtype": "method",
            "name": "httpPost",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object|Boolean"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 941,
            "itemtype": "method",
            "name": "httpPost",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 956,
            "description": "Method for executing an HTTP request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text.<br><br>\nFor more advanced use, you may also pass in the path as the first argument\nand a object as the second argument, the signature follows the one specified\nin the Fetch API specification.\nThis method is suitable for fetching files up to size of 64MB when \"GET\" is used.",
            "itemtype": "method",
            "name": "httpDo",
            "params": [
                {
                    "name": "path",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "either \"GET\", \"POST\", or \"PUT\",\n                                   defaults to \"GET\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "datatype",
                    "description": "\"json\", \"jsonp\", \"xml\", or \"text\"",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "param data passed sent with request",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                   <a href=\"#/p5/httpGet\">httpGet()</a> completes, data is passed in\n                                   as first argument",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise that resolves with the data when the operation\n                  completes successfully or rejects with the error after\n                  one occurs.",
                "type": "Promise"
            },
            "example": [
                "\n<div>\n<code>\n// Examples use USGS Earthquake API:\n// https://earthquake.usgs.gov/fdsnws/event/1/#methods\n\n// displays an animation of all USGS earthquakes\nvar earthquakes;\nvar eqFeatureIndex = 0;\n\nfunction preload() {\n  var url = 'https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson';\n  httpDo(\n    url,\n    {\n      method: 'GET',\n      // Other Request options, like special headers for apis\n      headers: { authorization: 'Bearer secretKey' }\n    },\n    function(res) {\n      earthquakes = res;\n    }\n  );\n}\n\nfunction draw() {\n  // wait until the data is loaded\n  if (!earthquakes || !earthquakes.features[eqFeatureIndex]) {\n    return;\n  }\n  clear();\n\n  var feature = earthquakes.features[eqFeatureIndex];\n  var mag = feature.properties.mag;\n  var rad = mag / 11 * ((width + height) / 2);\n  fill(255, 0, 0, 100);\n  ellipse(width / 2 + random(-2, 2), height / 2 + random(-2, 2), rad, rad);\n\n  if (eqFeatureIndex >= earthquakes.features.length) {\n    eqFeatureIndex = 0;\n  } else {\n    eqFeatureIndex += 1;\n  }\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1027,
            "itemtype": "method",
            "name": "httpDo",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Request object options as documented in the\n                                   \"fetch\" API\n<a href=\"https://developer.mozilla.org/en/docs/Web/API/Fetch_API\">reference</a>",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "errorCallback",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "p5",
            "module": "IO",
            "submodule": "Input"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1183,
            "itemtype": "method",
            "name": "createWriter",
            "params": [
                {
                    "name": "name",
                    "description": "name of the file to be created",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "p5.PrintWriter"
            },
            "example": [
                "\n<div>\n<code>\ncreateButton('save')\n  .position(10, 10)\n  .mousePressed(function() {\n    var writer = createWriter('squares.txt');\n    for (var i = 0; i < 10; i++) {\n      writer.print(i * i);\n    }\n    writer.close();\n    writer.clear();\n  });\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1232,
            "description": "Writes data to the PrintWriter stream",
            "itemtype": "method",
            "name": "write",
            "params": [
                {
                    "name": "data",
                    "description": "all data to be written by the PrintWriter",
                    "type": "Array"
                }
            ],
            "example": [
                "\n<div class=\"norender notest\">\n<code>\n// creates a file called 'newFile.txt'\nvar writer = createWriter('newFile.txt');\n// write 'Hello world!'' to the file\nwriter.write(['Hello world!']);\n// close the PrintWriter and save the file\nwriter.close();\n</code>\n</div>\n<div class='norender notest'>\n<code>\n// creates a file called 'newFile2.txt'\nvar writer = createWriter('newFile2.txt');\n// write 'apples,bananas,123' to the file\nwriter.write(['apples', 'bananas', 123]);\n// close the PrintWriter and save the file\nwriter.close();\n</code>\n</div>\n<div class='norender notest'>\n<code>\n// creates a file called 'newFile3.txt'\nvar writer = createWriter('newFile3.txt');\n// write 'My name is: Teddy' to the file\nwriter.write('My name is:');\nwriter.write(' Teddy');\n// close the PrintWriter and save the file\nwriter.close();\n</code>\n</div>"
            ],
            "class": "p5.PrintWriter",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1272,
            "description": "Writes data to the PrintWriter stream, and adds a new line at the end",
            "itemtype": "method",
            "name": "print",
            "params": [
                {
                    "name": "data",
                    "description": "all data to be printed by the PrintWriter",
                    "type": "Array"
                }
            ],
            "example": [
                "\n<div class='norender notest'>\n<code>\n// creates a file called 'newFile.txt'\nvar writer = createWriter('newFile.txt');\n// creates a file containing\n//  My name is:\n//  Teddy\nwriter.print('My name is:');\nwriter.print('Teddy');\n// close the PrintWriter and save the file\nwriter.close();\n</code>\n</div>\n<div class='norender notest'>\n<code>\nvar writer;\n\nfunction setup() {\n  createCanvas(400, 400);\n  // create a PrintWriter\n  writer = createWriter('newFile.txt');\n}\n\nfunction draw() {\n  // print all mouseX and mouseY coordinates to the stream\n  writer.print([mouseX, mouseY]);\n}\n\nfunction mouseClicked() {\n  // close the PrintWriter and save the file\n  writer.close();\n}\n</code>\n</div>"
            ],
            "class": "p5.PrintWriter",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1315,
            "description": "Clears the data already written to the PrintWriter object",
            "itemtype": "method",
            "name": "clear",
            "example": [
                "\n<div class =\"norender notest\"><code>\n// create writer object\nvar writer = createWriter('newFile.txt');\nwriter.write(['clear me']);\n// clear writer object here\nwriter.clear();\n// close writer\nwriter.close();\n</code></div>\n"
            ],
            "class": "p5.PrintWriter",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1333,
            "description": "Closes the PrintWriter",
            "itemtype": "method",
            "name": "close",
            "example": [
                "\n<div class=\"norender notest\">\n<code>\n// create a file called 'newFile.txt'\nvar writer = createWriter('newFile.txt');\n// close the PrintWriter and save the file\nwriter.close();\n</code>\n</div>\n<div class='norender notest'>\n<code>\n// create a file called 'newFile2.txt'\nvar writer = createWriter('newFile2.txt');\n// write some data to the file\nwriter.write([100, 101, 102]);\n// close the PrintWriter and save the file\nwriter.close();\n</code>\n</div>"
            ],
            "class": "p5.PrintWriter",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1382,
            "description": "<p>Save an image, text, json, csv, wav, or html. Prompts download to\nthe client's computer. <b>Note that it is not recommended to call <a href=\"#/p5/save\">save()</a>\nwithin draw if it's looping, as the <a href=\"#/p5/save\">save()</a> function will open a new save\ndialog every frame.</b></p>\n<p>The default behavior is to save the canvas as an image. You can\noptionally specify a filename.\nFor example:</p>\n <pre class='language-javascript'><code>\n save();\n save('myCanvas.jpg'); // save a specific canvas with a filename\n </code></pre>\n\n<p>Alternately, the first parameter can be a pointer to a canvas\n<a href=\"#/p5.Element\">p5.Element</a>, an Array of Strings,\nan Array of JSON, a JSON object, a <a href=\"#/p5.Table\">p5.Table</a>, a <a href=\"#/p5.Image\">p5.Image</a>, or a\np5.SoundFile (requires p5.sound). The second parameter is a filename\n(including extension). The third parameter is for options specific\nto this type of object. This method will save a file that fits the\ngiven parameters. For example:</p>\n\n <pre class='language-javascript'><code>\n // Saves canvas as an image\n save('myCanvas.jpg');\n\n // Saves pImage as a png image\n var img = createImage(10, 10);\n save(img, 'my.png');\n\n // Saves canvas as an image\n var cnv = createCanvas(100, 100);\n save(cnv, 'myCanvas.jpg');\n\n // Saves p5.Renderer object as an image\n var gb = createGraphics(100, 100);\n save(gb, 'myGraphics.jpg');\n\n var myTable = new p5.Table();\n\n // Saves table as html file\n save(myTable, 'myTable.html');\n\n // Comma Separated Values\n save(myTable, 'myTable.csv');\n\n // Tab Separated Values\n save(myTable, 'myTable.tsv');\n\n var myJSON = { a: 1, b: true };\n\n // Saves pretty JSON\n save(myJSON, 'my.json');\n\n // Optimizes JSON filesize\n save(myJSON, 'my.json', true);\n\n // Saves array of strings to a text file with line breaks after each item\n var arrayOfStrings = ['a', 'b'];\n save(arrayOfStrings, 'my.txt');\n </code></pre>",
            "itemtype": "method",
            "name": "save",
            "params": [
                {
                    "name": "objectOrFilename",
                    "description": "If filename is provided, will\n                                           save canvas as an image with\n                                           either png or jpg extension\n                                           depending on the filename.\n                                           If object is provided, will\n                                           save depending on the object\n                                           and filename (see examples\n                                           above).",
                    "type": "Object|String",
                    "optional": true
                },
                {
                    "name": "filename",
                    "description": "If an object is provided as the first\n                             parameter, then the second parameter\n                             indicates the filename,\n                             and should include an appropriate\n                             file extension (see examples above).",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "Additional options depend on\n                          filetype. For example, when saving JSON,\n                          <code>true</code> indicates that the\n                          output will be optimized for filesize,\n                          rather than readability.",
                    "type": "Boolean|String",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1510,
            "description": "Writes the contents of an Array or a JSON object to a .json file.\nThe file saving process and location of the saved file will\nvary between web browsers.",
            "itemtype": "method",
            "name": "saveJSON",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Array|Object"
                },
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optimize",
                    "description": "If true, removes line breaks\n                               and spaces from the output\n                               file to optimize filesize\n                               (but not readability).",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "example": [
                "\n <div><code>\n var json = {}; // new  JSON Object\n\n json.id = 0;\n json.species = 'Panthera leo';\n json.name = 'Lion';\n\n createButton('save')\n .position(10, 10)\n .mousePressed(function() {\n   saveJSON(json, 'lion.json');\n });\n\n // saves the following to a file called \"lion.json\":\n // {\n //   \"id\": 0,\n //   \"species\": \"Panthera leo\",\n //   \"name\": \"Lion\"\n // }\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1562,
            "description": "Writes an array of Strings to a text file, one line per String.\nThe file saving process and location of the saved file will\nvary between web browsers.",
            "itemtype": "method",
            "name": "saveStrings",
            "params": [
                {
                    "name": "list",
                    "description": "string array to be written",
                    "type": "String[]"
                },
                {
                    "name": "filename",
                    "description": "filename for output",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "the filename's extension",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n <div><code>\n var words = 'apple bear cat dog';\n\n // .split() outputs an Array\n var list = split(words, ' ');\n\n createButton('save')\n .position(10, 10)\n .mousePressed(function() {\n   saveStrings(list, 'nouns.txt');\n });\n\n // Saves the following to a file called 'nouns.txt':\n //\n // apple\n // bear\n // cat\n // dog\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1624,
            "description": "Writes the contents of a <a href=\"#/p5.Table\">Table</a> object to a file. Defaults to a\ntext file with comma-separated-values ('csv') but can also\nuse tab separation ('tsv'), or generate an HTML table ('html').\nThe file saving process and location of the saved file will\nvary between web browsers.",
            "itemtype": "method",
            "name": "saveTable",
            "params": [
                {
                    "name": "Table",
                    "description": "the <a href=\"#/p5.Table\">Table</a> object to save to a file",
                    "type": "p5.Table"
                },
                {
                    "name": "filename",
                    "description": "the filename to which the Table should be saved",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "can be one of \"tsv\", \"csv\", or \"html\"",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n<div><code>\n var table;\n\n function setup() {\n table = new p5.Table();\n\n table.addColumn('id');\n table.addColumn('species');\n table.addColumn('name');\n\n var newRow = table.addRow();\n newRow.setNum('id', table.getRowCount() - 1);\n newRow.setString('species', 'Panthera leo');\n newRow.setString('name', 'Lion');\n\n // To save, un-comment next line then click 'run'\n // saveTable(table, 'new.csv');\n }\n\n // Saves the following to a file called 'new.csv':\n // id,species,name\n // 0,Panthera leo,Lion\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1750,
            "description": "Generate a blob of file data as a url to prepare for download.\nAccepts an array of data, a filename, and an extension (optional).\nThis is a private function because it does not do any formatting,\nbut it is used by <a href=\"#/p5/saveStrings\">saveStrings</a>, <a href=\"#/p5/saveJSON\">saveJSON</a>, <a href=\"#/p5/saveTable\">saveTable</a> etc.",
            "params": [
                {
                    "name": "dataToDownload",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1772,
            "description": "Forces download. Accepts a url to filedata/blob, a filename,\nand an extension (optional).\nThis is a private function because it does not do any formatting,\nbut it is used by <a href=\"#/p5/saveStrings\">saveStrings</a>, <a href=\"#/p5/saveJSON\">saveJSON</a>, <a href=\"#/p5/saveTable\">saveTable</a> etc.",
            "itemtype": "method",
            "name": "downloadFile",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "either an href generated by createObjectURL,\n                              or a Blob object containing the data",
                    "type": "String|Blob"
                },
                {
                    "name": "filename",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1819,
            "description": "Returns a file extension, or another string\nif the provided parameter has no extension.",
            "params": [
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "extension",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[fileName, fileExtension]",
                "type": "String[]"
            },
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1852,
            "description": "Returns true if the browser is Safari, false if not.\nSafari makes trouble for downloading files.",
            "return": {
                "description": "[description]",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "../p5.js/src/io/files.js",
            "line": 1864,
            "description": "Helper function, a callback for download that deletes\nan invisible anchor element from the DOM once the file\nhas been automatically downloaded.",
            "access": "private",
            "tagname": "",
            "class": "p5",
            "module": "IO",
            "submodule": "Output"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 11,
            "description": "Table Options\n<p>Generic class for handling tabular data, typically from a\nCSV, TSV, or other sort of spreadsheet file.</p>\n<p>CSV files are\n<a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">\ncomma separated values</a>, often with the data in quotes. TSV\nfiles use tabs as separators, and usually don't bother with the\nquotes.</p>\n<p>File names should end with .csv if they're comma separated.</p>\n<p>A rough \"spec\" for CSV can be found\n<a href=\"http://tools.ietf.org/html/rfc4180\">here</a>.</p>\n<p>To load files, use the <a href=\"#/p5/loadTable\">loadTable</a> method.</p>\n<p>To save tables to your computer, use the <a href=\"#/p5/save\">save</a> method\n or the <a href=\"#/p5/saveTable\">saveTable</a> method.</p>\n\nPossible options include:\n<ul>\n<li>csv - parse the table as comma-separated values\n<li>tsv - parse the table as tab-separated values\n<li>header - this table has a header (title) row\n</ul>",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 45,
            "itemtype": "property",
            "name": "columns",
            "type": "String[]",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 50,
            "itemtype": "property",
            "name": "rows",
            "type": "p5.TableRow[]",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 56,
            "description": "Use <a href=\"#/p5/addRow\">addRow()</a> to add a new row of data to a <a href=\"#/p5.Table\">p5.Table</a> object. By default,\nan empty row is created. Typically, you would store a reference to\nthe new row in a TableRow object (see newRow in the example above),\nand then set individual values using <a href=\"#/p5/set\">set()</a>.\n\nIf a <a href=\"#/p5.TableRow\">p5.TableRow</a> object is included as a parameter, then that row is\nduplicated and added to the table.",
            "itemtype": "method",
            "name": "addRow",
            "params": [
                {
                    "name": "row",
                    "description": "row to be added to the table",
                    "type": "p5.TableRow",
                    "optional": true
                }
            ],
            "return": {
                "description": "the row that was added",
                "type": "p5.TableRow"
            },
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n //add a row\n var newRow = table.addRow();\n newRow.setString('id', table.getRowCount() - 1);\n newRow.setString('species', 'Canis Lupus');\n newRow.setString('name', 'Wolf');\n\n //print the results\n for (var r = 0; r < table.getRowCount(); r++)\n   for (var c = 0; c < table.getColumnCount(); c++)\n     print(table.getString(r, c));\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 120,
            "description": "Removes a row from the table object.",
            "itemtype": "method",
            "name": "removeRow",
            "params": [
                {
                    "name": "id",
                    "description": "ID number of the row to remove",
                    "type": "Integer"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  //remove the first row\n  table.removeRow(0);\n\n  //print the results\n  for (var r = 0; r < table.getRowCount(); r++)\n    for (var c = 0; c < table.getColumnCount(); c++)\n      print(table.getString(r, c));\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 168,
            "description": "Returns a reference to the specified <a href=\"#/p5.TableRow\">p5.TableRow</a>. The reference\ncan then be used to get and set values of the selected row.",
            "itemtype": "method",
            "name": "getRow",
            "params": [
                {
                    "name": "rowID",
                    "description": "ID number of the row to get",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "<a href=\"#/p5.TableRow\">p5.TableRow</a> object",
                "type": "p5.TableRow"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  var row = table.getRow(1);\n  //print it column by column\n  //note: a row is an object, not an array\n  for (var c = 0; c < table.getColumnCount(); c++) {\n    print(row.getString(c));\n  }\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 214,
            "description": "Gets all rows from the table. Returns an array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s.",
            "itemtype": "method",
            "name": "getRows",
            "return": {
                "description": "Array of <a href=\"#/p5.TableRow\">p5.TableRow</a>s",
                "type": "p5.TableRow[]"
            },
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n var rows = table.getRows();\n\n //warning: rows is an array of objects\n for (var r = 0; r < rows.length; r++) {\n   rows[r].set('name', 'Unicorn');\n }\n\n //print the results\n for (r = 0; r < table.getRowCount(); r++)\n   for (var c = 0; c < table.getColumnCount(); c++)\n     print(table.getString(r, c));\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 263,
            "description": "Finds the first row in the Table that contains the value\nprovided, and returns a reference to that row. Even if\nmultiple rows are possible matches, only the first matching\nrow is returned. The column to search may be specified by\neither its ID or title.",
            "itemtype": "method",
            "name": "findRow",
            "params": [
                {
                    "name": "value",
                    "description": "The value to match",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "ID number or title of the\n                               column to search",
                    "type": "Integer|String"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.TableRow"
            },
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n //find the animal named zebra\n var row = table.findRow('Zebra', 'name');\n //find the corresponding species\n print(row.getString('species'));\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 328,
            "description": "Finds the rows in the Table that contain the value\nprovided, and returns references to those rows. Returns an\nArray, so for must be used to iterate through all the rows,\nas shown in the example above. The column to search may be\nspecified by either its ID or title.",
            "itemtype": "method",
            "name": "findRows",
            "params": [
                {
                    "name": "value",
                    "description": "The value to match",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "ID number or title of the\n                               column to search",
                    "type": "Integer|String"
                }
            ],
            "return": {
                "description": "An Array of TableRow objects",
                "type": "p5.TableRow[]"
            },
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n //add another goat\n var newRow = table.addRow();\n newRow.setString('id', table.getRowCount() - 1);\n newRow.setString('species', 'Scape Goat');\n newRow.setString('name', 'Goat');\n\n //find the rows containing animals named Goat\n var rows = table.findRows('Goat', 'name');\n print(rows.length + ' Goats found');\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 397,
            "description": "Finds the first row in the Table that matches the regular\nexpression provided, and returns a reference to that row.\nEven if multiple rows are possible matches, only the first\nmatching row is returned. The column to search may be\nspecified by either its ID or title.",
            "itemtype": "method",
            "name": "matchRow",
            "params": [
                {
                    "name": "regexp",
                    "description": "The regular expression to match",
                    "type": "String|RegExp"
                },
                {
                    "name": "column",
                    "description": "The column ID (number) or\n                                 title (string)",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "TableRow object",
                "type": "p5.TableRow"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  //Search using specified regex on a given column, return TableRow object\n  var mammal = table.matchRow(new RegExp('ant'), 1);\n  print(mammal.getString(1));\n  //Output \"Panthera pardus\"\n}\n</code>\n</div>\n"
            ],
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 456,
            "description": "Finds the rows in the Table that match the regular expression provided,\nand returns references to those rows. Returns an array, so for must be\nused to iterate through all the rows, as shown in the example. The\ncolumn to search may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "matchRows",
            "params": [
                {
                    "name": "regexp",
                    "description": "The regular expression to match",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "The column ID (number) or\n                                 title (string)",
                    "type": "String|Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "An Array of TableRow objects",
                "type": "p5.TableRow[]"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar table;\n\nfunction setup() {\n  table = new p5.Table();\n\n  table.addColumn('name');\n  table.addColumn('type');\n\n  var newRow = table.addRow();\n  newRow.setString('name', 'Lion');\n  newRow.setString('type', 'Mammal');\n\n  newRow = table.addRow();\n  newRow.setString('name', 'Snake');\n  newRow.setString('type', 'Reptile');\n\n  newRow = table.addRow();\n  newRow.setString('name', 'Mosquito');\n  newRow.setString('type', 'Insect');\n\n  newRow = table.addRow();\n  newRow.setString('name', 'Lizard');\n  newRow.setString('type', 'Reptile');\n\n  var rows = table.matchRows('R.*', 'type');\n  for (var i = 0; i < rows.length; i++) {\n    print(rows[i].getString('name') + ': ' + rows[i].getString('type'));\n  }\n}\n// Sketch prints:\n// Snake: Reptile\n// Lizard: Reptile\n</code>\n</div>"
            ],
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 523,
            "description": "Retrieves all values in the specified column, and returns them\nas an array. The column may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "getColumn",
            "params": [
                {
                    "name": "column",
                    "description": "String or Number of the column to return",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "Array of column values",
                "type": "Array"
            },
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n //getColumn returns an array that can be printed directly\n print(table.getColumn('species'));\n //outputs [\"Capra hircus\", \"Panthera pardus\", \"Equus zebra\"]\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 576,
            "description": "Removes all rows from a Table. While all rows are removed,\ncolumns and column titles are maintained.",
            "itemtype": "method",
            "name": "clearRows",
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n table.clearRows();\n print(table.getRowCount() + ' total rows in table');\n print(table.getColumnCount() + ' total columns in table');\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 618,
            "description": "Use <a href=\"#/p5/addColumn\">addColumn()</a> to add a new column to a <a href=\"#/p5.Table\">Table</a> object.\nTypically, you will want to specify a title, so the column\nmay be easily referenced later by name. (If no title is\nspecified, the new column's title will be null.)",
            "itemtype": "method",
            "name": "addColumn",
            "params": [
                {
                    "name": "title",
                    "description": "title of the given column",
                    "type": "String",
                    "optional": true
                }
            ],
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n table.addColumn('carnivore');\n table.set(0, 'carnivore', 'no');\n table.set(1, 'carnivore', 'yes');\n table.set(2, 'carnivore', 'no');\n\n //print the results\n for (var r = 0; r < table.getRowCount(); r++)\n   for (var c = 0; c < table.getColumnCount(); c++)\n     print(table.getString(r, c));\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 669,
            "description": "Returns the total number of columns in a Table.",
            "itemtype": "method",
            "name": "getColumnCount",
            "return": {
                "description": "Number of columns in this table",
                "type": "Integer"
            },
            "example": [
                "\n <div>\n <code>\n // given the cvs file \"blobs.csv\" in /assets directory\n // ID, Name, Flavor, Shape, Color\n // Blob1, Blobby, Sweet, Blob, Pink\n // Blob2, Saddy, Savory, Blob, Blue\n\n var table;\n\n function preload() {\n table = loadTable('assets/blobs.csv');\n }\n\n function setup() {\n createCanvas(200, 100);\n textAlign(CENTER);\n background(255);\n }\n\n function draw() {\n var numOfColumn = table.getColumnCount();\n text('There are ' + numOfColumn + ' columns in the table.', 100, 50);\n }\n </code>\n </div>"
            ],
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 705,
            "description": "Returns the total number of rows in a Table.",
            "itemtype": "method",
            "name": "getRowCount",
            "return": {
                "description": "Number of rows in this table",
                "type": "Integer"
            },
            "example": [
                "\n <div>\n <code>\n // given the cvs file \"blobs.csv\" in /assets directory\n //\n // ID, Name, Flavor, Shape, Color\n // Blob1, Blobby, Sweet, Blob, Pink\n // Blob2, Saddy, Savory, Blob, Blue\n\n var table;\n\n function preload() {\n table = loadTable('assets/blobs.csv');\n }\n\n function setup() {\n createCanvas(200, 100);\n textAlign(CENTER);\n background(255);\n }\n\n function draw() {\n text('There are ' + table.getRowCount() + ' rows in the table.', 100, 50);\n }\n </code>\n </div>"
            ],
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 741,
            "description": "<p>Removes any of the specified characters (or \"tokens\").</p>\n\n<p>If no column is specified, then the values in all columns and\nrows are processed. A specific column may be referenced by\neither its ID or title.</p>",
            "itemtype": "method",
            "name": "removeTokens",
            "params": [
                {
                    "name": "chars",
                    "description": "String listing characters to be removed",
                    "type": "String"
                },
                {
                    "name": "column",
                    "description": "Column ID (number)\n                                 or name (string)",
                    "type": "String|Integer",
                    "optional": true
                }
            ],
            "example": [
                "\n <div class=\"norender\"><code>\n function setup() {\n var table = new p5.Table();\n\n table.addColumn('name');\n table.addColumn('type');\n\n var newRow = table.addRow();\n newRow.setString('name', '   $Lion  ,');\n newRow.setString('type', ',,,Mammal');\n\n newRow = table.addRow();\n newRow.setString('name', '$Snake  ');\n newRow.setString('type', ',,,Reptile');\n\n table.removeTokens(',$ ');\n print(table.getArray());\n }\n\n // prints:\n //  0  \"Lion\"   \"Mamal\"\n //  1  \"Snake\"  \"Reptile\"\n </code></div>"
            ],
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 815,
            "description": "Trims leading and trailing whitespace, such as spaces and tabs,\nfrom String table values. If no column is specified, then the\nvalues in all columns and rows are trimmed. A specific column\nmay be referenced by either its ID or title.",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "column",
                    "description": "Column ID (number)\n                                 or name (string)",
                    "type": "String|Integer",
                    "optional": true
                }
            ],
            "example": [
                "\n <div class=\"norender\"><code>\n function setup() {\n var table = new p5.Table();\n\n table.addColumn('name');\n table.addColumn('type');\n\n var newRow = table.addRow();\n newRow.setString('name', '   Lion  ,');\n newRow.setString('type', ' Mammal  ');\n\n newRow = table.addRow();\n newRow.setString('name', '  Snake  ');\n newRow.setString('type', '  Reptile  ');\n\n table.trim();\n print(table.getArray());\n }\n\n // prints:\n //  0  \"Lion\"   \"Mamal\"\n //  1  \"Snake\"  \"Reptile\"\n </code></div>"
            ],
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 879,
            "description": "Use <a href=\"#/p5/removeColumn\">removeColumn()</a> to remove an existing column from a Table\nobject. The column to be removed may be identified by either\nits title (a String) or its index value (an int).\nremoveColumn(0) would remove the first column, removeColumn(1)\nwould remove the second column, and so on.",
            "itemtype": "method",
            "name": "removeColumn",
            "params": [
                {
                    "name": "column",
                    "description": "columnName (string) or ID (number)",
                    "type": "String|Integer"
                }
            ],
            "example": [
                "\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n table.removeColumn('id');\n print(table.getColumnCount());\n }\n </code>\n </div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 944,
            "description": "Stores a value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified\nby either its ID or title.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Integer"
                },
                {
                    "name": "column",
                    "description": "column ID (Number)\n                              or title (String)",
                    "type": "String|Integer"
                },
                {
                    "name": "value",
                    "description": "value to assign",
                    "type": "String|Number"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  table.set(0, 'species', 'Canis Lupus');\n  table.set(0, 'name', 'Wolf');\n\n  //print the results\n  for (var r = 0; r < table.getRowCount(); r++)\n    for (var c = 0; c < table.getColumnCount(); c++)\n      print(table.getString(r, c));\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 994,
            "description": "Stores a Float value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified\nby either its ID or title.",
            "itemtype": "method",
            "name": "setNum",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Integer"
                },
                {
                    "name": "column",
                    "description": "column ID (Number)\n                              or title (String)",
                    "type": "String|Integer"
                },
                {
                    "name": "value",
                    "description": "value to assign",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  table.setNum(1, 'id', 1);\n\n  print(table.getColumn(0));\n  //[\"0\", 1, \"2\"]\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 1040,
            "description": "Stores a String value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified\nby either its ID or title.",
            "itemtype": "method",
            "name": "setString",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Integer"
                },
                {
                    "name": "column",
                    "description": "column ID (Number)\n                              or title (String)",
                    "type": "String|Integer"
                },
                {
                    "name": "value",
                    "description": "value to assign",
                    "type": "String"
                }
            ],
            "example": [
                "\n<div class=\"norender\"><code>\n// Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  //add a row\n  var newRow = table.addRow();\n  newRow.setString('id', table.getRowCount() - 1);\n  newRow.setString('species', 'Canis Lupus');\n  newRow.setString('name', 'Wolf');\n\n  print(table.getArray());\n}\n</code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 1085,
            "description": "Retrieves a value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by\neither its ID or title.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Integer"
                },
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                  ID (number)",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  print(table.get(0, 1));\n  //Capra hircus\n  print(table.get(0, 'species'));\n  //Capra hircus\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 1132,
            "description": "Retrieves a Float value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by\neither its ID or title.",
            "itemtype": "method",
            "name": "getNum",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Integer"
                },
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                  ID (number)",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  print(table.getNum(1, 0) + 100);\n  //id 1 + 100 = 101\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 1177,
            "description": "Retrieves a String value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by\neither its ID or title.",
            "itemtype": "method",
            "name": "getString",
            "params": [
                {
                    "name": "row",
                    "description": "row ID",
                    "type": "Integer"
                },
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                  ID (number)",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  // table is comma separated value \"CSV\"\n  // and has specifiying header for column labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  print(table.getString(0, 0)); // 0\n  print(table.getString(0, 1)); // Capra hircus\n  print(table.getString(0, 2)); // Goat\n  print(table.getString(1, 0)); // 1\n  print(table.getString(1, 1)); // Panthera pardus\n  print(table.getString(1, 2)); // Leopard\n  print(table.getString(2, 0)); // 2\n  print(table.getString(2, 1)); // Equus zebra\n  print(table.getString(2, 2)); // Zebra\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 1230,
            "description": "Retrieves all table data and returns as an object. If a column name is\npassed in, each row object will be stored with that attribute as its\ntitle.",
            "itemtype": "method",
            "name": "getObject",
            "params": [
                {
                    "name": "headerColumn",
                    "description": "Name of the column which should be used to\n                             title each row object (optional)",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  var tableObject = table.getObject();\n\n  print(tableObject);\n  //outputs an object\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.Table.js",
            "line": 1296,
            "description": "Retrieves all table data and returns it as a multidimensional array.",
            "itemtype": "method",
            "name": "getArray",
            "return": {
                "description": "",
                "type": "Array"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leoperd\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  // table is comma separated value \"CSV\"\n  // and has specifiying header for column labels\n  table = loadTable('assets/mammals.csv', 'csv', 'header');\n}\n\nfunction setup() {\n  var tableArray = table.getArray();\n  for (var i = 0; i < tableArray.length; i++) {\n    print(tableArray[i]);\n  }\n}\n</code>\n</div>"
            ],
            "alt": "no image displayed",
            "class": "p5.Table",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.TableRow.js",
            "line": 42,
            "description": "Stores a value in the TableRow's specified column.\nThe column may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "column",
                    "description": "Column ID (Number)\n                              or Title (String)",
                    "type": "String|Integer"
                },
                {
                    "name": "value",
                    "description": "The value to be stored",
                    "type": "String|Number"
                }
            ],
            "example": [
                "\n <div class=\"norender\"><code>\n // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n var rows = table.getRows();\n for (var r = 0; r < rows.length; r++) {\n   rows[r].set('name', 'Unicorn');\n }\n\n //print the results\n print(table.getArray());\n }\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5.TableRow",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.TableRow.js",
            "line": 106,
            "description": "Stores a Float value in the TableRow's specified column.\nThe column may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "setNum",
            "params": [
                {
                    "name": "column",
                    "description": "Column ID (Number)\n                              or Title (String)",
                    "type": "String|Integer"
                },
                {
                    "name": "value",
                    "description": "The value to be stored\n                              as a Float",
                    "type": "Number|String"
                }
            ],
            "example": [
                "\n <div class=\"norender\"><code>\n // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n var rows = table.getRows();\n for (var r = 0; r < rows.length; r++) {\n   rows[r].setNum('id', r + 10);\n }\n\n print(table.getArray());\n }\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5.TableRow",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.TableRow.js",
            "line": 150,
            "description": "Stores a String value in the TableRow's specified column.\nThe column may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "setString",
            "params": [
                {
                    "name": "column",
                    "description": "Column ID (Number)\n                              or Title (String)",
                    "type": "String|Integer"
                },
                {
                    "name": "value",
                    "description": "The value to be stored\n                              as a String",
                    "type": "String|Number|Boolean|Object"
                }
            ],
            "example": [
                "\n <div class=\"norender\"><code>\n // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n var rows = table.getRows();\n for (var r = 0; r < rows.length; r++) {\n   var name = rows[r].getString('name');\n   rows[r].setString('name', 'A ' + name + ' named George');\n }\n\n print(table.getArray());\n }\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5.TableRow",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.TableRow.js",
            "line": 195,
            "description": "Retrieves a value from the TableRow's specified column.\nThe column may be specified by either its ID or title.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                 ID (number)",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "example": [
                "\n <div class=\"norender\"><code>\n // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n var names = [];\n var rows = table.getRows();\n for (var r = 0; r < rows.length; r++) {\n   names.push(rows[r].get('name'));\n }\n\n print(names);\n }\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5.TableRow",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.TableRow.js",
            "line": 243,
            "description": "Retrieves a Float value from the TableRow's specified\ncolumn. The column may be specified by either its ID or\ntitle.",
            "itemtype": "method",
            "name": "getNum",
            "params": [
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                 ID (number)",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "Float Floating point number",
                "type": "Number"
            },
            "example": [
                "\n <div class=\"norender\"><code>\n // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n var rows = table.getRows();\n var minId = Infinity;\n var maxId = -Infinity;\n for (var r = 0; r < rows.length; r++) {\n   var id = rows[r].getNum('id');\n   minId = min(minId, id);\n   maxId = min(maxId, id);\n }\n print('minimum id = ' + minId + ', maximum id = ' + maxId);\n }\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5.TableRow",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.TableRow.js",
            "line": 299,
            "description": "Retrieves an String value from the TableRow's specified\ncolumn. The column may be specified by either its ID or\ntitle.",
            "itemtype": "method",
            "name": "getString",
            "params": [
                {
                    "name": "column",
                    "description": "columnName (string) or\n                                 ID (number)",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "String",
                "type": "String"
            },
            "example": [
                "\n <div class=\"norender\"><code>\n // Given the CSV file \"mammals.csv\" in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable('assets/mammals.csv', 'csv', 'header');\n }\n\n function setup() {\n var rows = table.getRows();\n var longest = '';\n for (var r = 0; r < rows.length; r++) {\n   var species = rows[r].getString('species');\n   if (longest.length < species.length) {\n     longest = species;\n   }\n }\n\n print('longest: ' + longest);\n }\n </code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5.TableRow",
            "module": "IO",
            "submodule": "Table"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 65,
            "description": "Gets a copy of the element's parent. Returns the parent as another\n<a href=\"#/p5.XML\">p5.XML</a> object.",
            "itemtype": "method",
            "name": "getParent",
            "return": {
                "description": "element parent",
                "type": "p5.XML"
            },
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  var children = xml.getChildren('animal');\n  var parent = children[1].getParent();\n  print(parent.getName());\n}\n\n// Sketch prints:\n// mammals\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 103,
            "description": "Gets the element's full name, which is returned as a String.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "the name of the node",
                "type": "String"
            },
            "example": [
                "&lt;animal\n <div class='norender'><code>\n // The following short XML file called \"mammals.xml\" is parsed\n // in the code below.\n //\n // <?xml version=\"1.0\"?>\n // &lt;mammals&gt;\n //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n // &lt;/mammals&gt;\n\n var xml;\n\n function preload() {\n xml = loadXML('assets/mammals.xml');\n }\n\n function setup() {\n print(xml.getName());\n }\n\n // Sketch prints:\n // mammals\n </code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 138,
            "description": "Sets the element's name, which is specified as a String.",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "the",
                    "description": "new name of the node",
                    "type": "String"
                }
            ],
            "example": [
                "&lt;animal\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  print(xml.getName());\n  xml.setName('fish');\n  print(xml.getName());\n}\n\n// Sketch prints:\n// mammals\n// fish\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 184,
            "description": "Checks whether or not the element has any children, and returns the result\nas a boolean.",
            "itemtype": "method",
            "name": "hasChildren",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "&lt;animal\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  print(xml.hasChildren());\n}\n\n// Sketch prints:\n// true\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 220,
            "description": "Get the names of all of the element's children, and returns the names as an\narray of Strings. This is the same as looping through and calling <a href=\"#/p5.XML/getName\">getName()</a>\non each child element individually.",
            "itemtype": "method",
            "name": "listChildren",
            "return": {
                "description": "names of the children of the element",
                "type": "String[]"
            },
            "example": [
                "&lt;animal\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  print(xml.listChildren());\n}\n\n// Sketch prints:\n// [\"animal\", \"animal\", \"animal\"]\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 261,
            "description": "Returns all of the element's children as an array of <a href=\"#/p5.XML\">p5.XML</a> objects. When\nthe name parameter is specified, then it will return all children that match\nthat name.",
            "itemtype": "method",
            "name": "getChildren",
            "params": [
                {
                    "name": "name",
                    "description": "element name",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "children of the element",
                "type": "p5.XML[]"
            },
            "example": [
                "&lt;animal\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  var animals = xml.getChildren('animal');\n\n  for (var i = 0; i < animals.length; i++) {\n    print(animals[i].getContent());\n  }\n}\n\n// Sketch prints:\n// \"Goat\"\n// \"Leopard\"\n// \"Zebra\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 317,
            "description": "Returns the first of the element's children that matches the name parameter\nor the child of the given index.It returns undefined if no matching\nchild is found.",
            "itemtype": "method",
            "name": "getChild",
            "params": [
                {
                    "name": "name",
                    "description": "element name or index",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "p5.XML"
            },
            "example": [
                "&lt;animal\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  var firstChild = xml.getChild('animal');\n  print(firstChild.getContent());\n}\n\n// Sketch prints:\n// \"Goat\"\n</code></div>\n<div class='norender'><code>\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  var secondChild = xml.getChild(1);\n  print(secondChild.getContent());\n}\n\n// Sketch prints:\n// \"Leopard\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 378,
            "description": "Appends a new child to the element. The child can be specified with\neither a String, which will be used as the new tag's name, or as a\nreference to an existing <a href=\"#/p5.XML\">p5.XML</a> object.\nA reference to the newly created child is returned as an <a href=\"#/p5.XML\">p5.XML</a> object.",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "node",
                    "description": "a <a href=\"#/p5.XML\">p5.XML</a> Object which will be the child to be added",
                    "type": "p5.XML"
                }
            ],
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  var child = new p5.XML();\n  child.setName('animal');\n  child.setAttribute('id', '3');\n  child.setAttribute('species', 'Ornithorhynchus anatinus');\n  child.setContent('Platypus');\n  xml.addChild(child);\n\n  var animals = xml.getChildren('animal');\n  print(animals[animals.length - 1].getContent());\n}\n\n// Sketch prints:\n// \"Goat\"\n// \"Leopard\"\n// \"Zebra\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 430,
            "description": "Removes the element specified by name or index.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "name",
                    "description": "element name or index",
                    "type": "String|Integer"
                }
            ],
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  xml.removeChild('animal');\n  var children = xml.getChildren();\n  for (var i = 0; i < children.length; i++) {\n    print(children[i].getContent());\n  }\n}\n\n// Sketch prints:\n// \"Leopard\"\n// \"Zebra\"\n</code></div>\n<div class='norender'><code>\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  xml.removeChild(1);\n  var children = xml.getChildren();\n  for (var i = 0; i < children.length; i++) {\n    print(children[i].getContent());\n  }\n}\n\n// Sketch prints:\n// \"Goat\"\n// \"Zebra\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 502,
            "description": "Counts the specified element's number of attributes, returned as an Number.",
            "itemtype": "method",
            "name": "getAttributeCount",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  var firstChild = xml.getChild('animal');\n  print(firstChild.getAttributeCount());\n}\n\n// Sketch prints:\n// 2\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 538,
            "description": "Gets all of the specified element's attributes, and returns them as an\narray of Strings.",
            "itemtype": "method",
            "name": "listAttributes",
            "return": {
                "description": "an array of strings containing the names of attributes",
                "type": "String[]"
            },
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  var firstChild = xml.getChild('animal');\n  print(firstChild.listAttributes());\n}\n\n// Sketch prints:\n// [\"id\", \"species\"]\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 580,
            "description": "Checks whether or not an element has the specified attribute.",
            "itemtype": "method",
            "name": "hasAttribute",
            "params": [
                {
                    "name": "the",
                    "description": "attribute to be checked",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if attribute found else false",
                "type": "Boolean"
            },
            "example": [
                "\n <div class='norender'><code>\n // The following short XML file called \"mammals.xml\" is parsed\n // in the code below.\n //\n // <?xml version=\"1.0\"?>\n // &lt;mammals&gt;\n //   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n //   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n //   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n // &lt;/mammals&gt;\n\n var xml;\n\n function preload() {\n xml = loadXML('assets/mammals.xml');\n }\n\n function setup() {\n var firstChild = xml.getChild('animal');\n print(firstChild.hasAttribute('species'));\n print(firstChild.hasAttribute('color'));\n }\n\n // Sketch prints:\n // true\n // false\n </code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 624,
            "description": "Returns an attribute value of the element as an Number. If the defaultValue\nparameter is specified and the attribute doesn't exist, then defaultValue\nis returned. If no defaultValue is specified and the attribute doesn't\nexist, the value 0 is returned.",
            "itemtype": "method",
            "name": "getNum",
            "params": [
                {
                    "name": "name",
                    "description": "the non-null full name of the attribute",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "the default value of the attribute",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  var firstChild = xml.getChild('animal');\n  print(firstChild.getNum('id'));\n}\n\n// Sketch prints:\n// 0\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 670,
            "description": "Returns an attribute value of the element as an String. If the defaultValue\nparameter is specified and the attribute doesn't exist, then defaultValue\nis returned. If no defaultValue is specified and the attribute doesn't\nexist, null is returned.",
            "itemtype": "method",
            "name": "getString",
            "params": [
                {
                    "name": "name",
                    "description": "the non-null full name of the attribute",
                    "type": "String"
                },
                {
                    "name": "defaultValue",
                    "description": "the default value of the attribute",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  var firstChild = xml.getChild('animal');\n  print(firstChild.getString('species'));\n}\n\n// Sketch prints:\n// \"Capra hircus\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 716,
            "description": "Sets the content of an element's attribute. The first parameter specifies\nthe attribute name, while the second specifies the new content.",
            "itemtype": "method",
            "name": "setAttribute",
            "params": [
                {
                    "name": "name",
                    "description": "the full name of the attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value of the attribute",
                    "type": "Number|String|Boolean"
                }
            ],
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  var firstChild = xml.getChild('animal');\n  print(firstChild.getString('species'));\n  firstChild.setAttribute('species', 'Jamides zebra');\n  print(firstChild.getString('species'));\n}\n\n// Sketch prints:\n// \"Capra hircus\"\n// \"Jamides zebra\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 757,
            "description": "Returns the content of an element. If there is no such content,\ndefaultValue is returned if specified, otherwise null is returned.",
            "itemtype": "method",
            "name": "getContent",
            "params": [
                {
                    "name": "defaultValue",
                    "description": "value returned if no content is found",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  var firstChild = xml.getChild('animal');\n  print(firstChild.getContent());\n}\n\n// Sketch prints:\n// \"Goat\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 798,
            "description": "Sets the element's content.",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "text",
                    "description": "the new content",
                    "type": "String"
                }
            ],
            "example": [
                "\n<div class='norender'><code>\n// The following short XML file called \"mammals.xml\" is parsed\n// in the code below.\n//\n// <?xml version=\"1.0\"?>\n// &lt;mammals&gt;\n//   &lt;animal id=\"0\" species=\"Capra hircus\">Goat&lt;/animal&gt;\n//   &lt;animal id=\"1\" species=\"Panthera pardus\">Leopard&lt;/animal&gt;\n//   &lt;animal id=\"2\" species=\"Equus zebra\">Zebra&lt;/animal&gt;\n// &lt;/mammals&gt;\n\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  var firstChild = xml.getChild('animal');\n  print(firstChild.getContent());\n  firstChild.setContent('Mountain Goat');\n  print(firstChild.getContent());\n}\n\n// Sketch prints:\n// \"Goat\"\n// \"Mountain Goat\"\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/io/p5.XML.js",
            "line": 839,
            "description": "Serializes the element into a string. This function is useful for preparing\nthe content to be sent over a http request or saved to file.",
            "itemtype": "method",
            "name": "serialize",
            "return": {
                "description": "Serialized string of the element",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\nvar xml;\n\nfunction preload() {\n  xml = loadXML('assets/mammals.xml');\n}\n\nfunction setup() {\n  print(xml.serialize());\n}\n\n// Sketch prints:\n// <mammals>\n//   <animal id=\"0\" species=\"Capra hircus\">Goat</animal>\n//   <animal id=\"1\" species=\"Panthera pardus\">Leopard</animal>\n//   <animal id=\"2\" species=\"Equus zebra\">Zebra</animal>\n// </mammals>\n</code></div>"
            ],
            "class": "p5.XML",
            "module": "IO",
            "submodule": "XML"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 12,
            "description": "Calculates the absolute value (magnitude) of a number. Maps to Math.abs().\nThe absolute value of a number is always positive.",
            "itemtype": "method",
            "name": "abs",
            "params": [
                {
                    "name": "n",
                    "description": "number to compute",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "absolute value of given number",
                "type": "Number"
            },
            "example": [
                "\n<div class = \"norender\"><code>\nfunction setup() {\n  var x = -3;\n  var y = abs(x);\n\n  print(x); // -3\n  print(y); // 3\n}\n</code></div>"
            ],
            "alt": "no image displayed",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 36,
            "description": "Calculates the closest int value that is greater than or equal to the\nvalue of the parameter. Maps to Math.ceil(). For example, ceil(9.03)\nreturns the value 10.",
            "itemtype": "method",
            "name": "ceil",
            "params": [
                {
                    "name": "n",
                    "description": "number to round up",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "rounded up number",
                "type": "Integer"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n  // map, mouseX between 0 and 5.\n  var ax = map(mouseX, 0, 100, 0, 5);\n  var ay = 66;\n\n  //Get the ceiling of the mapped number.\n  var bx = ceil(map(mouseX, 0, 100, 0, 5));\n  var by = 33;\n\n  // Multiply the mapped numbers by 20 to more easily\n  // see the changes.\n  stroke(0);\n  fill(0);\n  line(0, ay, ax * 20, ay);\n  line(0, by, bx * 20, by);\n\n  // Reformat the float returned by map and draw it.\n  noStroke();\n  text(nfc(ax, 2), ax, ay - 5);\n  text(nfc(bx, 1), bx, by - 5);\n}\n</code></div>"
            ],
            "alt": "2 horizontal lines & number sets. increase with mouse x. bottom to 2 decimals",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 76,
            "description": "Constrains a value between a minimum and maximum value.",
            "itemtype": "method",
            "name": "constrain",
            "params": [
                {
                    "name": "n",
                    "description": "number to constrain",
                    "type": "Number"
                },
                {
                    "name": "low",
                    "description": "minimum limit",
                    "type": "Number"
                },
                {
                    "name": "high",
                    "description": "maximum limit",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "constrained number",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n\n  var leftWall = 25;\n  var rightWall = 75;\n\n  // xm is just the mouseX, while\n  // xc is the mouseX, but constrained\n  // between the leftWall and rightWall!\n  var xm = mouseX;\n  var xc = constrain(mouseX, leftWall, rightWall);\n\n  // Draw the walls.\n  stroke(150);\n  line(leftWall, 0, leftWall, height);\n  line(rightWall, 0, rightWall, height);\n\n  // Draw xm and xc as circles.\n  noStroke();\n  fill(150);\n  ellipse(xm, 33, 9, 9); // Not Constrained\n  fill(0);\n  ellipse(xc, 66, 9, 9); // Constrained\n}\n</code></div>"
            ],
            "alt": "2 vertical lines. 2 ellipses move with mouse X 1 does not move passed lines",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 121,
            "description": "Calculates the distance between two points.",
            "itemtype": "method",
            "name": "dist",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "distance between the two points",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\n// Move your mouse inside the canvas to see the\n// change in distance between two points!\nfunction draw() {\n  background(200);\n  fill(0);\n\n  var x1 = 10;\n  var y1 = 90;\n  var x2 = mouseX;\n  var y2 = mouseY;\n\n  line(x1, y1, x2, y2);\n  ellipse(x1, y1, 7, 7);\n  ellipse(x2, y2, 7, 7);\n\n  // d is the length of the line\n  // the distance from point 1 to point 2.\n  var d = int(dist(x1, y1, x2, y2));\n\n  // Let's write d along the line we are drawing!\n  push();\n  translate((x1 + x2) / 2, (y1 + y2) / 2);\n  rotate(atan2(y2 - y1, x2 - x1));\n  text(nfc(d, 1), 0, -5);\n  pop();\n  // Fancy!\n}\n</code></div>"
            ],
            "alt": "2 ellipses joined by line. 1 ellipse moves with mouse X&Y. Distance displayed.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 165,
            "itemtype": "method",
            "name": "dist",
            "params": [
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z1",
                    "description": "z-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z2",
                    "description": "z-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "distance between the two points",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 190,
            "description": "Returns Euler's number e (2.71828...) raised to the power of the n\nparameter. Maps to Math.exp().",
            "itemtype": "method",
            "name": "exp",
            "params": [
                {
                    "name": "n",
                    "description": "exponent to raise",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "e^n",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n\n  // Compute the exp() function with a value between 0 and 2\n  var xValue = map(mouseX, 0, width, 0, 2);\n  var yValue = exp(xValue);\n\n  var y = map(yValue, 0, 8, height, 0);\n\n  var legend = 'exp (' + nfc(xValue, 3) + ')\\n= ' + nf(yValue, 1, 4);\n  stroke(150);\n  line(mouseX, y, mouseX, height);\n  fill(0);\n  text(legend, 5, 15);\n  noStroke();\n  ellipse(mouseX, y, 7, 7);\n\n  // Draw the exp(x) curve,\n  // over the domain of x from 0 to 2\n  noFill();\n  stroke(0);\n  beginShape();\n  for (var x = 0; x < width; x++) {\n    xValue = map(x, 0, width, 0, 2);\n    yValue = exp(xValue);\n    y = map(yValue, 0, 8, height, 0);\n    vertex(x, y);\n  }\n\n  endShape();\n  line(0, 0, 0, height);\n  line(0, height - 1, width, height - 1);\n}\n</code></div>"
            ],
            "alt": "ellipse moves along a curve with mouse x. e^n displayed.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 240,
            "description": "Calculates the closest int value that is less than or equal to the\nvalue of the parameter. Maps to Math.floor().",
            "itemtype": "method",
            "name": "floor",
            "params": [
                {
                    "name": "n",
                    "description": "number to round down",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "rounded down number",
                "type": "Integer"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n  //map, mouseX between 0 and 5.\n  var ax = map(mouseX, 0, 100, 0, 5);\n  var ay = 66;\n\n  //Get the floor of the mapped number.\n  var bx = floor(map(mouseX, 0, 100, 0, 5));\n  var by = 33;\n\n  // Multiply the mapped numbers by 20 to more easily\n  // see the changes.\n  stroke(0);\n  fill(0);\n  line(0, ay, ax * 20, ay);\n  line(0, by, bx * 20, by);\n\n  // Reformat the float returned by map and draw it.\n  noStroke();\n  text(nfc(ax, 2), ax, ay - 5);\n  text(nfc(bx, 1), bx, by - 5);\n}\n</code></div>"
            ],
            "alt": "2 horizontal lines & number sets. increase with mouse x. bottom to 2 decimals",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 279,
            "description": "Calculates a number between two numbers at a specific increment. The amt\nparameter is the amount to interpolate between the two values where 0.0\nequal to the first point, 0.1 is very near the first point, 0.5 is\nhalf-way in between, etc. The lerp function is convenient for creating\nmotion along a straight path and for drawing dotted lines.",
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "start",
                    "description": "first value",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "second value",
                    "type": "Number"
                },
                {
                    "name": "amt",
                    "description": "number between 0.0 and 1.0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "lerped value",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  background(200);\n  var a = 20;\n  var b = 80;\n  var c = lerp(a, b, 0.2);\n  var d = lerp(a, b, 0.5);\n  var e = lerp(a, b, 0.8);\n\n  var y = 50;\n\n  strokeWeight(5);\n  stroke(0); // Draw the original points in black\n  point(a, y);\n  point(b, y);\n\n  stroke(100); // Draw the lerp points in gray\n  point(c, y);\n  point(d, y);\n  point(e, y);\n}\n</code></div>"
            ],
            "alt": "5 points horizontally staggered mid-canvas. mid 3 are grey, outer black",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 324,
            "description": "Calculates the natural logarithm (the base-e logarithm) of a number. This\nfunction expects the n parameter to be a value greater than 0.0. Maps to\nMath.log().",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "n",
                    "description": "number greater than 0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "natural logarithm of n",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n  var maxX = 2.8;\n  var maxY = 1.5;\n\n  // Compute the natural log of a value between 0 and maxX\n  var xValue = map(mouseX, 0, width, 0, maxX);\n  if (xValue > 0) {\n   // Cannot take the log of a negative number.\n    var yValue = log(xValue);\n    var y = map(yValue, -maxY, maxY, height, 0);\n\n    // Display the calculation occurring.\n    var legend = 'log(' + nf(xValue, 1, 2) + ')\\n= ' + nf(yValue, 1, 3);\n    stroke(150);\n    line(mouseX, y, mouseX, height);\n    fill(0);\n    text(legend, 5, 15);\n    noStroke();\n    ellipse(mouseX, y, 7, 7);\n  }\n\n  // Draw the log(x) curve,\n  // over the domain of x from 0 to maxX\n  noFill();\n  stroke(0);\n  beginShape();\n  for (var x = 0; x < width; x++) {\n    xValue = map(x, 0, width, 0, maxX);\n    yValue = log(xValue);\n    y = map(yValue, -maxY, maxY, height, 0);\n    vertex(x, y);\n  }\n  endShape();\n  line(0, 0, 0, height);\n  line(0, height / 2, width, height / 2);\n}\n</code></div>"
            ],
            "alt": "ellipse moves along a curve with mouse x. natural logarithm of n displayed.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 379,
            "description": "Calculates the magnitude (or length) of a vector. A vector is a direction\nin space commonly used in computer graphics and linear algebra. Because it\nhas no \"start\" position, the magnitude of a vector can be thought of as\nthe distance from the coordinate 0,0 to its x,y value. Therefore, <a href=\"#/p5/mag\">mag()</a> is\na shortcut for writing dist(0, 0, x, y).",
            "itemtype": "method",
            "name": "mag",
            "params": [
                {
                    "name": "a",
                    "description": "first value",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "second value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "magnitude of vector from (0,0) to (a,b)",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  var x1 = 20;\n  var x2 = 80;\n  var y1 = 30;\n  var y2 = 70;\n\n  line(0, 0, x1, y1);\n  print(mag(x1, y1)); // Prints \"36.05551275463989\"\n  line(0, 0, x2, y1);\n  print(mag(x2, y1)); // Prints \"85.44003745317531\"\n  line(0, 0, x1, y2);\n  print(mag(x1, y2)); // Prints \"72.80109889280519\"\n  line(0, 0, x2, y2);\n  print(mag(x2, y2)); // Prints \"106.3014581273465\"\n}\n</code></div>"
            ],
            "alt": "4 lines of different length radiate from top left of canvas.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 418,
            "description": "Re-maps a number from one range to another.\n<br><br>\nIn the first example above, the number 25 is converted from a value in the\nrange of 0 to 100 into a value that ranges from the left edge of the\nwindow (0) to the right edge (width).",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "value",
                    "description": "the incoming value to be converted",
                    "type": "Number"
                },
                {
                    "name": "start1",
                    "description": "lower bound of the value's current range",
                    "type": "Number"
                },
                {
                    "name": "stop1",
                    "description": "upper bound of the value's current range",
                    "type": "Number"
                },
                {
                    "name": "start2",
                    "description": "lower bound of the value's target range",
                    "type": "Number"
                },
                {
                    "name": "stop2",
                    "description": "upper bound of the value's target range",
                    "type": "Number"
                },
                {
                    "name": "withinBounds",
                    "description": "constrain the value to the newly mapped range",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "remapped number",
                "type": "Number"
            },
            "example": [
                "\n  <div><code>\nvar value = 25;\nvar m = map(value, 0, 100, 0, width);\nellipse(m, 50, 10, 10);\n</code></div>\n\n  <div><code>\nfunction setup() {\n  noStroke();\n}\n\nfunction draw() {\n  background(204);\n  var x1 = map(mouseX, 0, width, 25, 75);\n  ellipse(x1, 25, 25, 25);\n  //This ellipse is constrained to the 0-100 range\n  //after setting withinBounds to true\n  var x2 = map(mouseX, 0, width, 0, 100, true);\n  ellipse(x2, 75, 25, 25);\n}\n</code></div>"
            ],
            "alt": "10 by 10 white ellipse with in mid left canvas\n2 25 by 25 white ellipses move with mouse x. Bottom has more range from X",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 474,
            "description": "Determines the largest value in a sequence of numbers, and then returns\nthat value. <a href=\"#/p5/max\">max()</a> accepts any number of Number parameters, or an Array\nof any length.",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "n0",
                    "description": "Number to compare",
                    "type": "Number"
                },
                {
                    "name": "n1",
                    "description": "Number to compare",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "maximum Number",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  // Change the elements in the array and run the sketch\n  // to show how max() works!\n  var numArray = [2, 1, 5, 4, 8, 9];\n  fill(0);\n  noStroke();\n  text('Array Elements', 0, 10);\n  // Draw all numbers in the array\n  var spacing = 15;\n  var elemsY = 25;\n  for (var i = 0; i < numArray.length; i++) {\n    text(numArray[i], i * spacing, elemsY);\n  }\n  var maxX = 33;\n  var maxY = 80;\n  // Draw the Maximum value in the array.\n  textSize(32);\n  text(max(numArray), maxX, maxY);\n}\n</code></div>"
            ],
            "alt": "Small text at top reads: Array Elements 2 1 5 4 8 9. Large text at center: 9",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 510,
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "nums",
                    "description": "Numbers to compare",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 524,
            "description": "Determines the smallest value in a sequence of numbers, and then returns\nthat value. <a href=\"#/p5/min\">min()</a> accepts any number of Number parameters, or an Array\nof any length.",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "n0",
                    "description": "Number to compare",
                    "type": "Number"
                },
                {
                    "name": "n1",
                    "description": "Number to compare",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "minimum Number",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  // Change the elements in the array and run the sketch\n  // to show how min() works!\n  var numArray = [2, 1, 5, 4, 8, 9];\n  fill(0);\n  noStroke();\n  text('Array Elements', 0, 10);\n  // Draw all numbers in the array\n  var spacing = 15;\n  var elemsY = 25;\n  for (var i = 0; i < numArray.length; i++) {\n    text(numArray[i], i * spacing, elemsY);\n  }\n  var maxX = 33;\n  var maxY = 80;\n  // Draw the Minimum value in the array.\n  textSize(32);\n  text(min(numArray), maxX, maxY);\n}\n</code></div>"
            ],
            "alt": "Small text at top reads: Array Elements 2 1 5 4 8 9. Large text at center: 1",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 560,
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "nums",
                    "description": "Numbers to compare",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 574,
            "description": "Normalizes a number from another range into a value between 0 and 1.\nIdentical to map(value, low, high, 0, 1).\nNumbers outside of the range are not clamped to 0 and 1, because\nout-of-range values are often intentional and useful. (See the second\nexample above.)",
            "itemtype": "method",
            "name": "norm",
            "params": [
                {
                    "name": "value",
                    "description": "incoming value to be normalized",
                    "type": "Number"
                },
                {
                    "name": "start",
                    "description": "lower bound of the value's current range",
                    "type": "Number"
                },
                {
                    "name": "stop",
                    "description": "upper bound of the value's current range",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "normalized number",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n  var currentNum = mouseX;\n  var lowerBound = 0;\n  var upperBound = width; //100;\n  var normalized = norm(currentNum, lowerBound, upperBound);\n  var lineY = 70;\n  line(0, lineY, width, lineY);\n  //Draw an ellipse mapped to the non-normalized value.\n  noStroke();\n  fill(50);\n  var s = 7; // ellipse size\n  ellipse(currentNum, lineY, s, s);\n\n  // Draw the guide\n  var guideY = lineY + 15;\n  text('0', 0, guideY);\n  textAlign(RIGHT);\n  text('100', width, guideY);\n\n  // Draw the normalized value\n  textAlign(LEFT);\n  fill(0);\n  textSize(32);\n  var normalY = 40;\n  var normalX = 20;\n  text(normalized, normalX, normalY);\n}\n</code></div>"
            ],
            "alt": "ellipse moves with mouse. 0 shown left & 100 right and updating values center",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 627,
            "description": "Facilitates exponential expressions. The <a href=\"#/p5/pow\">pow()</a> function is an efficient\nway of multiplying numbers by themselves (or their reciprocals) in large\nquantities. For example, pow(3, 5) is equivalent to the expression\n3*3*3*3*3 and pow(3, -5) is equivalent to 1 / 3*3*3*3*3. Maps to\nMath.pow().",
            "itemtype": "method",
            "name": "pow",
            "params": [
                {
                    "name": "n",
                    "description": "base of the exponential expression",
                    "type": "Number"
                },
                {
                    "name": "e",
                    "description": "power by which to raise the base",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "n^e",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  //Exponentially increase the size of an ellipse.\n  var eSize = 3; // Original Size\n  var eLoc = 10; // Original Location\n\n  ellipse(eLoc, eLoc, eSize, eSize);\n\n  ellipse(eLoc * 2, eLoc * 2, pow(eSize, 2), pow(eSize, 2));\n\n  ellipse(eLoc * 4, eLoc * 4, pow(eSize, 3), pow(eSize, 3));\n\n  ellipse(eLoc * 8, eLoc * 8, pow(eSize, 4), pow(eSize, 4));\n}\n</code></div>"
            ],
            "alt": "small to large ellipses radiating from top left of canvas",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 661,
            "description": "Calculates the integer closest to the n parameter. For example,\nround(133.8) returns the value 134. Maps to Math.round().",
            "itemtype": "method",
            "name": "round",
            "params": [
                {
                    "name": "n",
                    "description": "number to round",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "rounded number",
                "type": "Integer"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n  //map, mouseX between 0 and 5.\n  var ax = map(mouseX, 0, 100, 0, 5);\n  var ay = 66;\n\n  // Round the mapped number.\n  var bx = round(map(mouseX, 0, 100, 0, 5));\n  var by = 33;\n\n  // Multiply the mapped numbers by 20 to more easily\n  // see the changes.\n  stroke(0);\n  fill(0);\n  line(0, ay, ax * 20, ay);\n  line(0, by, bx * 20, by);\n\n  // Reformat the float returned by map and draw it.\n  noStroke();\n  text(nfc(ax, 2), ax, ay - 5);\n  text(nfc(bx, 1), bx, by - 5);\n}\n</code></div>"
            ],
            "alt": "horizontal center line squared values displayed on top and regular on bottom.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 700,
            "description": "Squares a number (multiplies a number by itself). The result is always a\npositive number, as multiplying two negative numbers always yields a\npositive result. For example, -1 * -1 = 1.",
            "itemtype": "method",
            "name": "sq",
            "params": [
                {
                    "name": "n",
                    "description": "number to square",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "squared number",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n  var eSize = 7;\n  var x1 = map(mouseX, 0, width, 0, 10);\n  var y1 = 80;\n  var x2 = sq(x1);\n  var y2 = 20;\n\n  // Draw the non-squared.\n  line(0, y1, width, y1);\n  ellipse(x1, y1, eSize, eSize);\n\n  // Draw the squared.\n  line(0, y2, width, y2);\n  ellipse(x2, y2, eSize, eSize);\n\n  // Draw dividing line.\n  stroke(100);\n  line(0, height / 2, width, height / 2);\n\n  // Draw text.\n  var spacing = 15;\n  noStroke();\n  fill(0);\n  text('x = ' + x1, 0, y1 + spacing);\n  text('sq(x) = ' + x2, 0, y2 + spacing);\n}\n</code></div>"
            ],
            "alt": "horizontal center line squared values displayed on top and regular on bottom.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/calculation.js",
            "line": 747,
            "description": "Calculates the square root of a number. The square root of a number is\nalways positive, even though there may be a valid negative root. The\nsquare root s of number a is such that s*s = a. It is the opposite of\nsquaring. Maps to Math.sqrt().",
            "itemtype": "method",
            "name": "sqrt",
            "params": [
                {
                    "name": "n",
                    "description": "non-negative number to square root",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "square root of number",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nfunction draw() {\n  background(200);\n  var eSize = 7;\n  var x1 = mouseX;\n  var y1 = 80;\n  var x2 = sqrt(x1);\n  var y2 = 20;\n\n  // Draw the non-squared.\n  line(0, y1, width, y1);\n  ellipse(x1, y1, eSize, eSize);\n\n  // Draw the squared.\n  line(0, y2, width, y2);\n  ellipse(x2, y2, eSize, eSize);\n\n  // Draw dividing line.\n  stroke(100);\n  line(0, height / 2, width, height / 2);\n\n  // Draw text.\n  noStroke();\n  fill(0);\n  var spacing = 15;\n  text('x = ' + x1, 0, y1 + spacing);\n  text('sqrt(x) = ' + x2, 0, y2 + spacing);\n}\n</code></div>"
            ],
            "alt": "horizontal center line squareroot values displayed on top and regular on bottom.",
            "class": "p5",
            "module": "Math",
            "submodule": "Calculation"
        },
        {
            "file": "../p5.js/src/math/math.js",
            "line": 12,
            "description": "Creates a new <a href=\"#/p5.Vector\">p5.Vector</a> (the datatype for storing vectors). This provides a\ntwo or three dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection.",
            "itemtype": "method",
            "name": "createVector",
            "params": [
                {
                    "name": "x",
                    "description": "x component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div modernizr='webgl'><code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  noStroke();\n  fill(255, 102, 204);\n}\n\nfunction draw() {\n  background(255);\n  pointLight(color(255), createVector(sin(millis() / 1000) * 20, -40, -10));\n  scale(0.75);\n  sphere();\n}\n</code></div>"
            ],
            "alt": "a purple sphere lit by a point light oscillating horizontally",
            "class": "p5",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/noise.js",
            "line": 40,
            "description": "Returns the Perlin noise value at specified coordinates. Perlin noise is\na random sequence generator producing a more natural ordered, harmonic\nsuccession of numbers compared to the standard <b>random()</b> function.\nIt was invented by Ken Perlin in the 1980s and been used since in\ngraphical applications to produce procedural textures, natural motion,\nshapes, terrains etc.<br /><br /> The main difference to the\n<b>random()</b> function is that Perlin noise is defined in an infinite\nn-dimensional space where each pair of coordinates corresponds to a\nfixed semi-random value (fixed only for the lifespan of the program; see\nthe <a href=\"#/p5/noiseSeed\">noiseSeed()</a> function). p5.js can compute 1D, 2D and 3D noise,\ndepending on the number of coordinates given. The resulting value will\nalways be between 0.0 and 1.0. The noise value can be animated by moving\nthrough the noise space as demonstrated in the example above. The 2nd\nand 3rd dimension can also be interpreted as time.<br /><br />The actual\nnoise is structured similar to an audio signal, in respect to the\nfunction's use of frequencies. Similar to the concept of harmonics in\nphysics, perlin noise is computed over several octaves which are added\ntogether for the final result. <br /><br />Another way to adjust the\ncharacter of the resulting sequence is the scale of the input\ncoordinates. As the function works within an infinite space the value of\nthe coordinates doesn't matter as such, only the distance between\nsuccessive coordinates does (eg. when using <b>noise()</b> within a\nloop). As a general rule the smaller the difference between coordinates,\nthe smoother the resulting noise sequence will be. Steps of 0.005-0.03\nwork best for most applications, but this will differ depending on use.",
            "itemtype": "method",
            "name": "noise",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate in noise space",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate in noise space",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z-coordinate in noise space",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Perlin noise value (between 0 and 1) at specified\n                     coordinates",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nvar xoff = 0.0;\n\nfunction draw() {\n  background(204);\n  xoff = xoff + 0.01;\n  var n = noise(xoff) * width;\n  line(n, 0, n, height);\n}\n</code>\n</div>\n<div>\n<code>var noiseScale=0.02;\n\nfunction draw() {\n  background(0);\n  for (var x=0; x < width; x++) {\n    var noiseVal = noise((mouseX+x)*noiseScale, mouseY*noiseScale);\n    stroke(noiseVal*255);\n    line(x, mouseY+noiseVal*80, x, height);\n  }\n}\n</code>\n</div>"
            ],
            "alt": "vertical line moves left to right with updating noise values.\nhorizontal wave pattern effected by mouse x-position & updating noise values.",
            "class": "p5",
            "module": "Math",
            "submodule": "Noise"
        },
        {
            "file": "../p5.js/src/math/noise.js",
            "line": 187,
            "description": "Adjusts the character and level of detail produced by the Perlin noise\n function. Similar to harmonics in physics, noise is computed over\n several octaves. Lower octaves contribute more to the output signal and\n as such define the overall intensity of the noise, whereas higher octaves\n create finer grained details in the noise sequence.\n <br><br>\n By default, noise is computed over 4 octaves with each octave contributing\n exactly half than its predecessor, starting at 50% strength for the 1st\n octave. This falloff amount can be changed by adding an additional function\n parameter. Eg. a falloff factor of 0.75 means each octave will now have\n 75% impact (25% less) of the previous lower octave. Any value between\n 0.0 and 1.0 is valid, however note that values greater than 0.5 might\n result in greater than 1.0 values returned by <b>noise()</b>.\n <br><br>\n By changing these parameters, the signal created by the <b>noise()</b>\n function can be adapted to fit very specific needs and characteristics.",
            "itemtype": "method",
            "name": "noiseDetail",
            "params": [
                {
                    "name": "lod",
                    "description": "number of octaves to be used by the noise",
                    "type": "Number"
                },
                {
                    "name": "falloff",
                    "description": "falloff factor for each octave",
                    "type": "Number"
                }
            ],
            "example": [
                "\n <div>\n <code>\n var noiseVal;\n var noiseScale = 0.02;\nfunction setup() {\n   createCanvas(100, 100);\n }\nfunction draw() {\n   background(0);\n   for (var y = 0; y < height; y++) {\n     for (var x = 0; x < width / 2; x++) {\n       noiseDetail(2, 0.2);\n       noiseVal = noise((mouseX + x) * noiseScale, (mouseY + y) * noiseScale);\n       stroke(noiseVal * 255);\n       point(x, y);\n       noiseDetail(8, 0.65);\n       noiseVal = noise(\n         (mouseX + x + width / 2) * noiseScale,\n         (mouseY + y) * noiseScale\n       );\n       stroke(noiseVal * 255);\n       point(x + width / 2, y);\n     }\n   }\n }\n </code>\n </div>"
            ],
            "alt": "2 vertical grey smokey patterns affected my mouse x-position and noise.",
            "class": "p5",
            "module": "Math",
            "submodule": "Noise"
        },
        {
            "file": "../p5.js/src/math/noise.js",
            "line": 253,
            "description": "Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\nproduces different results each time the program is run. Set the\n<b>value</b> parameter to a constant to return the same pseudo-random\nnumbers each time the software is run.",
            "itemtype": "method",
            "name": "noiseSeed",
            "params": [
                {
                    "name": "seed",
                    "description": "the seed value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>var xoff = 0.0;\n\nfunction setup() {\n  noiseSeed(99);\n  stroke(0, 10);\n}\n\nfunction draw() {\n  xoff = xoff + .01;\n  var n = noise(xoff) * width;\n  line(n, 0, n, height);\n}\n</code>\n</div>"
            ],
            "alt": "vertical grey lines drawing in pattern affected by noise.",
            "class": "p5",
            "module": "Math",
            "submodule": "Noise"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 67,
            "description": "The x component of the vector",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 72,
            "description": "The y component of the vector",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 77,
            "description": "The z component of the vector",
            "itemtype": "property",
            "name": "z",
            "type": "Number",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 84,
            "description": "Returns a string representation of a vector v by calling String(v)\nor v.toString(). This method is useful for logging vectors in the\nconsole.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n<div class = \"norender\">\n<code>\nfunction setup() {\n  var v = createVector(20, 30);\n  print(String(v)); // prints \"p5.Vector Object : [20, 30, 0]\"\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  var v0 = createVector(0, 0);\n  var v1 = createVector(mouseX, mouseY);\n  drawArrow(v0, v1, 'black');\n\n  noStroke();\n  text(v1.toString(), 10, 25, 90, 75);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 134,
            "description": "Sets the x, y, and z component of the vector using two or three separate\nvariables, the data from a <a href=\"#/p5.Vector\">p5.Vector</a>, or the values from a float array.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "the y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nfunction setup() {\n  var v = createVector(1, 2, 3);\n  v.set(4, 5, 6); // Sets vector to [4, 5, 6]\n\n  var v1 = createVector(0, 0, 0);\n  var arr = [1, 2, 3];\n  v1.set(arr); // Sets vector to [1, 2, 3]\n}\n</code>\n</div>\n\n<div>\n<code>\nvar v0, v1;\nfunction setup() {\n  createCanvas(100, 100);\n\n  v0 = createVector(0, 0);\n  v1 = createVector(50, 50);\n}\n\nfunction draw() {\n  background(240);\n\n  drawArrow(v0, v1, 'black');\n  v1.set(v1.x + random(-1, 1), v1.y + random(-1, 1));\n\n  noStroke();\n  text('x: ' + round(v1.x) + ' y: ' + round(v1.y), 20, 90);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 193,
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "value",
                    "description": "the vector to set",
                    "type": "p5.Vector|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 217,
            "description": "Gets a copy of the vector, returns a <a href=\"#/p5.Vector\">p5.Vector</a> object.",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "the copy of the <a href=\"#/p5.Vector\">p5.Vector</a> object",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v1 = createVector(1, 2, 3);\nvar v2 = v1.copy();\nprint(v1.x === v2.x && v1.y === v2.y && v1.z === v2.z);\n// Prints \"true\"\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 240,
            "description": "Adds x, y, and z components to a vector, adds one vector to another, or\nadds two independent vectors together. The version of the method that adds\ntwo vectors together is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the others\nacts directly on the vector. See the examples for more context.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector to be added",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y component of the vector to be added",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector to be added",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = createVector(1, 2, 3);\nv.add(4, 5, 6);\n// v's components are set to [5, 7, 9]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(1, 2, 3);\nvar v2 = createVector(2, 3, 4);\n\nvar v3 = p5.Vector.add(v1, v2);\n// v3 has components [3, 5, 7]\nprint(v3);\n</code>\n</div>\n\n<div>\n<code>\n// red vector + blue vector = purple vector\nfunction draw() {\n  background(240);\n\n  var v0 = createVector(0, 0);\n  var v1 = createVector(mouseX, mouseY);\n  drawArrow(v0, v1, 'red');\n\n  var v2 = createVector(-30, 20);\n  drawArrow(v1, v2, 'blue');\n\n  var v3 = p5.Vector.add(v1, v2);\n  drawArrow(v0, v3, 'purple');\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 306,
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "value",
                    "description": "the vector to add",
                    "type": "p5.Vector|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 330,
            "description": "Subtracts x, y, and z components from a vector, subtracts one vector from\nanother, or subtracts two independent vectors. The version of the method\nthat subtracts two vectors is a static method and returns a <a href=\"#/p5.Vector\">p5.Vector</a>, the\nother acts directly on the vector. See the examples for more context.",
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector to subtract",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y component of the vector to subtract",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector to subtract",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = createVector(4, 5, 6);\nv.sub(1, 1, 1);\n// v's components are set to [3, 4, 5]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(2, 3, 4);\nvar v2 = createVector(1, 2, 3);\n\nvar v3 = p5.Vector.sub(v1, v2);\n// v3 has components [1, 1, 1]\nprint(v3);\n</code>\n</div>\n\n<div>\n<code>\n// red vector - blue vector = purple vector\nfunction draw() {\n  background(240);\n\n  var v0 = createVector(0, 0);\n  var v1 = createVector(70, 50);\n  drawArrow(v0, v1, 'red');\n\n  var v2 = createVector(mouseX, mouseY);\n  drawArrow(v0, v2, 'blue');\n\n  var v3 = p5.Vector.sub(v1, v2);\n  drawArrow(v2, v3, 'purple');\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 396,
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "value",
                    "description": "the vector to subtract",
                    "type": "p5.Vector|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 420,
            "description": "Multiply the vector by a scalar. The static version of this method\ncreates a new <a href=\"#/p5.Vector\">p5.Vector</a> while the non static version acts on the vector\ndirectly. See the examples for more context.",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "n",
                    "description": "the number to multiply with the vector",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = createVector(1, 2, 3);\nv.mult(2);\n// v's components are set to [2, 4, 6]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(1, 2, 3);\nvar v2 = p5.Vector.mult(v1, 2);\n// v2 has components [2, 4, 6]\nprint(v2);\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  var v0 = createVector(50, 50);\n  var v1 = createVector(25, -25);\n  drawArrow(v0, v1, 'red');\n\n  var num = map(mouseX, 0, width, -2, 2, true);\n  var v2 = p5.Vector.mult(v1, num);\n  drawArrow(v0, v2, 'blue');\n\n  noStroke();\n  text('multiplied by ' + num.toFixed(2), 5, 90);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 495,
            "description": "Divide the vector by a scalar. The static version of this method creates a\nnew <a href=\"#/p5.Vector\">p5.Vector</a> while the non static version acts on the vector directly.\nSee the examples for more context.",
            "itemtype": "method",
            "name": "div",
            "params": [
                {
                    "name": "n",
                    "description": "the number to divide the vector by",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = createVector(6, 4, 2);\nv.div(2); //v's components are set to [3, 2, 1]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(6, 4, 2);\nvar v2 = p5.Vector.div(v1, 2);\n// v2 has components [3, 2, 1]\nprint(v2);\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  var v0 = createVector(0, 100);\n  var v1 = createVector(50, -50);\n  drawArrow(v0, v1, 'red');\n\n  var num = map(mouseX, 0, width, 10, 0.5, true);\n  var v2 = p5.Vector.div(v1, num);\n  drawArrow(v0, v2, 'blue');\n\n  noStroke();\n  text('divided by ' + num.toFixed(2), 10, 90);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 573,
            "description": "Calculates the magnitude (length) of the vector and returns the result as\na float (this is simply the equation sqrt(x*x + y*y + z*z).)",
            "itemtype": "method",
            "name": "mag",
            "return": {
                "description": "magnitude of the vector",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  var v0 = createVector(0, 0);\n  var v1 = createVector(mouseX, mouseY);\n  drawArrow(v0, v1, 'black');\n\n  noStroke();\n  text('vector length: ' + v1.mag().toFixed(2), 10, 70, 90, 30);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>\n<div class=\"norender\">\n<code>\nvar v = createVector(20.0, 30.0, 40.0);\nvar m = v.mag();\nprint(m); // Prints \"53.85164807134504\"\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 621,
            "description": "Calculates the squared magnitude of the vector and returns the result\nas a float (this is simply the equation <em>(x*x + y*y + z*z)</em>.)\nFaster if the real length is not required in the\ncase of comparing vectors, etc.",
            "itemtype": "method",
            "name": "magSq",
            "return": {
                "description": "squared magnitude of the vector",
                "type": "Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(6, 4, 2);\nprint(v1.magSq()); // Prints \"56\"\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  var v0 = createVector(0, 0);\n  var v1 = createVector(mouseX, mouseY);\n  drawArrow(v0, v1, 'black');\n\n  noStroke();\n  text('vector length squared: ' + v1.magSq().toFixed(2), 10, 45, 90, 55);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 675,
            "description": "Calculates the dot product of two vectors. The version of the method\nthat computes the dot product of two independent vectors is a static\nmethod. See the examples for more context.",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "x",
                    "description": "x component of the vector",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the dot product",
                "type": "Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v1 = createVector(1, 2, 3);\nvar v2 = createVector(2, 3, 4);\n\nprint(v1.dot(v2)); // Prints \"20\"\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n//Static method\nvar v1 = createVector(1, 2, 3);\nvar v2 = createVector(3, 2, 1);\nprint(p5.Vector.dot(v1, v2)); // Prints \"10\"\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 706,
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "value",
                    "description": "value component of the vector or a <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 718,
            "description": "Calculates and returns a vector composed of the cross product between\ntwo vectors. Both the static and non static methods return a new <a href=\"#/p5.Vector\">p5.Vector</a>.\nSee the examples for more context.",
            "itemtype": "method",
            "name": "cross",
            "params": [
                {
                    "name": "v",
                    "description": "<a href=\"#/p5.Vector\">p5.Vector</a> to be crossed",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "<a href=\"#/p5.Vector\">p5.Vector</a> composed of cross product",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v1 = createVector(1, 2, 3);\nvar v2 = createVector(1, 2, 3);\n\nv1.cross(v2); // v's components are [0, 0, 0]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(1, 0, 0);\nvar v2 = createVector(0, 1, 0);\n\nvar crossProduct = p5.Vector.cross(v1, v2);\n// crossProduct has components [0, 0, 1]\nprint(crossProduct);\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 759,
            "description": "Calculates the Euclidean distance between two points (considering a\npoint as a vector object).",
            "itemtype": "method",
            "name": "dist",
            "params": [
                {
                    "name": "v",
                    "description": "the x, y, and z coordinates of a <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the distance",
                "type": "Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v1 = createVector(1, 0, 0);\nvar v2 = createVector(0, 1, 0);\n\nvar distance = v1.dist(v2); // distance is 1.4142...\nprint(distance);\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(1, 0, 0);\nvar v2 = createVector(0, 1, 0);\n\nvar distance = p5.Vector.dist(v1, v2);\n// distance is 1.4142...\nprint(distance);\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  var v0 = createVector(0, 0);\n\n  var v1 = createVector(70, 50);\n  drawArrow(v0, v1, 'red');\n\n  var v2 = createVector(mouseX, mouseY);\n  drawArrow(v0, v2, 'blue');\n\n  noStroke();\n  text('distance between vectors: ' + v2.dist(v1).toFixed(2), 5, 50, 95, 50);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 830,
            "description": "Normalize the vector to length 1 (make it a unit vector).",
            "itemtype": "method",
            "name": "normalize",
            "return": {
                "description": "normalized <a href=\"#/p5.Vector\">p5.Vector</a>",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = createVector(10, 20, 2);\n// v has components [10.0, 20.0, 2.0]\nv.normalize();\n// v's components are set to\n// [0.4454354, 0.8908708, 0.089087084]\n</code>\n</div>\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  var v0 = createVector(50, 50);\n  var v1 = createVector(mouseX - 50, mouseY - 50);\n\n  drawArrow(v0, v1, 'red');\n  v1.normalize();\n  drawArrow(v0, v1.mult(35), 'blue');\n\n  noFill();\n  ellipse(50, 50, 35 * 2);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 886,
            "description": "Limit the magnitude of this vector to the value used for the <b>max</b>\nparameter.",
            "itemtype": "method",
            "name": "limit",
            "params": [
                {
                    "name": "max",
                    "description": "the maximum magnitude for the vector",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = createVector(10, 20, 2);\n// v has components [10.0, 20.0, 2.0]\nv.limit(5);\n// v's components are set to\n// [2.2271771, 4.4543543, 0.4454354]\n</code>\n</div>\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  var v0 = createVector(50, 50);\n  var v1 = createVector(mouseX - 50, mouseY - 50);\n\n  drawArrow(v0, v1, 'red');\n  drawArrow(v0, v1.limit(35), 'blue');\n\n  noFill();\n  ellipse(50, 50, 35 * 2);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 944,
            "description": "Set the magnitude of this vector to the value used for the <b>len</b>\nparameter.",
            "itemtype": "method",
            "name": "setMag",
            "params": [
                {
                    "name": "len",
                    "description": "the new length for this vector",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = createVector(10, 20, 2);\n// v has components [10.0, 20.0, 2.0]\nv.setMag(10);\n// v's components are set to [6.0, 8.0, 0.0]\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  var v0 = createVector(0, 0);\n  var v1 = createVector(50, 50);\n\n  drawArrow(v0, v1, 'red');\n\n  var length = map(mouseX, 0, width, 0, 141, true);\n  v1.setMag(length);\n  drawArrow(v0, v1, 'blue');\n\n  noStroke();\n  text('magnitude set to: ' + length.toFixed(2), 10, 70, 90, 30);\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1000,
            "description": "Calculate the angle of rotation for this vector (only 2D vectors)",
            "itemtype": "method",
            "name": "heading",
            "return": {
                "description": "the angle of rotation",
                "type": "Number"
            },
            "example": [
                "\n<div class = \"norender\">\n<code>\nfunction setup() {\n  var v1 = createVector(30, 50);\n  print(v1.heading()); // 1.0303768265243125\n\n  v1 = createVector(40, 50);\n  print(v1.heading()); // 0.8960553845713439\n\n  v1 = createVector(30, 70);\n  print(v1.heading()); // 1.1659045405098132\n}\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n\n  var v0 = createVector(50, 50);\n  var v1 = createVector(mouseX - 50, mouseY - 50);\n\n  drawArrow(v0, v1, 'black');\n\n  var myHeading = v1.heading();\n  noStroke();\n  text(\n    'vector heading: ' +\n      myHeading.toFixed(2) +\n      ' radians or ' +\n      degrees(myHeading).toFixed(2) +\n      ' degrees',\n    10,\n    50,\n    90,\n    50\n  );\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1069,
            "description": "Rotate the vector by an angle (only 2D vectors), magnitude remains the\nsame",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle of rotation",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = createVector(10.0, 20.0);\n// v has components [10.0, 20.0, 0.0]\nv.rotate(HALF_PI);\n// v's components are set to [-20.0, 9.999999, 0.0]\n</code>\n</div>\n\n<div>\n<code>\nvar angle = 0;\nfunction draw() {\n  background(240);\n\n  var v0 = createVector(50, 50);\n  var v1 = createVector(50, 0);\n\n  drawArrow(v0, v1.rotate(angle), 'black');\n  angle += 0.01;\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1125,
            "description": "Calculates and returns the angle (in radians) between two vectors.",
            "itemtype": "method",
            "name": "angleBetween",
            "params": [
                {
                    "name": "the",
                    "description": "x, y, and z components of a <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the angle between (in radians)",
                "type": "Number"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v1 = createVector(1, 0, 0);\nvar v2 = createVector(0, 1, 0);\n\nvar angle = v1.angleBetween(v2);\n// angle is PI/2\nprint(angle);\n</code>\n</div>\n\n<div>\n<code>\nfunction draw() {\n  background(240);\n  var v0 = createVector(50, 50);\n\n  var v1 = createVector(50, 0);\n  drawArrow(v0, v1, 'red');\n\n  var v2 = createVector(mouseX - 50, mouseY - 50);\n  drawArrow(v0, v2, 'blue');\n\n  var angleBetween = v1.angleBetween(v2);\n  noStroke();\n  text(\n    'angle between: ' +\n      angleBetween.toFixed(2) +\n      ' radians or ' +\n      degrees(angleBetween).toFixed(2) +\n      ' degrees',\n    10,\n    50,\n    90,\n    50\n  );\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1198,
            "description": "Linear interpolate the vector to another vector",
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "x",
                    "description": "the x component",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "the y component",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "the z component",
                    "type": "Number"
                },
                {
                    "name": "amt",
                    "description": "the amount of interpolation; some value between 0.0\n                        (old vector) and 1.0 (new vector). 0.9 is very near\n                        the new vector. 0.5 is halfway in between.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = createVector(1, 1, 0);\n\nv.lerp(3, 3, 0, 0.5); // v now has components [2,2,0]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nvar v1 = createVector(0, 0, 0);\nvar v2 = createVector(100, 100, 0);\n\nvar v3 = p5.Vector.lerp(v1, v2, 0.5);\n// v3 has components [50,50,0]\nprint(v3);\n</code>\n</div>\n\n<div>\n<code>\nvar step = 0.01;\nvar amount = 0;\n\nfunction draw() {\n  background(240);\n  var v0 = createVector(0, 0);\n\n  var v1 = createVector(mouseX, mouseY);\n  drawArrow(v0, v1, 'red');\n\n  var v2 = createVector(90, 90);\n  drawArrow(v0, v2, 'blue');\n\n  if (amount > 1 || amount < 0) {\n    step *= -1;\n  }\n  amount += step;\n  var v3 = p5.Vector.lerp(v1, v2, amount);\n\n  drawArrow(v0, v3, 'purple');\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1271,
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "v",
                    "description": "the <a href=\"#/p5.Vector\">p5.Vector</a> to lerp to",
                    "type": "p5.Vector"
                },
                {
                    "name": "amt",
                    "description": "",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1287,
            "description": "Return a representation of this vector as a float array. This is only\nfor temporary use. If used in any other fashion, the contents should be\ncopied by using the <b>p5.Vector.<a href=\"#/p5.Vector/copy\">copy()</a></b> method to copy into your own\narray.",
            "itemtype": "method",
            "name": "array",
            "return": {
                "description": "an Array with the 3 values",
                "type": "Number[]"
            },
            "example": [
                "\n<div class = \"norender\">\n<code>\nfunction setup() {\n  var v = createVector(20, 30);\n  print(v.array()); // Prints : Array [20, 30, 0]\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nvar v = createVector(10.0, 20.0, 30.0);\nvar f = v.array();\nprint(f[0]); // Prints \"10.0\"\nprint(f[1]); // Prints \"20.0\"\nprint(f[2]); // Prints \"30.0\"\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1319,
            "description": "Equality check against a <a href=\"#/p5.Vector\">p5.Vector</a>",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "x",
                    "description": "the x component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "the y component of the vector",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "the z component of the vector",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "whether the vectors are equals",
                "type": "Boolean"
            },
            "example": [
                "\n<div class = \"norender\">\n<code>\nvar v1 = createVector(5, 10, 20);\nvar v2 = createVector(5, 10, 20);\nvar v3 = createVector(13, 10, 19);\n\nprint(v1.equals(v2.x, v2.y, v2.z)); // true\nprint(v1.equals(v3.x, v3.y, v3.z)); // false\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nvar v1 = createVector(10.0, 20.0, 30.0);\nvar v2 = createVector(10.0, 20.0, 30.0);\nvar v3 = createVector(0.0, 0.0, 0.0);\nprint(v1.equals(v2)); // true\nprint(v1.equals(v3)); // false\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1349,
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "value",
                    "description": "the vector to compare",
                    "type": "p5.Vector|Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1374,
            "description": "Make a new 2D vector from an angle",
            "itemtype": "method",
            "name": "fromAngle",
            "static": 1,
            "params": [
                {
                    "name": "angle",
                    "description": "the desired angle, in radians",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "the length of the new vector (defaults to 1)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the new <a href=\"#/p5.Vector\">p5.Vector</a> object",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  background(200);\n\n  // Create a variable, proportional to the mouseX,\n  // varying from 0-360, to represent an angle in degrees.\n  angleMode(DEGREES);\n  var myDegrees = map(mouseX, 0, width, 0, 360);\n\n  // Display that variable in an onscreen text.\n  // (Note the nfc() function to truncate additional decimal places,\n  // and the \"\\xB0\" character for the degree symbol.)\n  var readout = 'angle = ' + nfc(myDegrees, 1) + '\\xB0';\n  noStroke();\n  fill(0);\n  text(readout, 5, 15);\n\n  // Create a p5.Vector using the fromAngle function,\n  // and extract its x and y components.\n  var v = p5.Vector.fromAngle(radians(myDegrees), 30);\n  var vx = v.x;\n  var vy = v.y;\n\n  push();\n  translate(width / 2, height / 2);\n  noFill();\n  stroke(150);\n  line(0, 0, 30, 0);\n  stroke(0);\n  line(0, 0, vx, vy);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1426,
            "description": "Make a new 3D vector from a pair of ISO spherical angles",
            "itemtype": "method",
            "name": "fromAngles",
            "static": 1,
            "params": [
                {
                    "name": "theta",
                    "description": "the polar angle, in radians (zero is up)",
                    "type": "Number"
                },
                {
                    "name": "phi",
                    "description": "the azimuthal angle, in radians\n                              (zero is out of the screen)",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "the length of the new vector (defaults to 1)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the new <a href=\"#/p5.Vector\">p5.Vector</a> object",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div modernizr='webgl'>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  fill(255);\n  noStroke();\n}\nfunction draw() {\n  background(255);\n\n  var t = millis() / 1000;\n\n  // add three point lights\n  pointLight(color('#f00'), p5.Vector.fromAngles(t * 1.0, t * 1.3, 100));\n  pointLight(color('#0f0'), p5.Vector.fromAngles(t * 1.1, t * 1.2, 100));\n  pointLight(color('#00f'), p5.Vector.fromAngles(t * 1.2, t * 1.1, 100));\n\n  sphere(35);\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1475,
            "description": "Make a new 2D unit vector from a random angle",
            "itemtype": "method",
            "name": "random2D",
            "static": 1,
            "return": {
                "description": "the new <a href=\"#/p5.Vector\">p5.Vector</a> object",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = p5.Vector.random2D();\n// May make v's attributes something like:\n// [0.61554617, -0.51195765, 0.0] or\n// [-0.4695841, -0.14366731, 0.0] or\n// [0.6091097, -0.22805278, 0.0]\nprint(v);\n</code>\n</div>\n\n<div>\n<code>\nfunction setup() {\n  frameRate(1);\n}\n\nfunction draw() {\n  background(240);\n\n  var v0 = createVector(50, 50);\n  var v1 = p5.Vector.random2D();\n  drawArrow(v0, v1.mult(50), 'black');\n}\n\n// draw an arrow for a vector at a given base position\nfunction drawArrow(base, vec, myColor) {\n  push();\n  stroke(myColor);\n  strokeWeight(3);\n  fill(myColor);\n  translate(base.x, base.y);\n  line(0, 0, vec.x, vec.y);\n  rotate(vec.heading());\n  var arrowSize = 7;\n  translate(vec.mag() - arrowSize, 0);\n  triangle(0, arrowSize / 2, 0, -arrowSize / 2, arrowSize, 0);\n  pop();\n}\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1528,
            "description": "Make a new random 3D unit vector.",
            "itemtype": "method",
            "name": "random3D",
            "static": 1,
            "return": {
                "description": "the new <a href=\"#/p5.Vector\">p5.Vector</a> object",
                "type": "p5.Vector"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar v = p5.Vector.random3D();\n// May make v's attributes something like:\n// [0.61554617, -0.51195765, 0.599168] or\n// [-0.4695841, -0.14366731, -0.8711202] or\n// [0.6091097, -0.22805278, -0.7595902]\nprint(v);\n</code>\n</div>"
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1556,
            "itemtype": "method",
            "name": "add",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "a <a href=\"#/p5.Vector\">p5.Vector</a> to add",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "a <a href=\"#/p5.Vector\">p5.Vector</a> to add",
                    "type": "p5.Vector"
                },
                {
                    "name": "target",
                    "description": "the vector to receive the result",
                    "type": "p5.Vector"
                }
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1563,
            "itemtype": "method",
            "name": "add",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the resulting <a href=\"#/p5.Vector\">p5.Vector</a>",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1586,
            "itemtype": "method",
            "name": "sub",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract from",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "a <a href=\"#/p5.Vector\">p5.Vector</a> to subtract",
                    "type": "p5.Vector"
                },
                {
                    "name": "target",
                    "description": "if undefined a new vector will be created",
                    "type": "p5.Vector"
                }
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1593,
            "itemtype": "method",
            "name": "sub",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the resulting <a href=\"#/p5.Vector\">p5.Vector</a>",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1611,
            "description": "Multiplies a vector by a scalar and returns a new vector.",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1614,
            "itemtype": "method",
            "name": "mult",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "the vector to multiply",
                    "type": "p5.Vector"
                },
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "if undefined a new vector will be created",
                    "type": "p5.Vector"
                }
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1621,
            "itemtype": "method",
            "name": "mult",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting new <a href=\"#/p5.Vector\">p5.Vector</a>",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1638,
            "description": "Divides a vector by a scalar and returns a new vector.",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1641,
            "itemtype": "method",
            "name": "div",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "the vector to divide",
                    "type": "p5.Vector"
                },
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "if undefined a new vector will be created",
                    "type": "p5.Vector"
                }
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1648,
            "itemtype": "method",
            "name": "div",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the resulting new <a href=\"#/p5.Vector\">p5.Vector</a>",
                "type": "p5.Vector"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1665,
            "description": "Calculates the dot product of two vectors.",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1668,
            "itemtype": "method",
            "name": "dot",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "the first <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "the second <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the dot product",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1679,
            "description": "Calculates the cross product of two vectors.",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1682,
            "itemtype": "method",
            "name": "cross",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "the first <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "the second <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the cross product",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1693,
            "description": "Calculates the Euclidean distance between two points (considering a\npoint as a vector object).",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1697,
            "itemtype": "method",
            "name": "dist",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "the first <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "the second <a href=\"#/p5.Vector\">p5.Vector</a>",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the distance",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1708,
            "description": "Linear interpolate a vector to another vector and return the result as a\nnew vector.",
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1712,
            "itemtype": "method",
            "name": "lerp",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "amt",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "target",
                    "description": "if undefined a new vector will be created",
                    "type": "p5.Vector"
                }
            ],
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1720,
            "itemtype": "method",
            "name": "lerp",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "p5.Vector"
                },
                {
                    "name": "amt",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the lerped value",
                "type": "Number"
            },
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/p5.Vector.js",
            "line": 1738,
            "itemtype": "method",
            "name": "mag",
            "params": [
                {
                    "name": "vecT",
                    "description": "the vector to return the magnitude of",
                    "type": "p5.Vector"
                }
            ],
            "return": {
                "description": "the magnitude of vecT",
                "type": "Number"
            },
            "static": 1,
            "class": "p5.Vector",
            "module": "Math",
            "submodule": "Math"
        },
        {
            "file": "../p5.js/src/math/random.js",
            "line": 48,
            "description": "Sets the seed value for <a href=\"#/p5/random\">random()</a>.\n\nBy default, <a href=\"#/p5/random\">random()</a> produces different results each time the program\nis run. Set the seed parameter to a constant to return the same\npseudo-random numbers each time the software is run.",
            "itemtype": "method",
            "name": "randomSeed",
            "params": [
                {
                    "name": "seed",
                    "description": "the seed value",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nrandomSeed(99);\nfor (var i = 0; i < 100; i++) {\n  var r = random(0, 255);\n  stroke(r);\n  line(i, 0, i, 100);\n}\n</code>\n</div>"
            ],
            "alt": "many vertical lines drawn in white, black or grey.",
            "class": "p5",
            "module": "Math",
            "submodule": "Random"
        },
        {
            "file": "../p5.js/src/math/random.js",
            "line": 79,
            "description": "Return a random floating-point number.\n\nTakes either 0, 1 or 2 arguments.\n\nIf no argument is given, returns a random number from 0\nup to (but not including) 1.\n\nIf one argument is given and it is a number, returns a random number from 0\nup to (but not including) the number.\n\nIf one argument is given and it is an array, returns a random element from\nthat array.\n\nIf two arguments are given, returns a random number from the\nfirst argument up to (but not including) the second argument.",
            "itemtype": "method",
            "name": "random",
            "params": [
                {
                    "name": "min",
                    "description": "the lower bound (inclusive)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "max",
                    "description": "the upper bound (exclusive)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the random number",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nfor (var i = 0; i < 100; i++) {\n  var r = random(50);\n  stroke(r * 5);\n  line(50, i, 50 + r, i);\n}\n</code>\n</div>\n<div>\n<code>\nfor (var i = 0; i < 100; i++) {\n  var r = random(-50, 50);\n  line(50, i, 50 + r, i);\n}\n</code>\n</div>\n<div>\n<code>\n// Get a random element from an array using the random(Array) syntax\nvar words = ['apple', 'bear', 'cat', 'dog'];\nvar word = random(words); // select random word\ntext(word, 10, 50); // draw the word\n</code>\n</div>"
            ],
            "alt": "100 horizontal lines from center canvas to right. size+fill change each time\n100 horizontal lines from center of canvas. height & side change each render\nword displayed at random. Either apple, bear, cat, or dog",
            "class": "p5",
            "module": "Math",
            "submodule": "Random"
        },
        {
            "file": "../p5.js/src/math/random.js",
            "line": 133,
            "itemtype": "method",
            "name": "random",
            "params": [
                {
                    "name": "choices",
                    "description": "the array to choose from",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the random element from the array",
                "type": "*"
            },
            "example": [
                ""
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Random"
        },
        {
            "file": "../p5.js/src/math/random.js",
            "line": 166,
            "description": "Returns a random number fitting a Gaussian, or\n normal, distribution. There is theoretically no minimum or maximum\n value that <a href=\"#/p5/randomGaussian\">randomGaussian()</a> might return. Rather, there is\n just a very low probability that values far from the mean will be\n returned; and a higher probability that numbers near the mean will\n be returned.\n <br><br>\n Takes either 0, 1 or 2 arguments.<br>\n If no args, returns a mean of 0 and standard deviation of 1.<br>\n If one arg, that arg is the mean (standard deviation is 1).<br>\n If two args, first is mean, second is standard deviation.",
            "itemtype": "method",
            "name": "randomGaussian",
            "params": [
                {
                    "name": "mean",
                    "description": "the mean",
                    "type": "Number"
                },
                {
                    "name": "sd",
                    "description": "the standard deviation",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the random number",
                "type": "Number"
            },
            "example": [
                "\n <div>\n <code>\n for (var y = 0; y < 100; y++) {\n   var x = randomGaussian(50, 15);\n   line(50, y, x, y);\n }\n </code>\n </div>\n <div>\n <code>\n var distribution = new Array(360);\nfunction setup() {\n   createCanvas(100, 100);\n   for (var i = 0; i < distribution.length; i++) {\n     distribution[i] = floor(randomGaussian(0, 15));\n   }\n }\nfunction draw() {\n   background(204);\n  translate(width / 2, width / 2);\n  for (var i = 0; i < distribution.length; i++) {\n     rotate(TWO_PI / distribution.length);\n     stroke(0);\n     var dist = abs(distribution[i]);\n     line(0, 0, dist, 0);\n   }\n }\n </code>\n </div>"
            ],
            "alt": "100 horizontal lines from center of canvas. height & side change each render\n black lines radiate from center of canvas. size determined each render",
            "class": "p5",
            "module": "Math",
            "submodule": "Random"
        },
        {
            "file": "../p5.js/src/math/trigonometry.js",
            "line": 20,
            "description": "The inverse of <a href=\"#/p5/cos\">cos()</a>, returns the arc cosine of a value. This function\nexpects the values in the range of -1 to 1 and values are returned in\nthe range 0 to PI (3.1415927).",
            "itemtype": "method",
            "name": "acos",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc cosine is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc cosine of the given value",
                "type": "Number"
            },
            "example": [
                "\n<div class= “norender\">\n<code>\nvar a = PI;\nvar c = cos(a);\nvar ac = acos(c);\n// Prints: \"3.1415927 : -1.0 : 3.1415927\"\nprint(a + ' : ' + c + ' : ' + ac);\n</code>\n</div>\n\n<div class= “norender\">\n<code>\nvar a = PI + PI / 4.0;\nvar c = cos(a);\nvar ac = acos(c);\n// Prints: \"3.926991 : -0.70710665 : 2.3561943\"\nprint(a + ' : ' + c + ' : ' + ac);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "../p5.js/src/math/trigonometry.js",
            "line": 54,
            "description": "The inverse of <a href=\"#/p5/sin\">sin()</a>, returns the arc sine of a value. This function\nexpects the values in the range of -1 to 1 and values are returned\nin the range -PI/2 to PI/2.",
            "itemtype": "method",
            "name": "asin",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc sine is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc sine of the given value",
                "type": "Number"
            },
            "example": [
                "\n<div class= “norender\">\n<code>\nvar a = PI + PI / 3;\nvar s = sin(a);\nvar as = asin(s);\n// Prints: \"1.0471976 : 0.86602545 : 1.0471976\"\nprint(a + ' : ' + s + ' : ' + as);\n</code>\n</div>\n\n<div class= “norender\">\n<code>\nvar a = PI + PI / 3.0;\nvar s = sin(a);\nvar as = asin(s);\n// Prints: \"4.1887903 : -0.86602545 : -1.0471976\"\nprint(a + ' : ' + s + ' : ' + as);\n</code>\n</div>\n"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "../p5.js/src/math/trigonometry.js",
            "line": 89,
            "description": "The inverse of <a href=\"#/p5/tan\">tan()</a>, returns the arc tangent of a value. This function\nexpects the values in the range of -Infinity to Infinity (exclusive) and\nvalues are returned in the range -PI/2 to PI/2.",
            "itemtype": "method",
            "name": "atan",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc tangent is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc tangent of the given value",
                "type": "Number"
            },
            "example": [
                "\n<div class= “norender\">\n<code>\nvar a = PI + PI / 3;\nvar t = tan(a);\nvar at = atan(t);\n// Prints: \"1.0471976 : 1.7320509 : 1.0471976\"\nprint(a + ' : ' + t + ' : ' + at);\n</code>\n</div>\n\n<div class= “norender\">\n<code>\nvar a = PI + PI / 3.0;\nvar t = tan(a);\nvar at = atan(t);\n// Prints: \"4.1887903 : 1.7320513 : 1.0471977\"\nprint(a + ' : ' + t + ' : ' + at);\n</code>\n</div>\n"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "../p5.js/src/math/trigonometry.js",
            "line": 124,
            "description": "Calculates the angle (in radians) from a specified point to the coordinate\norigin as measured from the positive x-axis. Values are returned as a\nfloat in the range from PI to -PI. The atan2<a href=\"#/p5/\">()</a> function is most often used\nfor orienting geometry to the position of the cursor.\n<br><br>\nNote: The y-coordinate of the point is the first parameter, and the\nx-coordinate is the second parameter, due the the structure of calculating\nthe tangent.",
            "itemtype": "method",
            "name": "atan2",
            "params": [
                {
                    "name": "y",
                    "description": "y-coordinate of the point",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of the point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the arc tangent of the given point",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  background(204);\n  translate(width / 2, height / 2);\n  var a = atan2(mouseY - height / 2, mouseX - width / 2);\n  rotate(a);\n  rect(-30, -5, 60, 10);\n}\n</code>\n</div>"
            ],
            "alt": "60 by 10 rect at center of canvas rotates with mouse movements",
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "../p5.js/src/math/trigonometry.js",
            "line": 160,
            "description": "Calculates the cosine of an angle. This function takes into account the\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.",
            "itemtype": "method",
            "name": "cos",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the cosine of the angle",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nvar a = 0.0;\nvar inc = TWO_PI / 25.0;\nfor (var i = 0; i < 25; i++) {\n  line(i * 4, 50, i * 4, 50 + cos(a) * 40.0);\n  a = a + inc;\n}\n</code>\n</div>"
            ],
            "alt": "vertical black lines form wave patterns, extend-down on left and right side",
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "../p5.js/src/math/trigonometry.js",
            "line": 188,
            "description": "Calculates the sine of an angle. This function takes into account the\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.",
            "itemtype": "method",
            "name": "sin",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the sine of the angle",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nvar a = 0.0;\nvar inc = TWO_PI / 25.0;\nfor (var i = 0; i < 25; i++) {\n  line(i * 4, 50, i * 4, 50 + sin(a) * 40.0);\n  a = a + inc;\n}\n</code>\n</div>"
            ],
            "alt": "vertical black lines extend down and up from center to form wave pattern",
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "../p5.js/src/math/trigonometry.js",
            "line": 216,
            "description": "Calculates the tangent of an angle. This function takes into account\nthe current <a href=\"#/p5/angleMode\">angleMode</a>. Values are returned in the range -1 to 1.",
            "itemtype": "method",
            "name": "tan",
            "params": [
                {
                    "name": "angle",
                    "description": "the angle",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the tangent of the angle",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nvar a = 0.0;\nvar inc = TWO_PI / 50.0;\nfor (var i = 0; i < 100; i = i + 2) {\n  line(i, 50, i, 50 + tan(a) * 2.0);\n  a = a + inc;\n}\n</code>"
            ],
            "alt": "vertical black lines end down and up from center to form spike pattern",
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "../p5.js/src/math/trigonometry.js",
            "line": 244,
            "description": "Converts a radian measurement to its corresponding value in degrees.\nRadians and degrees are two ways of measuring the same thing. There are\n360 degrees in a circle and 2*PI radians in a circle. For example,\n90° = PI/2 = 1.5707964. This function does not take into account the\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>.",
            "itemtype": "method",
            "name": "degrees",
            "params": [
                {
                    "name": "radians",
                    "description": "the radians value to convert to degrees",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the converted angle",
                "type": "Number"
            },
            "example": [
                "\n<div class= “norender\">\n<code>\nvar rad = PI / 4;\nvar deg = degrees(rad);\nprint(rad + ' radians is ' + deg + ' degrees');\n// Prints: 0.7853981633974483 radians is 45 degrees\n</code>\n</div>\n"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "../p5.js/src/math/trigonometry.js",
            "line": 271,
            "description": "Converts a degree measurement to its corresponding value in radians.\nRadians and degrees are two ways of measuring the same thing. There are\n360 degrees in a circle and 2*PI radians in a circle. For example,\n90° = PI/2 = 1.5707964. This function does not take into account the\ncurrent <a href=\"#/p5/angleMode\">angleMode</a>.",
            "itemtype": "method",
            "name": "radians",
            "params": [
                {
                    "name": "degrees",
                    "description": "the degree value to convert to radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the converted angle",
                "type": "Number"
            },
            "example": [
                "\n<div class= “norender\">\n<code>\nvar deg = 45.0;\nvar rad = radians(deg);\nprint(deg + ' degrees is ' + rad + ' radians');\n// Prints: 45 degrees is 0.7853981633974483 radians\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "../p5.js/src/math/trigonometry.js",
            "line": 296,
            "description": "Sets the current mode of p5 to given mode. Default mode is RADIANS.",
            "itemtype": "method",
            "name": "angleMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either RADIANS or DEGREES",
                    "type": "Constant"
                }
            ],
            "example": [
                "\n<div>\n<code>\nfunction draw() {\n  background(204);\n  angleMode(DEGREES); // Change the mode to DEGREES\n  var a = atan2(mouseY - height / 2, mouseX - width / 2);\n  translate(width / 2, height / 2);\n  push();\n  rotate(a);\n  rect(-20, -5, 40, 10); // Larger rectangle is rotating in degrees\n  pop();\n  angleMode(RADIANS); // Change the mode to RADIANS\n  rotate(a); // var a stays the same\n  rect(-40, -5, 20, 10); // Smaller rectangle is rotating in radians\n}\n</code>\n</div>"
            ],
            "alt": "40 by 10 rect in center rotates with mouse moves. 20 by 10 rect moves faster.",
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "../p5.js/src/math/trigonometry.js",
            "line": 332,
            "description": "converts angles from the current angleMode to RADIANS",
            "itemtype": "method",
            "name": "_toRadians",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "../p5.js/src/math/trigonometry.js",
            "line": 347,
            "description": "converts angles from the current angleMode to DEGREES",
            "itemtype": "method",
            "name": "_toDegrees",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "../p5.js/src/math/trigonometry.js",
            "line": 362,
            "description": "converts angles from RADIANS into the current angleMode",
            "itemtype": "method",
            "name": "_fromRadians",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "angle",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Math",
            "submodule": "Trigonometry"
        },
        {
            "file": "../p5.js/src/typography/attributes.js",
            "line": 13,
            "description": "Sets the current alignment for drawing text. Accepts two\narguments: horizAlign (LEFT, CENTER, or RIGHT) and\nvertAlign (TOP, BOTTOM, CENTER, or BASELINE).\n\nThe horizAlign parameter is in reference to the x value\nof the <a href=\"#/p5/text\">text()</a> function, while the vertAlign parameter is\nin reference to the y value.\n\nSo if you write textAlign(LEFT), you are aligning the left\nedge of your text to the x value you give in <a href=\"#/p5/text\">text()</a>. If you\nwrite textAlign(RIGHT, TOP), you are aligning the right edge\nof your text to the x value and the top of edge of the text\nto the y value.",
            "itemtype": "method",
            "name": "textAlign",
            "params": [
                {
                    "name": "horizAlign",
                    "description": "horizontal alignment, either LEFT,\n                           CENTER, or RIGHT",
                    "type": "Constant"
                },
                {
                    "name": "vertAlign",
                    "description": "vertical alignment, either TOP,\n                           BOTTOM, CENTER, or BASELINE",
                    "type": "Constant",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntextSize(16);\ntextAlign(RIGHT);\ntext('ABCD', 50, 30);\ntextAlign(CENTER);\ntext('EFGH', 50, 50);\ntextAlign(LEFT);\ntext('IJKL', 50, 70);\n</code>\n</div>\n\n<div>\n<code>\ntextSize(16);\nstrokeWeight(0.5);\n\nline(0, 12, width, 12);\ntextAlign(CENTER, TOP);\ntext('TOP', 0, 12, width);\n\nline(0, 37, width, 37);\ntextAlign(CENTER, CENTER);\ntext('CENTER', 0, 37, width);\n\nline(0, 62, width, 62);\ntextAlign(CENTER, BASELINE);\ntext('BASELINE', 0, 62, width);\n\nline(0, 87, width, 87);\ntextAlign(CENTER, BOTTOM);\ntext('BOTTOM', 0, 87, width);\n</code>\n</div>"
            ],
            "alt": "Letters ABCD displayed at top right, EFGH at center and IJKL at bottom left.\nThe names of the four vertical alignments rendered each showing that alignment's placement relative to a horizontal line.",
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/typography/attributes.js",
            "line": 75,
            "itemtype": "method",
            "name": "textAlign",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/typography/attributes.js",
            "line": 84,
            "description": "Sets/gets the spacing, in pixels, between lines of text. This\nsetting will be used in all subsequent calls to the <a href=\"#/p5/text\">text()</a> function.",
            "itemtype": "method",
            "name": "textLeading",
            "params": [
                {
                    "name": "leading",
                    "description": "the size in pixels for spacing between lines",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// Text to display. The \"\\n\" is a \"new line\" character\nvar lines = 'L1\\nL2\\nL3';\ntextSize(12);\n\ntextLeading(10); // Set leading to 10\ntext(lines, 10, 25);\n\ntextLeading(20); // Set leading to 20\ntext(lines, 40, 25);\n\ntextLeading(30); // Set leading to 30\ntext(lines, 70, 25);\n</code>\n</div>"
            ],
            "alt": "set L1 L2 & L3 displayed vertically 3 times. spacing increases for each set",
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/typography/attributes.js",
            "line": 113,
            "itemtype": "method",
            "name": "textLeading",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/typography/attributes.js",
            "line": 122,
            "description": "Sets/gets the current font size. This size will be used in all subsequent\ncalls to the <a href=\"#/p5/text\">text()</a> function. Font size is measured in pixels.",
            "itemtype": "method",
            "name": "textSize",
            "params": [
                {
                    "name": "theSize",
                    "description": "the size of the letters in units of pixels",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntextSize(12);\ntext('Font Size 12', 10, 30);\ntextSize(14);\ntext('Font Size 14', 10, 60);\ntextSize(16);\ntext('Font Size 16', 10, 90);\n</code>\n</div>"
            ],
            "alt": "Font Size 12 displayed small, Font Size 14 medium & Font Size 16 large",
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/typography/attributes.js",
            "line": 145,
            "itemtype": "method",
            "name": "textSize",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/typography/attributes.js",
            "line": 154,
            "description": "Sets/gets the style of the text for system fonts to NORMAL, ITALIC, or BOLD.\nNote: this may be is overridden by CSS styling. For non-system fonts\n(opentype, truetype, etc.) please load styled fonts instead.",
            "itemtype": "method",
            "name": "textStyle",
            "params": [
                {
                    "name": "theStyle",
                    "description": "styling for text, either NORMAL,\n                           ITALIC, or BOLD",
                    "type": "Constant"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nstrokeWeight(0);\ntextSize(12);\ntextStyle(NORMAL);\ntext('Font Style Normal', 10, 30);\ntextStyle(ITALIC);\ntext('Font Style Italic', 10, 60);\ntextStyle(BOLD);\ntext('Font Style Bold', 10, 90);\n</code>\n</div>"
            ],
            "alt": "words Font Style Normal displayed normally, Italic in italic and bold in bold",
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/typography/attributes.js",
            "line": 180,
            "itemtype": "method",
            "name": "textStyle",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/typography/attributes.js",
            "line": 189,
            "description": "Calculates and returns the width of any character or text string.",
            "itemtype": "method",
            "name": "textWidth",
            "params": [
                {
                    "name": "theText",
                    "description": "the String of characters to measure",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\ntextSize(28);\n\nvar aChar = 'P';\nvar cWidth = textWidth(aChar);\ntext(aChar, 0, 40);\nline(cWidth, 0, cWidth, 50);\n\nvar aString = 'p5.js';\nvar sWidth = textWidth(aString);\ntext(aString, 0, 85);\nline(sWidth, 50, sWidth, 100);\n</code>\n</div>"
            ],
            "alt": "Letter P and p5.js are displayed with vertical lines at end. P is wide",
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/typography/attributes.js",
            "line": 224,
            "description": "Returns the ascent of the current font at its current size. The ascent\nrepresents the distance, in pixels, of the tallest character above\nthe baseline.",
            "itemtype": "method",
            "name": "textAscent",
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nvar base = height * 0.75;\nvar scalar = 0.8; // Different for each font\n\ntextSize(32); // Set initial text size\nvar asc = textAscent() * scalar; // Calc ascent\nline(0, base - asc, width, base - asc);\ntext('dp', 0, base); // Draw text on baseline\n\ntextSize(64); // Increase text size\nasc = textAscent() * scalar; // Recalc ascent\nline(40, base - asc, width, base - asc);\ntext('dp', 40, base); // Draw text on baseline\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/typography/attributes.js",
            "line": 253,
            "description": "Returns the descent of the current font at its current size. The descent\nrepresents the distance, in pixels, of the character with the longest\ndescender below the baseline.",
            "itemtype": "method",
            "name": "textDescent",
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nvar base = height * 0.75;\nvar scalar = 0.8; // Different for each font\n\ntextSize(32); // Set initial text size\nvar desc = textDescent() * scalar; // Calc ascent\nline(0, base + desc, width, base + desc);\ntext('dp', 0, base); // Draw text on baseline\n\ntextSize(64); // Increase text size\ndesc = textDescent() * scalar; // Recalc ascent\nline(40, base + desc, width, base + desc);\ntext('dp', 40, base); // Draw text on baseline\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/typography/attributes.js",
            "line": 282,
            "description": "Helper function to measure ascent and descent.",
            "class": "p5",
            "module": "Typography",
            "submodule": "Attributes"
        },
        {
            "file": "../p5.js/src/typography/loading_displaying.js",
            "line": 16,
            "description": "Loads an opentype font file (.otf, .ttf) from a file or a URL,\nand returns a PFont Object. This method is asynchronous,\nmeaning it may not finish before the next line in your sketch\nis executed.\n<br><br>\nThe path to the font should be relative to the HTML file\nthat links in your sketch. Loading an from a URL or other\nremote location may be blocked due to your browser's built-in\nsecurity.",
            "itemtype": "method",
            "name": "loadFont",
            "params": [
                {
                    "name": "path",
                    "description": "name of the file or url to load",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be executed after\n                                   <a href=\"#/p5/loadFont\">loadFont()</a> completes",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onError",
                    "description": "function to be executed if\n                                   an error occurs",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "<a href=\"#/p5.Font\">p5.Font</a> object",
                "type": "p5.Font"
            },
            "example": [
                "\n\n<p>Calling loadFont() inside <a href=\"#/p5/preload\">preload()</a> guarantees that the load\noperation will have completed before <a href=\"#/p5/setup\">setup()</a> and <a href=\"#/p5/draw\">draw()</a> are called.</p>\n\n<div><code>\nvar myFont;\nfunction preload() {\n  myFont = loadFont('assets/AvenirNextLTPro-Demi.otf');\n}\n\nfunction setup() {\n  fill('#ED225D');\n  textFont(myFont);\n  textSize(36);\n  text('p5*js', 10, 50);\n}\n</code></div>\n\nOutside of <a href=\"#/p5/preload\">preload()</a>, you may supply a callback function to handle the\nobject:\n\n<div><code>\nfunction setup() {\n  loadFont('assets/AvenirNextLTPro-Demi.otf', drawText);\n}\n\nfunction drawText(font) {\n  fill('#ED225D');\n  textFont(font, 36);\n  text('p5*js', 10, 50);\n}\n</code></div>\n\n<p>You can also use the font filename string (without the file extension) to style other HTML\nelements.</p>\n\n<div><code>\nfunction preload() {\n  loadFont('assets/Avenir.otf');\n}\n\nfunction setup() {\n  var myDiv = createDiv('hello there');\n  myDiv.style('font-family', 'Avenir');\n}\n</code></div>"
            ],
            "alt": "p5*js in p5's theme dark pink\np5*js in p5's theme dark pink",
            "class": "p5",
            "module": "Typography",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/typography/loading_displaying.js",
            "line": 143,
            "description": "Draws text to the screen. Displays the information specified in the first\nparameter on the screen in the position specified by the additional\nparameters. A default font will be used unless a font is set with the\n<a href=\"#/p5/textFont\">textFont()</a> function and a default size will be used unless a font is set\nwith <a href=\"#/p5/textSize\">textSize()</a>. Change the color of the text with the <a href=\"#/p5/fill\">fill()</a> function.\nChange the outline of the text with the <a href=\"#/p5/stroke\">stroke()</a> and <a href=\"#/p5/strokeWeight\">strokeWeight()</a>\nfunctions.\n<br><br>\nThe text displays in relation to the <a href=\"#/p5/textAlign\">textAlign()</a> function, which gives the\noption to draw to the left, right, and center of the coordinates.\n<br><br>\nThe x2 and y2 parameters define a rectangular area to display within and\nmay only be used with string data. When these parameters are specified,\nthey are interpreted based on the current <a href=\"#/p5/rectMode\">rectMode()</a> setting. Text that\ndoes not fit completely within the rectangle specified will not be drawn\nto the screen. If x2 and y2 are not specified, the baseline alignment is the\ndefault, which means that the text will be drawn upwards from x and y.\n<br><br>\n<b>WEBGL</b>: Only opentype/truetype fonts are supported. You must load a font using the\n<a href=\"#/p5/loadFont\">loadFont()</a> method (see the example above).\n<a href=\"#/p5/stroke\">stroke()</a> currently has no effect in webgl mode.",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "str",
                    "description": "the alphanumeric\n                                            symbols to be displayed",
                    "type": "String|Object|Array|Number|Boolean"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of text",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of text",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "by default, the width of the text box,\n                    see <a href=\"#/p5/rectMode\">rectMode()</a> for more info",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y2",
                    "description": "by default, the height of the text box,\n                    see <a href=\"#/p5/rectMode\">rectMode()</a> for more info",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\ntextSize(32);\ntext('word', 10, 30);\nfill(0, 102, 153);\ntext('word', 10, 60);\nfill(0, 102, 153, 51);\ntext('word', 10, 90);\n</code>\n</div>\n<div>\n<code>\nvar s = 'The quick brown fox jumped over the lazy dog.';\nfill(50);\ntext(s, 10, 10, 70, 80); // Text wraps within text box\n</code>\n</div>\n\n<div modernizr='webgl'>\n<code>\nvar avenir;\nfunction preload() {\n  avenir = loadFont('assets/Avenir.otf');\n}\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  textFont(avenir);\n  textSize(width / 3);\n  textAlign(CENTER, CENTER);\n}\nfunction draw() {\n  background(0);\n  var time = millis();\n  rotateX(time / 1000);\n  rotateZ(time / 1234);\n  text('p5.js', 0, 0);\n}\n</code>\n</div>"
            ],
            "alt": "'word' displayed 3 times going from black, blue to translucent blue\nThe quick brown fox jumped over the lazy dog.\nthe text 'p5.js' spinning in 3d",
            "class": "p5",
            "module": "Typography",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/typography/loading_displaying.js",
            "line": 230,
            "description": "Sets the current font that will be drawn with the <a href=\"#/p5/text\">text()</a> function.\n<br><br>\n<b>WEBGL</b>: Only fonts loaded via <a href=\"#/p5/loadFont\">loadFont()</a> are supported.",
            "itemtype": "method",
            "name": "textFont",
            "return": {
                "description": "the current font",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nfill(0);\ntextSize(12);\ntextFont('Georgia');\ntext('Georgia', 12, 30);\ntextFont('Helvetica');\ntext('Helvetica', 12, 60);\n</code>\n</div>\n<div>\n<code>\nvar fontRegular, fontItalic, fontBold;\nfunction preload() {\n  fontRegular = loadFont('assets/Regular.otf');\n  fontItalic = loadFont('assets/Italic.ttf');\n  fontBold = loadFont('assets/Bold.ttf');\n}\nfunction setup() {\n  background(210);\n  fill(0)\n   .strokeWeight(0)\n   .textSize(10);\n  textFont(fontRegular);\n  text('Font Style Normal', 10, 30);\n  textFont(fontItalic);\n  text('Font Style Italic', 10, 50);\n  textFont(fontBold);\n  text('Font Style Bold', 10, 70);\n}\n</code>\n</div>"
            ],
            "alt": "words Font Style Normal displayed normally, Italic in italic and bold in bold",
            "class": "p5",
            "module": "Typography",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/typography/loading_displaying.js",
            "line": 275,
            "itemtype": "method",
            "name": "textFont",
            "params": [
                {
                    "name": "font",
                    "description": "a font loaded via <a href=\"#/p5/loadFont\">loadFont()</a>, or a String\nrepresenting a <a href=\"https://mzl.la/2dOw8WD\">web safe font</a> (a font\nthat is generally available across all systems)",
                    "type": "Object|String"
                },
                {
                    "name": "size",
                    "description": "the font size to use",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Typography",
            "submodule": "Loading & Displaying"
        },
        {
            "file": "../p5.js/src/typography/p5.Font.js",
            "line": 31,
            "description": "Underlying opentype font implementation",
            "itemtype": "property",
            "name": "font",
            "class": "p5.Font",
            "module": "Typography",
            "submodule": "Font"
        },
        {
            "file": "../p5.js/src/typography/p5.Font.js",
            "line": 43,
            "description": "Returns a tight bounding box for the given text string using this\nfont (currently only supports single lines)",
            "itemtype": "method",
            "name": "textBounds",
            "params": [
                {
                    "name": "line",
                    "description": "a line of text",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x-position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-position",
                    "type": "Number"
                },
                {
                    "name": "fontSize",
                    "description": "font size to use (optional)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "opentype options (optional)",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "a rectangle object with properties: x, y, w, h",
                "type": "Object"
            },
            "example": [
                "\n<div>\n<code>\nvar font;\nvar textString = 'Lorem ipsum dolor sit amet.';\nfunction preload() {\n  font = loadFont('./assets/Regular.otf');\n}\nfunction setup() {\n  background(210);\n\n  var bbox = font.textBounds(textString, 10, 30, 12);\n  fill(255);\n  stroke(0);\n  rect(bbox.x, bbox.y, bbox.w, bbox.h);\n  fill(0);\n  noStroke();\n\n  textFont(font);\n  textSize(12);\n  text(textString, 10, 30);\n}\n</code>\n</div>"
            ],
            "alt": "words Lorem ipsum dol go off canvas and contained by white bounding box",
            "class": "p5.Font",
            "module": "Typography",
            "submodule": "Font"
        },
        {
            "file": "../p5.js/src/typography/p5.Font.js",
            "line": 157,
            "description": "Computes an array of points following the path for specified text",
            "itemtype": "method",
            "name": "textToPoints",
            "params": [
                {
                    "name": "txt",
                    "description": "a line of text",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x-position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-position",
                    "type": "Number"
                },
                {
                    "name": "fontSize",
                    "description": "font size to use (optional)",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "an (optional) object that can contain:\n\n<br>sampleFactor - the ratio of path-length to number of samples\n(default=.25); higher values yield more points and are therefore\nmore precise\n\n<br>simplifyThreshold - if set to a non-zero value, collinear points will be\nbe removed from the polygon; the value represents the threshold angle to use\nwhen determining whether two edges are collinear",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "an array of points, each with x, y, alpha (the path angle)",
                "type": "Array"
            },
            "example": [
                "\n<div>\n<code>\nvar font;\nfunction preload() {\n  font = loadFont('./assets/Avenir.otf');\n}\n\nvar points;\nvar bounds;\nfunction setup() {\n  createCanvas(100, 100);\n  stroke(0);\n  fill(255, 104, 204);\n\n  points = font.textToPoints('p5', 0, 0, 10, {\n    sampleFactor: 5,\n    simplifyThreshold: 0\n  });\n  bounds = font.textBounds(' p5 ', 0, 0, 10);\n}\n\nfunction draw() {\n  background(255);\n  beginShape();\n  translate(-bounds.x * width / bounds.w, -bounds.y * height / bounds.h);\n  for (var i = 0; i < points.length; i++) {\n    var p = points[i];\n    vertex(\n      p.x * width / bounds.w +\n        sin(20 * p.y / bounds.h + millis() / 1000) * width / 30,\n      p.y * height / bounds.h\n    );\n  }\n  endShape(CLOSE);\n}\n</code>\n</div>\n"
            ],
            "class": "p5.Font",
            "module": "Typography",
            "submodule": "Font"
        },
        {
            "file": "../p5.js/src/typography/p5.Font.js",
            "line": 256,
            "description": "Returns the set of opentype glyphs for the supplied string.\n\nNote that there is not a strict one-to-one mapping between characters\nand glyphs, so the list of returned glyphs can be larger or smaller\n than the length of the given string.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "str",
                    "description": "the string to be converted",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the opentype glyphs",
                "type": "Array"
            },
            "class": "p5.Font",
            "module": "Typography",
            "submodule": "Font"
        },
        {
            "file": "../p5.js/src/typography/p5.Font.js",
            "line": 271,
            "description": "Returns an opentype path for the supplied string and position.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "line",
                    "description": "a line of text",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x-position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-position",
                    "type": "Number"
                },
                {
                    "name": "options",
                    "description": "opentype options (optional)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the opentype path",
                "type": "Object"
            },
            "class": "p5.Font",
            "module": "Typography",
            "submodule": "Font"
        },
        {
            "file": "../p5.js/src/utilities/array_functions.js",
            "line": 12,
            "description": "Adds a value to the end of an array. Extends the length of\nthe array by one. Maps to Array.push().",
            "itemtype": "method",
            "name": "append",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\">array.push(value)</a> instead.",
            "params": [
                {
                    "name": "array",
                    "description": "Array to append",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "to be added to the Array",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "the array that was appended to",
                "type": "Array"
            },
            "example": [
                "\n<div class='norender'><code>\nfunction setup() {\n  var myArray = ['Mango', 'Apple', 'Papaya'];\n  print(myArray); // ['Mango', 'Apple', 'Papaya']\n\n  append(myArray, 'Peach');\n  print(myArray); // ['Mango', 'Apple', 'Papaya', 'Peach']\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "../p5.js/src/utilities/array_functions.js",
            "line": 37,
            "description": "Copies an array (or part of an array) to another array. The src array is\ncopied to the dst array, beginning at the position specified by\nsrcPosition and into the position specified by dstPosition. The number of\nelements to copy is determined by length. Note that copying values\noverwrites existing values in the destination array. To append values\ninstead of overwriting them, use <a href=\"#/p5/concat\">concat()</a>.\n<br><br>\nThe simplified version with only two arguments, arrayCopy(src, dst),\ncopies an entire array to another of the same size. It is equivalent to\narrayCopy(src, 0, dst, 0, src.length).\n<br><br>\nUsing this function is far more efficient for copying array data than\niterating through a for() loop and copying each element individually.",
            "itemtype": "method",
            "name": "arrayCopy",
            "deprecated": true,
            "params": [
                {
                    "name": "src",
                    "description": "the source Array",
                    "type": "Array"
                },
                {
                    "name": "srcPosition",
                    "description": "starting position in the source Array",
                    "type": "Integer"
                },
                {
                    "name": "dst",
                    "description": "the destination Array",
                    "type": "Array"
                },
                {
                    "name": "dstPosition",
                    "description": "starting position in the destination Array",
                    "type": "Integer"
                },
                {
                    "name": "length",
                    "description": "number of Array elements to be copied",
                    "type": "Integer"
                }
            ],
            "example": [
                "\n<div class='norender'><code>\nvar src = ['A', 'B', 'C'];\nvar dst = [1, 2, 3];\nvar srcPosition = 1;\nvar dstPosition = 0;\nvar length = 2;\n\nprint(src); // ['A', 'B', 'C']\nprint(dst); // [ 1 ,  2 ,  3 ]\n\narrayCopy(src, srcPosition, dst, dstPosition, length);\nprint(dst); // ['B', 'C', 3]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "../p5.js/src/utilities/array_functions.js",
            "line": 75,
            "itemtype": "method",
            "name": "arrayCopy",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\">arr1.copyWithin(arr2)</a> instead.",
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "dst",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "length",
                    "description": "",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "../p5.js/src/utilities/array_functions.js",
            "line": 114,
            "description": "Concatenates two arrays, maps to Array.concat(). Does not modify the\ninput arrays.",
            "itemtype": "method",
            "name": "concat",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\">arr1.concat(arr2)</a> instead.",
            "params": [
                {
                    "name": "a",
                    "description": "first Array to concatenate",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "second Array to concatenate",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "concatenated array",
                "type": "Array"
            },
            "example": [
                "\n<div class = 'norender'><code>\nfunction setup() {\n  var arr1 = ['A', 'B', 'C'];\n  var arr2 = [1, 2, 3];\n\n  print(arr1); // ['A','B','C']\n  print(arr2); // [1,2,3]\n\n  var arr3 = concat(arr1, arr2);\n\n  print(arr1); // ['A','B','C']\n  print(arr2); // [1, 2, 3]\n  print(arr3); // ['A','B','C', 1, 2, 3]\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "../p5.js/src/utilities/array_functions.js",
            "line": 145,
            "description": "Reverses the order of an array, maps to Array.reverse()",
            "itemtype": "method",
            "name": "reverse",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\">array.reverse()</a> instead.",
            "params": [
                {
                    "name": "list",
                    "description": "Array to reverse",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "the reversed list",
                "type": "Array"
            },
            "example": [
                "\n<div class='norender'><code>\nfunction setup() {\n  var myArray = ['A', 'B', 'C'];\n  print(myArray); // ['A','B','C']\n\n  reverse(myArray);\n  print(myArray); // ['C','B','A']\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "../p5.js/src/utilities/array_functions.js",
            "line": 167,
            "description": "Decreases an array by one element and returns the shortened array,\nmaps to Array.pop().",
            "itemtype": "method",
            "name": "shorten",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\">array.pop()</a> instead.",
            "params": [
                {
                    "name": "list",
                    "description": "Array to shorten",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "shortened Array",
                "type": "Array"
            },
            "example": [
                "\n<div class = 'norender'><code>\nfunction setup() {\n  var myArray = ['A', 'B', 'C'];\n  print(myArray); // ['A', 'B', 'C']\n  var newArray = shorten(myArray);\n  print(myArray); // ['A','B','C']\n  print(newArray); // ['A','B']\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "../p5.js/src/utilities/array_functions.js",
            "line": 191,
            "description": "Randomizes the order of the elements of an array. Implements\n<a href='http://Bost.Ocks.org/mike/shuffle/' target=_blank>\nFisher-Yates Shuffle Algorithm</a>.",
            "itemtype": "method",
            "name": "shuffle",
            "deprecated": true,
            "deprecationMessage": "See <a href=\"https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\">shuffling an array with JS</a> instead.",
            "params": [
                {
                    "name": "array",
                    "description": "Array to shuffle",
                    "type": "Array"
                },
                {
                    "name": "bool",
                    "description": "modify passed array",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "shuffled Array",
                "type": "Array"
            },
            "example": [
                "\n<div><code>\nfunction setup() {\n  var regularArr = ['ABC', 'def', createVector(), TAU, Math.E];\n  print(regularArr);\n  shuffle(regularArr, true); // force modifications to passed array\n  print(regularArr);\n\n  // By default shuffle() returns a shuffled cloned array:\n  var newArr = shuffle(regularArr);\n  print(regularArr);\n  print(newArr);\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "../p5.js/src/utilities/array_functions.js",
            "line": 234,
            "description": "Sorts an array of numbers from smallest to largest, or puts an array of\nwords in alphabetical order. The original array is not modified; a\nre-ordered array is returned. The count parameter states the number of\nelements to sort. For example, if there are 12 elements in an array and\ncount is set to 5, only the first 5 elements in the array will be sorted.",
            "itemtype": "method",
            "name": "sort",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">array.sort()</a> instead.",
            "params": [
                {
                    "name": "list",
                    "description": "Array to sort",
                    "type": "Array"
                },
                {
                    "name": "count",
                    "description": "number of elements to sort, starting from 0",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "the sorted list",
                "type": "Array"
            },
            "example": [
                "\n<div class = 'norender'><code>\nfunction setup() {\n  var words = ['banana', 'apple', 'pear', 'lime'];\n  print(words); // ['banana', 'apple', 'pear', 'lime']\n  var count = 4; // length of array\n\n  words = sort(words, count);\n  print(words); // ['apple', 'banana', 'lime', 'pear']\n}\n</code></div>\n<div class = 'norender'><code>\nfunction setup() {\n  var numbers = [2, 6, 1, 5, 14, 9, 8, 12];\n  print(numbers); // [2, 6, 1, 5, 14, 9, 8, 12]\n  var count = 5; // Less than the length of the array\n\n  numbers = sort(numbers, count);\n  print(numbers); // [1,2,5,6,14,9,8,12]\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "../p5.js/src/utilities/array_functions.js",
            "line": 282,
            "description": "Inserts a value or an array of values into an existing array. The first\nparameter specifies the initial array to be modified, and the second\nparameter defines the data to be inserted. The third parameter is an index\nvalue which specifies the array position from which to insert data.\n(Remember that array index numbering starts at zero, so the first position\nis 0, the second position is 1, and so on.)",
            "itemtype": "method",
            "name": "splice",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\">array.splice()</a> instead.",
            "params": [
                {
                    "name": "list",
                    "description": "Array to splice into",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "value to be spliced in",
                    "type": "Any"
                },
                {
                    "name": "position",
                    "description": "in the array from which to insert data",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "the list",
                "type": "Array"
            },
            "example": [
                "\n<div class = 'norender'><code>\nfunction setup() {\n  var myArray = [0, 1, 2, 3, 4];\n  var insArray = ['A', 'B', 'C'];\n  print(myArray); // [0, 1, 2, 3, 4]\n  print(insArray); // ['A','B','C']\n\n  splice(myArray, insArray, 3);\n  print(myArray); // [0,1,2,'A','B','C',3,4]\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "../p5.js/src/utilities/array_functions.js",
            "line": 317,
            "description": "Extracts an array of elements from an existing array. The list parameter\ndefines the array from which the elements will be copied, and the start\nand count parameters specify which elements to extract. If no count is\ngiven, elements will be extracted from the start to the end of the array.\nWhen specifying the start, remember that the first array element is 0.\nThis function does not change the source array.",
            "itemtype": "method",
            "name": "subset",
            "deprecated": true,
            "deprecationMessage": "Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">array.slice()</a> instead.",
            "params": [
                {
                    "name": "list",
                    "description": "Array to extract from",
                    "type": "Array"
                },
                {
                    "name": "start",
                    "description": "position to begin",
                    "type": "Integer"
                },
                {
                    "name": "count",
                    "description": "number of values to extract",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of extracted elements",
                "type": "Array"
            },
            "example": [
                "\n<div class = 'norender'><code>\nfunction setup() {\n  var myArray = [1, 2, 3, 4, 5];\n  print(myArray); // [1, 2, 3, 4, 5]\n\n  var sub1 = subset(myArray, 0, 3);\n  var sub2 = subset(myArray, 2, 2);\n  print(sub1); // [1,2,3]\n  print(sub2); // [3,4]\n}\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Array Functions"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 12,
            "description": "Converts a string to its floating point representation. The contents of a\nstring must resemble a number, or NaN (not a number) will be returned.\nFor example, float(\"1234.56\") evaluates to 1234.56, but float(\"giraffe\")\nwill return NaN.\n\nWhen an array of values is passed in, then an array of floats of the same\nlength is returned.",
            "itemtype": "method",
            "name": "float",
            "params": [
                {
                    "name": "str",
                    "description": "float string to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "floating point representation of string",
                "type": "Number"
            },
            "example": [
                "\n<div><code>\nvar str = '20';\nvar diameter = float(str);\nellipse(width / 2, height / 2, diameter, diameter);\n</code></div>"
            ],
            "alt": "20 by 20 white ellipse in the center of the canvas",
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 42,
            "description": "Converts a boolean, string, or float to its integer representation.\nWhen an array of values is passed in, then an int array of the same length\nis returned.",
            "itemtype": "method",
            "name": "int",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Boolean|Number"
                },
                {
                    "name": "radix",
                    "description": "the radix to convert to (default: 10)",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "integer representation of value",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(int('10')); // 10\nprint(int(10.31)); // 10\nprint(int(-10)); // -10\nprint(int(true)); // 1\nprint(int(false)); // 0\nprint(int([false, true, '10.3', 9.8])); // [0, 1, 10, 9]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 62,
            "itemtype": "method",
            "name": "int",
            "params": [
                {
                    "name": "ns",
                    "description": "values to parse",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "integer representation of values",
                "type": "Number[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 82,
            "description": "Converts a boolean, string or number to its string representation.\nWhen an array of values is passed in, then an array of strings of the same\nlength is returned.",
            "itemtype": "method",
            "name": "str",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Boolean|Number|Array"
                }
            ],
            "return": {
                "description": "string representation of value",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(str('10')); // \"10\"\nprint(str(10.31)); // \"10.31\"\nprint(str(-10)); // \"-10\"\nprint(str(true)); // \"true\"\nprint(str(false)); // \"false\"\nprint(str([true, '10.3', 9.8])); // [ \"true\", \"10.3\", \"9.8\" ]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 108,
            "description": "Converts a number or string to its boolean representation.\nFor a number, any non-zero value (positive or negative) evaluates to true,\nwhile zero evaluates to false. For a string, the value \"true\" evaluates to\ntrue, while any other value evaluates to false. When an array of number or\nstring values is passed in, then a array of booleans of the same length is\nreturned.",
            "itemtype": "method",
            "name": "boolean",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Boolean|Number|Array"
                }
            ],
            "return": {
                "description": "boolean representation of value",
                "type": "Boolean"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(boolean(0)); // false\nprint(boolean(1)); // true\nprint(boolean('true')); // true\nprint(boolean('abcd')); // false\nprint(boolean([0, 12, 'true'])); // [false, true, false]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 140,
            "description": "Converts a number, string representation of a number, or boolean to its byte\nrepresentation. A byte can be only a whole number between -128 and 127, so\nwhen a value outside of this range is converted, it wraps around to the\ncorresponding byte representation. When an array of number, string or boolean\nvalues is passed in, then an array of bytes the same length is returned.",
            "itemtype": "method",
            "name": "byte",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Boolean|Number"
                }
            ],
            "return": {
                "description": "byte representation of value",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(byte(127)); // 127\nprint(byte(128)); // -128\nprint(byte(23.4)); // 23\nprint(byte('23.4')); // 23\nprint(byte('hello')); // NaN\nprint(byte(true)); // 1\nprint(byte([0, 255, '100'])); // [0, -1, 100]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 162,
            "itemtype": "method",
            "name": "byte",
            "params": [
                {
                    "name": "ns",
                    "description": "values to parse",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of byte representation of values",
                "type": "Number[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 176,
            "description": "Converts a number or string to its corresponding single-character\nstring representation. If a string parameter is provided, it is first\nparsed as an integer and then translated into a single-character string.\nWhen an array of number or string values is passed in, then an array of\nsingle-character strings of the same length is returned.",
            "itemtype": "method",
            "name": "char",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "string representation of value",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(char(65)); // \"A\"\nprint(char('65')); // \"A\"\nprint(char([65, 66, 67])); // [ \"A\", \"B\", \"C\" ]\nprint(join(char([65, 66, 67]), '')); // \"ABC\"\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 195,
            "itemtype": "method",
            "name": "char",
            "params": [
                {
                    "name": "ns",
                    "description": "values to parse",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of string representation of values",
                "type": "String[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 210,
            "description": "Converts a single-character string to its corresponding integer\nrepresentation. When an array of single-character string values is passed\nin, then an array of integers of the same length is returned.",
            "itemtype": "method",
            "name": "unchar",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "integer representation of value",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(unchar('A')); // 65\nprint(unchar(['A', 'B', 'C'])); // [ 65, 66, 67 ]\nprint(unchar(split('ABC', ''))); // [ 65, 66, 67 ]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 226,
            "itemtype": "method",
            "name": "unchar",
            "params": [
                {
                    "name": "ns",
                    "description": "values to parse",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "integer representation of values",
                "type": "Number[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 239,
            "description": "Converts a number to a string in its equivalent hexadecimal notation. If a\nsecond parameter is passed, it is used to set the number of characters to\ngenerate in the hexadecimal notation. When an array is passed in, an\narray of strings in hexadecimal notation of the same length is returned.",
            "itemtype": "method",
            "name": "hex",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "Number"
                },
                {
                    "name": "digits",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "hexadecimal string representation of value",
                "type": "String"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(hex(255)); // \"000000FF\"\nprint(hex(255, 6)); // \"0000FF\"\nprint(hex([0, 127, 255], 6)); // [ \"000000\", \"00007F\", \"0000FF\" ]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 257,
            "itemtype": "method",
            "name": "hex",
            "params": [
                {
                    "name": "ns",
                    "description": "array of values to parse",
                    "type": "Number[]"
                },
                {
                    "name": "digits",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "hexadecimal string representation of values",
                "type": "String[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 286,
            "description": "Converts a string representation of a hexadecimal number to its equivalent\ninteger value. When an array of strings in hexadecimal notation is passed\nin, an array of integers of the same length is returned.",
            "itemtype": "method",
            "name": "unhex",
            "params": [
                {
                    "name": "n",
                    "description": "value to parse",
                    "type": "String"
                }
            ],
            "return": {
                "description": "integer representation of hexadecimal value",
                "type": "Number"
            },
            "example": [
                "\n<div class='norender'><code>\nprint(unhex('A')); // 10\nprint(unhex('FF')); // 255\nprint(unhex(['FF', 'AA', '00'])); // [ 255, 170, 0 ]\n</code></div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/conversion.js",
            "line": 302,
            "itemtype": "method",
            "name": "unhex",
            "params": [
                {
                    "name": "ns",
                    "description": "values to parse",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "integer representations of hexadecimal value",
                "type": "Number[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "Conversion"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 15,
            "description": "Combines an array of Strings into one String, each separated by the\ncharacter(s) used for the separator parameter. To join arrays of ints or\nfloats, it's necessary to first convert them to Strings using <a href=\"#/p5/nf\">nf()</a> or\nnfs().",
            "itemtype": "method",
            "name": "join",
            "params": [
                {
                    "name": "list",
                    "description": "array of Strings to be joined",
                    "type": "Array"
                },
                {
                    "name": "separator",
                    "description": "String to be placed between each item",
                    "type": "String"
                }
            ],
            "return": {
                "description": "joined String",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nvar array = ['Hello', 'world!'];\nvar separator = ' ';\nvar message = join(array, separator);\ntext(message, 5, 50);\n</code>\n</div>"
            ],
            "alt": "\"hello world!\" displayed middle left of canvas.",
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 44,
            "description": "This function is used to apply a regular expression to a piece of text,\nand return matching groups (elements found inside parentheses) as a\nString array. If there are no matches, a null value will be returned.\nIf no groups are specified in the regular expression, but the sequence\nmatches, an array of length 1 (with the matched text as the first element\nof the array) will be returned.\n<br><br>\nTo use the function, first check to see if the result is null. If the\nresult is null, then the sequence did not match at all. If the sequence\ndid match, an array is returned.\n<br><br>\nIf there are groups (specified by sets of parentheses) in the regular\nexpression, then the contents of each will be returned in the array.\nElement [0] of a regular expression match returns the entire matching\nstring, and the match groups start at element [1] (the first group is [1],\nthe second [2], and so on).",
            "itemtype": "method",
            "name": "match",
            "params": [
                {
                    "name": "str",
                    "description": "the String to be searched",
                    "type": "String"
                },
                {
                    "name": "regexp",
                    "description": "the regexp to be used for matching",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of Strings found",
                "type": "String[]"
            },
            "example": [
                "\n<div>\n<code>\nvar string = 'Hello p5js*!';\nvar regexp = 'p5js\\\\*';\nvar m = match(string, regexp);\ntext(m, 5, 50);\n</code>\n</div>"
            ],
            "alt": "\"p5js*\" displayed middle left of canvas.",
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 85,
            "description": "This function is used to apply a regular expression to a piece of text,\nand return a list of matching groups (elements found inside parentheses)\nas a two-dimensional String array. If there are no matches, a null value\nwill be returned. If no groups are specified in the regular expression,\nbut the sequence matches, a two dimensional array is still returned, but\nthe second dimension is only of length one.\n<br><br>\nTo use the function, first check to see if the result is null. If the\nresult is null, then the sequence did not match at all. If the sequence\ndid match, a 2D array is returned.\n<br><br>\nIf there are groups (specified by sets of parentheses) in the regular\nexpression, then the contents of each will be returned in the array.\nAssuming a loop with counter variable i, element [i][0] of a regular\nexpression match returns the entire matching string, and the match groups\nstart at element [i][1] (the first group is [i][1], the second [i][2],\nand so on).",
            "itemtype": "method",
            "name": "matchAll",
            "params": [
                {
                    "name": "str",
                    "description": "the String to be searched",
                    "type": "String"
                },
                {
                    "name": "regexp",
                    "description": "the regexp to be used for matching",
                    "type": "String"
                }
            ],
            "return": {
                "description": "2d Array of Strings found",
                "type": "String[]"
            },
            "example": [
                "\n<div class=\"norender\">\n<code>\nvar string = 'Hello p5js*! Hello world!';\nvar regexp = 'Hello';\nmatchAll(string, regexp);\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 132,
            "description": "Utility function for formatting numbers into strings. There are two\nversions: one for formatting floats, and one for formatting ints.\nThe values for the digits, left, and right parameters should always\nbe positive integers.",
            "itemtype": "method",
            "name": "nf",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number|String"
                },
                {
                    "name": "left",
                    "description": "number of digits to the left of the\n                               decimal point",
                    "type": "Integer|String",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                               decimal point",
                    "type": "Integer|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  background(200);\n  var num = 112.53106115;\n\n  noStroke();\n  fill(0);\n  textSize(14);\n  // Draw formatted numbers\n  text(nf(num, 5, 2), 10, 20);\n\n  text(nf(num, 4, 3), 10, 55);\n\n  text(nf(num, 3, 6), 10, 85);\n\n  // Draw dividing lines\n  stroke(120);\n  line(0, 30, width, 30);\n  line(0, 65, width, 65);\n}\n</code>\n</div>"
            ],
            "alt": "\"0011253\" top left, \"0112.531\" mid left, \"112.531061\" bottom left canvas",
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 174,
            "itemtype": "method",
            "name": "nf",
            "params": [
                {
                    "name": "nums",
                    "description": "the Numbers to format",
                    "type": "Array"
                },
                {
                    "name": "left",
                    "description": "",
                    "type": "Integer|String",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Integer|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted Strings",
                "type": "String[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 237,
            "description": "Utility function for formatting numbers into strings and placing\nappropriate commas to mark units of 1000. There are two versions: one\nfor formatting ints, and one for formatting an array of ints. The value\nfor the right parameter should always be a positive integer.",
            "itemtype": "method",
            "name": "nfc",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number|String"
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                                 decimal point",
                    "type": "Integer|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  background(200);\n  var num = 11253106.115;\n  var numArr = [1, 1, 2];\n\n  noStroke();\n  fill(0);\n  textSize(12);\n\n  // Draw formatted numbers\n  text(nfc(num, 4), 10, 30);\n  text(nfc(numArr, 2), 10, 80);\n\n  // Draw dividing line\n  stroke(120);\n  line(0, 50, width, 50);\n}\n</code>\n</div>"
            ],
            "alt": "\"11,253,106.115\" top middle and \"1.00,1.00,2.00\" displayed bottom mid",
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 275,
            "itemtype": "method",
            "name": "nfc",
            "params": [
                {
                    "name": "nums",
                    "description": "the Numbers to format",
                    "type": "Array"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Integer|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted Strings",
                "type": "String[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 313,
            "description": "Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but\nputs a \"+\" in front of positive numbers and a \"-\" in front of negative\nnumbers. There are two versions: one for formatting floats, and one for\nformatting ints. The values for left, and right parameters\nshould always be positive integers.",
            "itemtype": "method",
            "name": "nfp",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number"
                },
                {
                    "name": "left",
                    "description": "number of digits to the left of the decimal\n                               point",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                               decimal point",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  background(200);\n  var num1 = 11253106.115;\n  var num2 = -11253106.115;\n\n  noStroke();\n  fill(0);\n  textSize(12);\n\n  // Draw formatted numbers\n  text(nfp(num1, 4, 2), 10, 30);\n  text(nfp(num2, 4, 2), 10, 80);\n\n  // Draw dividing line\n  stroke(120);\n  line(0, 50, width, 50);\n}\n</code>\n</div>"
            ],
            "alt": "\"+11253106.11\" top middle and \"-11253106.11\" displayed bottom middle",
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 354,
            "itemtype": "method",
            "name": "nfp",
            "params": [
                {
                    "name": "nums",
                    "description": "the Numbers to format",
                    "type": "Number[]"
                },
                {
                    "name": "left",
                    "description": "",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted Strings",
                "type": "String[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 375,
            "description": "Utility function for formatting numbers into strings. Similar to <a href=\"#/p5/nf\">nf()</a> but\nputs a \" \" (space) in front of positive numbers and a \"-\" in front of\nnegative numbers. There are two versions: one for formatting floats, and\none for formatting ints. The values for the digits, left, and right\nparameters should always be positive integers.",
            "itemtype": "method",
            "name": "nfs",
            "params": [
                {
                    "name": "num",
                    "description": "the Number to format",
                    "type": "Number"
                },
                {
                    "name": "left",
                    "description": "number of digits to the left of the decimal\n                               point",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "number of digits to the right of the\n                               decimal point",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted String",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  background(200);\n  var num1 = 11253106.115;\n  var num2 = -11253106.115;\n\n  noStroke();\n  fill(0);\n  textSize(12);\n  // Draw formatted numbers\n  text(nfs(num1, 4, 2), 10, 30);\n\n  text(nfs(num2, 4, 2), 10, 80);\n\n  // Draw dividing line\n  stroke(120);\n  line(0, 50, width, 50);\n}\n</code>\n</div>"
            ],
            "alt": "\"11253106.11\" top middle and \"-11253106.11\" displayed bottom middle",
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 416,
            "itemtype": "method",
            "name": "nfs",
            "params": [
                {
                    "name": "nums",
                    "description": "the Numbers to format",
                    "type": "Array"
                },
                {
                    "name": "left",
                    "description": "",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "return": {
                "description": "formatted Strings",
                "type": "String[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 437,
            "description": "The <a href=\"#/p5/split\">split()</a> function maps to String.split(), it breaks a String into\npieces using a character or string as the delimiter. The delim parameter\nspecifies the character or characters that mark the boundaries between\neach piece. A String[] array is returned that contains each of the pieces.\n\nThe <a href=\"#/p5/splitTokens\">splitTokens()</a> function works in a similar fashion, except that it\nsplits using a range of characters instead of a specific character or\nsequence.",
            "itemtype": "method",
            "name": "split",
            "params": [
                {
                    "name": "value",
                    "description": "the String to be split",
                    "type": "String"
                },
                {
                    "name": "delim",
                    "description": "the String used to separate the data",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Array of Strings",
                "type": "String[]"
            },
            "example": [
                "\n<div>\n<code>\nvar names = 'Pat,Xio,Alex';\nvar splitString = split(names, ',');\ntext(splitString[0], 5, 30);\ntext(splitString[1], 5, 50);\ntext(splitString[2], 5, 70);\n</code>\n</div>"
            ],
            "alt": "\"pat\" top left, \"Xio\" mid left and \"Alex\" displayed bottom left",
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 471,
            "description": "The <a href=\"#/p5/splitTokens\">splitTokens()</a> function splits a String at one or many character\ndelimiters or \"tokens.\" The delim parameter specifies the character or\ncharacters to be used as a boundary.\n<br><br>\nIf no delim characters are specified, any whitespace character is used to\nsplit. Whitespace characters include tab (\\t), line feed (\\n), carriage\nreturn (\\r), form feed (\\f), and space.",
            "itemtype": "method",
            "name": "splitTokens",
            "params": [
                {
                    "name": "value",
                    "description": "the String to be split",
                    "type": "String"
                },
                {
                    "name": "delim",
                    "description": "list of individual Strings that will be used as\n                         separators",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of Strings",
                "type": "String[]"
            },
            "example": [
                "\n<div class = \"norender\">\n<code>\nfunction setup() {\n  var myStr = 'Mango, Banana, Lime';\n  var myStrArr = splitTokens(myStr, ',');\n\n  print(myStrArr); // prints : [\"Mango\",\" Banana\",\" Lime\"]\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 526,
            "description": "Removes whitespace characters from the beginning and end of a String. In\naddition to standard whitespace characters such as space, carriage return,\nand tab, this function also removes the Unicode \"nbsp\" character.",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "str",
                    "description": "a String to be trimmed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a trimmed String",
                "type": "String"
            },
            "example": [
                "\n<div>\n<code>\nvar string = trim('  No new lines\\n   ');\ntext(string + ' here', 2, 50);\n</code>\n</div>"
            ],
            "alt": "\"No new lines here\" displayed center canvas",
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/string_functions.js",
            "line": 546,
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "strs",
                    "description": "an Array of Strings to be trimmed",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "an Array of trimmed Strings",
                "type": "String[]"
            },
            "class": "p5",
            "module": "Data",
            "submodule": "String Functions"
        },
        {
            "file": "../p5.js/src/utilities/time_date.js",
            "line": 12,
            "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/day\">day()</a> function\nreturns the current day as a value from 1 - 31.",
            "itemtype": "method",
            "name": "day",
            "return": {
                "description": "the current day",
                "type": "Integer"
            },
            "example": [
                "\n<div>\n<code>\nvar d = day();\ntext('Current day: \\n' + d, 5, 50);\n</code>\n</div>"
            ],
            "alt": "Current day is displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Time & Date"
        },
        {
            "file": "../p5.js/src/utilities/time_date.js",
            "line": 34,
            "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/hour\">hour()</a> function\nreturns the current hour as a value from 0 - 23.",
            "itemtype": "method",
            "name": "hour",
            "return": {
                "description": "the current hour",
                "type": "Integer"
            },
            "example": [
                "\n<div>\n<code>\nvar h = hour();\ntext('Current hour:\\n' + h, 5, 50);\n</code>\n</div>"
            ],
            "alt": "Current hour is displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Time & Date"
        },
        {
            "file": "../p5.js/src/utilities/time_date.js",
            "line": 56,
            "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/minute\">minute()</a> function\nreturns the current minute as a value from 0 - 59.",
            "itemtype": "method",
            "name": "minute",
            "return": {
                "description": "the current minute",
                "type": "Integer"
            },
            "example": [
                "\n<div>\n<code>\nvar m = minute();\ntext('Current minute: \\n' + m, 5, 50);\n</code>\n</div>"
            ],
            "alt": "Current minute is displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Time & Date"
        },
        {
            "file": "../p5.js/src/utilities/time_date.js",
            "line": 78,
            "description": "Returns the number of milliseconds (thousandths of a second) since\nstarting the program. This information is often used for timing events and\nanimation sequences.",
            "itemtype": "method",
            "name": "millis",
            "return": {
                "description": "the number of milliseconds since starting the program",
                "type": "Number"
            },
            "example": [
                "\n<div>\n<code>\nvar millisecond = millis();\ntext('Milliseconds \\nrunning: \\n' + millisecond, 5, 40);\n</code>\n</div>"
            ],
            "alt": "number of milliseconds since program has started displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Time & Date"
        },
        {
            "file": "../p5.js/src/utilities/time_date.js",
            "line": 101,
            "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/month\">month()</a> function\nreturns the current month as a value from 1 - 12.",
            "itemtype": "method",
            "name": "month",
            "return": {
                "description": "the current month",
                "type": "Integer"
            },
            "example": [
                "\n<div>\n<code>\nvar m = month();\ntext('Current month: \\n' + m, 5, 50);\n</code>\n</div>"
            ],
            "alt": "Current month is displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Time & Date"
        },
        {
            "file": "../p5.js/src/utilities/time_date.js",
            "line": 123,
            "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/second\">second()</a> function\nreturns the current second as a value from 0 - 59.",
            "itemtype": "method",
            "name": "second",
            "return": {
                "description": "the current second",
                "type": "Integer"
            },
            "example": [
                "\n<div>\n<code>\nvar s = second();\ntext('Current second: \\n' + s, 5, 50);\n</code>\n</div>"
            ],
            "alt": "Current second is displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Time & Date"
        },
        {
            "file": "../p5.js/src/utilities/time_date.js",
            "line": 145,
            "description": "p5.js communicates with the clock on your computer. The <a href=\"#/p5/year\">year()</a> function\nreturns the current year as an integer (2014, 2015, 2016, etc).",
            "itemtype": "method",
            "name": "year",
            "return": {
                "description": "the current year",
                "type": "Integer"
            },
            "example": [
                "\n<div>\n<code>\nvar y = year();\ntext('Current year: \\n' + y, 5, 50);\n</code>\n</div>"
            ],
            "alt": "Current year is displayed",
            "class": "p5",
            "module": "IO",
            "submodule": "Time & Date"
        },
        {
            "file": "../p5.js/src/webgl/3d_primitives.js",
            "line": 15,
            "description": "Draw a plane with given a width and height",
            "itemtype": "method",
            "name": "plane",
            "params": [
                {
                    "name": "width",
                    "description": "width of the plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "height of the plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "detailX",
                    "description": "Optional number of triangle\n                            subdivisions in x-dimension",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "Optional number of triangle\n                            subdivisions in y-dimension",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n//draw a plane with width 50 and height 50\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  plane(50, 50);\n}\n</code>\n</div>"
            ],
            "alt": "Nothing displayed on canvas\nRotating interior view of a box with sides that change color.\n3d red and green gradient.\nRotating interior view of a cylinder with sides that change color.\nRotating view of a cylinder with sides that change color.\n3d red and green gradient.\nrotating view of a multi-colored cylinder with concave sides.",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "../p5.js/src/webgl/3d_primitives.js",
            "line": 98,
            "description": "Draw a box with given width, height and depth",
            "itemtype": "method",
            "name": "box",
            "params": [
                {
                    "name": "width",
                    "description": "width of the box",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "Height",
                    "description": "height of the box",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "depth",
                    "description": "depth of the box",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "detailX",
                    "description": "Optional number of triangle\n                           subdivisions in x-dimension",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "Optional number of triangle\n                           subdivisions in y-dimension",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n//draw a spinning box with width, height and depth 200\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  box(50);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "../p5.js/src/webgl/3d_primitives.js",
            "line": 215,
            "description": "Draw a sphere with given radius",
            "itemtype": "method",
            "name": "sphere",
            "params": [
                {
                    "name": "radius",
                    "description": "radius of circle",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "detailX",
                    "description": "number of segments,\n                                   the more segments the smoother geometry\n                                   default is 24",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "number of segments,\n                                   the more segments the smoother geometry\n                                   default is 16",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// draw a sphere with radius 200\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  sphere(40);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "../p5.js/src/webgl/3d_primitives.js",
            "line": 259,
            "access": "private",
            "tagname": "Helper function for creating both cones and cyllinders\nWill only generate well-defined geometry when bottomRadius, height > 0\nand topRadius >= 0\nIf topRadius == 0, topCap should be false",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "../p5.js/src/webgl/3d_primitives.js",
            "line": 393,
            "description": "Draw a cylinder with given radius and height",
            "itemtype": "method",
            "name": "cylinder",
            "params": [
                {
                    "name": "radius",
                    "description": "radius of the surface",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "height of the cylinder",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "detailX",
                    "description": "number of segments,\n                              the more segments the smoother geometry\n                              default is 24",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "number of segments in y-dimension,\n                              the more segments the smoother geometry\n                              default is 1",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "bottomCap",
                    "description": "whether to draw the bottom of the cylinder",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "topCap",
                    "description": "whether to draw the top of the cylinder",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n//draw a spinning cylinder with radius 20 and height 50\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  rotateX(frameCount * 0.01);\n  rotateZ(frameCount * 0.01);\n  cylinder(20, 50);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "../p5.js/src/webgl/3d_primitives.js",
            "line": 484,
            "description": "Draw a cone with given radius and height",
            "itemtype": "method",
            "name": "cone",
            "params": [
                {
                    "name": "radius",
                    "description": "radius of the bottom surface",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "height of the cone",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "detailX",
                    "description": "number of segments,\n                            the more segments the smoother geometry\n                            default is 24",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "number of segments,\n                            the more segments the smoother geometry\n                            default is 1",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "cap",
                    "description": "whether to draw the base of the cone",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n//draw a spinning cone with radius 40 and height 70\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  rotateX(frameCount * 0.01);\n  rotateZ(frameCount * 0.01);\n  cone(40, 70);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "../p5.js/src/webgl/3d_primitives.js",
            "line": 555,
            "description": "Draw an ellipsoid with given radius",
            "itemtype": "method",
            "name": "ellipsoid",
            "params": [
                {
                    "name": "radiusx",
                    "description": "xradius of circle",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "radiusy",
                    "description": "yradius of circle",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "radiusz",
                    "description": "zradius of circle",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "detailX",
                    "description": "number of segments,\n                                   the more segments the smoother geometry\n                                   default is 24. Avoid detail number above\n                                   150, it may crash the browser.",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "number of segments,\n                                   the more segments the smoother geometry\n                                   default is 16. Avoid detail number above\n                                   150, it may crash the browser.",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n// draw an ellipsoid with radius 20, 30 and 40.\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  ellipsoid(20, 30, 40);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "../p5.js/src/webgl/3d_primitives.js",
            "line": 645,
            "description": "Draw a torus with given radius and tube radius",
            "itemtype": "method",
            "name": "torus",
            "params": [
                {
                    "name": "radius",
                    "description": "radius of the whole ring",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "tubeRadius",
                    "description": "radius of the tube",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "detailX",
                    "description": "number of segments in x-dimension,\n                               the more segments the smoother geometry\n                               default is 24",
                    "type": "Integer",
                    "optional": true
                },
                {
                    "name": "detailY",
                    "description": "number of segments in y-dimension,\n                               the more segments the smoother geometry\n                               default is 16",
                    "type": "Integer",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n//draw a spinning torus with radius 200 and tube radius 60\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  torus(50, 15);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "../p5.js/src/webgl/3d_primitives.js",
            "line": 745,
            "description": "Draws a point, a coordinate in space at the dimension of one pixel,\ngiven x, y and z coordinates. The color of the point is determined\nby the current stroke, while the point size is determined by current\nstroke weight.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of point",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of point",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z-coordinate of point",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(50);\n  stroke(255);\n  strokeWeight(4);\n  point(25, 0);\n  strokeWeight(3);\n  point(-25, 0);\n  strokeWeight(2);\n  point(0, 25);\n  strokeWeight(1);\n  point(0, -25);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "../p5.js/src/webgl/3d_primitives.js",
            "line": 1162,
            "description": "Draw a line given two points",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "x0",
                    "description": "x-coordinate of first vertex",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "y-coordinate of first vertex",
                    "type": "Number"
                },
                {
                    "name": "z0",
                    "description": "z-coordinate of first vertex",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "x-coordinate of second vertex",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate of second vertex",
                    "type": "Number"
                },
                {
                    "name": "z1",
                    "description": "z-coordinate of second vertex",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n//draw a line\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  // Use fill instead of stroke to change the color of shape.\n  fill(255, 0, 0);\n  line(10, 10, 0, 60, 60, 20);\n}\n</code>\n</div>"
            ],
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Primitives"
        },
        {
            "file": "../p5.js/src/webgl/interaction.js",
            "line": 13,
            "description": "Allows movement around a 3D sketch using a mouse or trackpad.  Left-clicking\nand dragging will rotate the camera position about the center of the sketch,\nright-clicking and dragging will pan the camera position without rotation,\nand using the mouse wheel (scrolling) will move the camera closer or further\nfrom the center of the sketch. This function can be called with parameters\ndictating sensitivity to mouse movement along the X and Y axes.  Calling\nthis function without parameters is equivalent to calling orbitControl(1,1).\nTo reverse direction of movement in either axis, enter a negative number\nfor sensitivity.",
            "itemtype": "method",
            "name": "orbitControl",
            "params": [
                {
                    "name": "sensitivityX",
                    "description": "sensitivity to mouse movement along X axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "sensitivityY",
                    "description": "sensitivity to mouse movement along Y axis",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n}\nfunction draw() {\n  background(200);\n  orbitControl();\n  rotateY(0.5);\n  box(30, 50);\n}\n</code>\n</div>"
            ],
            "alt": "Camera orbits around a box when mouse is hold-clicked & then moved.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Interaction"
        },
        {
            "file": "../p5.js/src/webgl/interaction.js",
            "line": 146,
            "description": "debugMode() helps visualize 3D space by adding a grid to indicate where the\n‘ground’ is in a sketch and an axes icon which indicates the +X, +Y, and +Z\ndirections. This function can be called without parameters to create a\ndefault grid and axes icon, or it can be called according to the examples\nabove to customize the size and position of the grid and/or axes icon.  The\ngrid is drawn using the most recently set stroke color and weight.  To\nspecify these parameters, add a call to stroke() and strokeWeight()\njust before the end of the draw() loop.\n\nBy default, the grid will run through the origin (0,0,0) of the sketch\nalong the XZ plane\nand the axes icon will be offset from the origin.  Both the grid and axes\nicon will be sized according to the current canvas size.  Note that because the\ngrid runs parallel to the default camera view, it is often helpful to use\ndebugMode along with orbitControl to allow full view of the grid.",
            "itemtype": "method",
            "name": "debugMode",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n  normalMaterial();\n  debugMode();\n}\n\nfunction draw() {\n  background(200);\n  orbitControl();\n  box(15, 30);\n  // Press the spacebar to turn debugMode off!\n  if (keyIsDown(32)) {\n    noDebugMode();\n  }\n}\n</code>\n</div>",
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n  normalMaterial();\n  debugMode(GRID);\n}\n\nfunction draw() {\n  background(200);\n  orbitControl();\n  box(15, 30);\n}\n</code>\n</div>",
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n  normalMaterial();\n  debugMode(AXES);\n}\n\nfunction draw() {\n  background(200);\n  orbitControl();\n  box(15, 30);\n}\n</code>\n</div>",
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n  normalMaterial();\n  debugMode(GRID, 100, 10, 0, 0, 0);\n}\n\nfunction draw() {\n  background(200);\n  orbitControl();\n  box(15, 30);\n}\n</code>\n</div>",
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n  normalMaterial();\n  debugMode(100, 10, 0, 0, 0, 20, 0, -40, 0);\n}\n\nfunction draw() {\n  noStroke();\n  background(200);\n  orbitControl();\n  box(15, 30);\n  // set the stroke color and weight for the grid!\n  stroke(255, 0, 150);\n  strokeWeight(0.8);\n}\n</code>\n</div>"
            ],
            "alt": "a 3D box is centered on a grid in a 3D sketch. an icon\nindicates the direction of each axis: a red line points +X,\na green line +Y, and a blue line +Z.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Interaction"
        },
        {
            "file": "../p5.js/src/webgl/interaction.js",
            "line": 279,
            "itemtype": "method",
            "name": "debugMode",
            "params": [
                {
                    "name": "mode",
                    "description": "either GRID or AXES",
                    "type": "Constant"
                }
            ],
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Interaction"
        },
        {
            "file": "../p5.js/src/webgl/interaction.js",
            "line": 284,
            "itemtype": "method",
            "name": "debugMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "Constant"
                },
                {
                    "name": "gridSize",
                    "description": "size of one side of the grid",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "gridDivisions",
                    "description": "number of divisions in the grid",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "xOff",
                    "description": "X axis offset from origin (0,0,0)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yOff",
                    "description": "Y axis offset from origin (0,0,0)",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "zOff",
                    "description": "Z axis offset from origin (0,0,0)",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Interaction"
        },
        {
            "file": "../p5.js/src/webgl/interaction.js",
            "line": 294,
            "itemtype": "method",
            "name": "debugMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "Constant"
                },
                {
                    "name": "axesSize",
                    "description": "size of axes icon",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "xOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "zOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Interaction"
        },
        {
            "file": "../p5.js/src/webgl/interaction.js",
            "line": 303,
            "itemtype": "method",
            "name": "debugMode",
            "params": [
                {
                    "name": "gridSize",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "gridDivisions",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "gridXOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "gridYOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "gridZOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "axesSize",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "axesXOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "axesYOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "axesZOff",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Interaction"
        },
        {
            "file": "../p5.js/src/webgl/interaction.js",
            "line": 380,
            "description": "Turns off debugMode() in a 3D sketch.",
            "itemtype": "method",
            "name": "noDebugMode",
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  camera(0, -30, 100, 0, 0, 0, 0, 1, 0);\n  normalMaterial();\n  debugMode();\n}\n\nfunction draw() {\n  background(200);\n  orbitControl();\n  box(15, 30);\n  // Press the spacebar to turn debugMode off!\n  if (keyIsDown(32)) {\n    noDebugMode();\n  }\n}\n</code>\n</div>"
            ],
            "alt": "a 3D box is centered on a grid in a 3D sketch. an icon\nindicates the direction of each axis: a red line points +X,\na green line +Y, and a blue line +Z. the grid and icon disappear when the\nspacebar is pressed.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Interaction"
        },
        {
            "file": "../p5.js/src/webgl/interaction.js",
            "line": 425,
            "description": "For use with debugMode",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_grid",
            "params": [
                {
                    "name": "size",
                    "description": "size of grid sides",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "div",
                    "description": "number of grid divisions",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "xOff",
                    "description": "offset of grid center from origin in X axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yOff",
                    "description": "offset of grid center from origin in Y axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "zOff",
                    "description": "offset of grid center from origin in Z axis",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Interaction"
        },
        {
            "file": "../p5.js/src/webgl/interaction.js",
            "line": 502,
            "description": "For use with debugMode",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_axesIcon",
            "params": [
                {
                    "name": "size",
                    "description": "size of axes icon lines",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "xOff",
                    "description": "offset of icon from origin in X axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "yOff",
                    "description": "offset of icon from origin in Y axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "zOff",
                    "description": "offset of icon from origin in Z axis",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Interaction"
        },
        {
            "file": "../p5.js/src/webgl/light.js",
            "line": 12,
            "description": "Creates an ambient light with a color",
            "itemtype": "method",
            "name": "ambientLight",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value relative to\n                                the current color range",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value\n                                relative to the current color range",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "the alpha value",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(0);\n  ambientLight(150);\n  ambientMaterial(250);\n  noStroke();\n  sphere(25);\n}\n</code>\n</div>"
            ],
            "alt": "evenly distributed light across a sphere",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Lights"
        },
        {
            "file": "../p5.js/src/webgl/light.js",
            "line": 46,
            "itemtype": "method",
            "name": "ambientLight",
            "params": [
                {
                    "name": "value",
                    "description": "a color string",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Lights"
        },
        {
            "file": "../p5.js/src/webgl/light.js",
            "line": 52,
            "itemtype": "method",
            "name": "ambientLight",
            "params": [
                {
                    "name": "gray",
                    "description": "a gray value",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Lights"
        },
        {
            "file": "../p5.js/src/webgl/light.js",
            "line": 59,
            "itemtype": "method",
            "name": "ambientLight",
            "params": [
                {
                    "name": "values",
                    "description": "an array containing the red,green,blue &\n                                and alpha components of the color",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Lights"
        },
        {
            "file": "../p5.js/src/webgl/light.js",
            "line": 66,
            "itemtype": "method",
            "name": "ambientLight",
            "params": [
                {
                    "name": "color",
                    "description": "the ambient light color",
                    "type": "p5.Color"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Lights"
        },
        {
            "file": "../p5.js/src/webgl/light.js",
            "line": 101,
            "description": "Creates a directional light with a color and a direction",
            "itemtype": "method",
            "name": "directionalLight",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value (depending on the current\ncolor mode),",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value",
                    "type": "Number"
                },
                {
                    "name": "position",
                    "description": "the direction of the light",
                    "type": "p5.Vector"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(0);\n  //move your mouse to change light direction\n  var dirX = (mouseX / width - 0.5) * 2;\n  var dirY = (mouseY / height - 0.5) * 2;\n  directionalLight(250, 250, 250, -dirX, -dirY, 0.25);\n  ambientMaterial(250);\n  noStroke();\n  sphere(25);\n}\n</code>\n</div>"
            ],
            "alt": "light source on canvas changeable with mouse position",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Lights"
        },
        {
            "file": "../p5.js/src/webgl/light.js",
            "line": 134,
            "itemtype": "method",
            "name": "directionalLight",
            "params": [
                {
                    "name": "color",
                    "description": "color Array, CSS color string,\n                                            or <a href=\"#/p5.Color\">p5.Color</a> value",
                    "type": "Number[]|String|p5.Color"
                },
                {
                    "name": "x",
                    "description": "x axis direction",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y axis direction",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z axis direction",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Lights"
        },
        {
            "file": "../p5.js/src/webgl/light.js",
            "line": 144,
            "itemtype": "method",
            "name": "directionalLight",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Number[]|String|p5.Color"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "p5.Vector"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Lights"
        },
        {
            "file": "../p5.js/src/webgl/light.js",
            "line": 151,
            "itemtype": "method",
            "name": "directionalLight",
            "params": [
                {
                    "name": "v1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Lights"
        },
        {
            "file": "../p5.js/src/webgl/light.js",
            "line": 212,
            "description": "Creates a point light with a color and a light position",
            "itemtype": "method",
            "name": "pointLight",
            "params": [
                {
                    "name": "v1",
                    "description": "red or hue value (depending on the current\ncolor mode),",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "x axis position",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y axis position",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z axis position",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(0);\n  //move your mouse to change light position\n  var locX = mouseX - width / 2;\n  var locY = mouseY - height / 2;\n  // to set the light position,\n  // think of the world's coordinate as:\n  // -width/2,-height/2 -------- width/2,-height/2\n  //                |            |\n  //                |     0,0    |\n  //                |            |\n  // -width/2,height/2--------width/2,height/2\n  pointLight(250, 250, 250, locX, locY, 50);\n  ambientMaterial(250);\n  noStroke();\n  sphere(25);\n}\n</code>\n</div>"
            ],
            "alt": "spot light on canvas changes position with mouse",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Lights"
        },
        {
            "file": "../p5.js/src/webgl/light.js",
            "line": 254,
            "itemtype": "method",
            "name": "pointLight",
            "params": [
                {
                    "name": "v1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "v3",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "position",
                    "description": "the position of the light",
                    "type": "p5.Vector"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Lights"
        },
        {
            "file": "../p5.js/src/webgl/light.js",
            "line": 263,
            "itemtype": "method",
            "name": "pointLight",
            "params": [
                {
                    "name": "color",
                    "description": "color Array, CSS color string,\nor <a href=\"#/p5.Color\">p5.Color</a> value",
                    "type": "Number[]|String|p5.Color"
                },
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Lights"
        },
        {
            "file": "../p5.js/src/webgl/light.js",
            "line": 273,
            "itemtype": "method",
            "name": "pointLight",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Number[]|String|p5.Color"
                },
                {
                    "name": "position",
                    "description": "",
                    "type": "p5.Vector"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Lights"
        },
        {
            "file": "../p5.js/src/webgl/loading.js",
            "line": 14,
            "description": "Load a 3d model from an OBJ file.\n<br><br>\nOne of the limitations of the OBJ format is that it doesn't have a built-in\nsense of scale. This means that models exported from different programs might\nbe very different sizes. If your model isn't displaying, try calling\n<a href=\"#/p5/loadModel\">loadModel()</a> with the normalized parameter set to true. This will resize the\nmodel to a scale appropriate for p5. You can also make additional changes to\nthe final size of your model with the <a href=\"#/p5/scale\">scale()</a> function.",
            "itemtype": "method",
            "name": "loadModel",
            "params": [
                {
                    "name": "path",
                    "description": "Path of the model to be loaded",
                    "type": "String"
                },
                {
                    "name": "normalize",
                    "description": "If true, scale the model to a\n                                     standardized size when loading",
                    "type": "Boolean"
                },
                {
                    "name": "successCallback",
                    "description": "Function to be called\n                                    once the model is loaded. Will be passed\n                                    the 3D model object.",
                    "type": "function(p5.Geometry)",
                    "optional": true
                },
                {
                    "name": "failureCallback",
                    "description": "called with event error if\n                                        the image fails to load.",
                    "type": "Function(Event)",
                    "optional": true
                }
            ],
            "return": {
                "description": "the <a href=\"#/p5.Geometry\">p5.Geometry</a> object",
                "type": "p5.Geometry"
            },
            "example": [
                "\n<div>\n<code>\n//draw a spinning octahedron\nvar octahedron;\n\nfunction preload() {\n  octahedron = loadModel('assets/octahedron.obj');\n}\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  model(octahedron);\n}\n</code>\n</div>",
                "\n<div>\n<code>\n//draw a spinning teapot\nvar teapot;\n\nfunction preload() {\n  // Load model with normalise parameter set to true\n  teapot = loadModel('assets/teapot.obj', true);\n}\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  scale(0.4); // Scaled to make model fit into canvas\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  normalMaterial(); // For effect\n  model(teapot);\n}\n</code>\n</div>"
            ],
            "alt": "Vertically rotating 3-d teapot with red, green and blue gradient.",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Models"
        },
        {
            "file": "../p5.js/src/webgl/loading.js",
            "line": 90,
            "itemtype": "method",
            "name": "loadModel",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "successCallback",
                    "description": "",
                    "type": "function(p5.Geometry)",
                    "optional": true
                },
                {
                    "name": "failureCallback",
                    "description": "",
                    "type": "Function(Event)",
                    "optional": true
                }
            ],
            "return": {
                "description": "the <a href=\"#/p5.Geometry\">p5.Geometry</a> object",
                "type": "p5.Geometry"
            },
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Models"
        },
        {
            "file": "../p5.js/src/webgl/loading.js",
            "line": 135,
            "description": "Parse OBJ lines into model. For reference, this is what a simple model of a\nsquare might look like:\n\nv -0.5 -0.5 0.5\nv -0.5 -0.5 -0.5\nv -0.5 0.5 -0.5\nv -0.5 0.5 0.5\n\nf 4 3 2 1",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Models"
        },
        {
            "file": "../p5.js/src/webgl/loading.js",
            "line": 244,
            "description": "Render a 3d model to the screen.",
            "itemtype": "method",
            "name": "model",
            "params": [
                {
                    "name": "model",
                    "description": "Loaded 3d model to be rendered",
                    "type": "p5.Geometry"
                }
            ],
            "example": [
                "\n<div>\n<code>\n//draw a spinning octahedron\nvar octahedron;\n\nfunction preload() {\n  octahedron = loadModel('assets/octahedron.obj');\n}\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  model(octahedron);\n}\n</code>\n</div>"
            ],
            "alt": "Vertically rotating 3-d octahedron.",
            "class": "p5",
            "module": "Shape",
            "submodule": "3D Models"
        },
        {
            "file": "../p5.js/src/webgl/material.js",
            "line": 14,
            "description": "Loads a custom shader from the provided vertex and fragment\nshader paths. The shader files are loaded asynchronously in the\nbackground, so this method should be used in <a href=\"#/p5/preload\">preload()</a>.\n\nFor now, there are three main types of shaders. p5 will automatically\nsupply appropriate vertices, normals, colors, and lighting attributes\nif the parameters defined in the shader match the names.",
            "itemtype": "method",
            "name": "loadShader",
            "params": [
                {
                    "name": "vertFilename",
                    "description": "path to file containing vertex shader\nsource code",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "fragFilename",
                    "description": "path to file containing fragment shader\nsource code",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "a shader object created from the provided\nvertex and fragment shader files.",
                "type": "p5.Shader"
            },
            "example": [
                "\n<div modernizr='webgl'>\n<code>\nvar mandel;\nfunction preload() {\n  // load the shader definitions from files\n  mandel = loadShader('assets/shader.vert', 'assets/shader.frag');\n}\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  // use the shader\n  shader(mandel);\n  noStroke();\n  mandel.setUniform('p', [-0.74364388703, 0.13182590421]);\n}\n\nfunction draw() {\n  mandel.setUniform('r', 1.5 * exp(-6.5 * (1 + sin(millis() / 2000))));\n  quad(-1, -1, 1, -1, 1, 1, -1, 1);\n}\n</code>\n</div>"
            ],
            "alt": "zooming Mandelbrot set. a colorful, infinitely detailed fractal.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/material.js",
            "line": 83,
            "itemtype": "method",
            "name": "createShader",
            "params": [
                {
                    "name": "vertSrc",
                    "description": "source code for the vertex shader",
                    "type": "String"
                },
                {
                    "name": "fragSrc",
                    "description": "source code for the fragment shader",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a shader object created from the provided\nvertex and fragment shaders.",
                "type": "p5.Shader"
            },
            "example": [
                "\n<div modernizr='webgl'>\n<code>\n// the 'varying's are shared between both vertex & fragment shaders\nvar varying = 'precision highp float; varying vec2 vPos;';\n\n// the vertex shader is called for each vertex\nvar vs =\n  varying +\n  'attribute vec3 aPosition;' +\n  'void main() { vPos = (gl_Position = vec4(aPosition,1.0)).xy; }';\n\n// the fragment shader is called for each pixel\nvar fs =\n  varying +\n  'uniform vec2 p;' +\n  'uniform float r;' +\n  'const int I = 500;' +\n  'void main() {' +\n  '  vec2 c = p + vPos * r, z = c;' +\n  '  float n = 0.0;' +\n  '  for (int i = I; i > 0; i --) {' +\n  '    if(z.x*z.x+z.y*z.y > 4.0) {' +\n  '      n = float(i)/float(I);' +\n  '      break;' +\n  '    }' +\n  '    z = vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y) + c;' +\n  '  }' +\n  '  gl_FragColor = vec4(0.5-cos(n*17.0)/2.0,0.5-cos(n*13.0)/2.0,0.5-cos(n*23.0)/2.0,1.0);' +\n  '}';\n\nvar mandel;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n\n  // create and initialize the shader\n  mandel = createShader(vs, fs);\n  shader(mandel);\n  noStroke();\n\n  // 'p' is the center point of the Mandelbrot image\n  mandel.setUniform('p', [-0.74364388703, 0.13182590421]);\n}\n\nfunction draw() {\n  // 'r' is the size of the image in Mandelbrot-space\n  mandel.setUniform('r', 1.5 * exp(-6.5 * (1 + sin(millis() / 2000))));\n  quad(-1, -1, 1, -1, 1, 1, -1, 1);\n}\n</code>\n</div>"
            ],
            "alt": "zooming Mandelbrot set. a colorful, infinitely detailed fractal.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/material.js",
            "line": 151,
            "description": "The <a href=\"#/p5/shader\">shader()</a> function lets the user provide a custom shader\nto fill in shapes in WEBGL mode. Users can create their\nown shaders by loading vertex and fragment shaders with\n<a href=\"#/p5/loadShader\">loadShader()</a>.",
            "itemtype": "method",
            "name": "shader",
            "chainable": 1,
            "params": [
                {
                    "name": "s",
                    "description": "the desired <a href=\"#/p5.Shader\">p5.Shader</a> to use for rendering\nshapes.",
                    "type": "p5.Shader",
                    "optional": true
                }
            ],
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/material.js",
            "line": 176,
            "description": "Normal material for geometry. You can view all\npossible materials in this\n<a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.",
            "itemtype": "method",
            "name": "normalMaterial",
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(200);\n  normalMaterial();\n  sphere(50);\n}\n</code>\n</div>"
            ],
            "alt": "Red, green and blue gradient.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/material.js",
            "line": 211,
            "description": "Texture for geometry.  You can view other possible materials in this\n<a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.",
            "itemtype": "method",
            "name": "texture",
            "params": [
                {
                    "name": "tex",
                    "description": "2-dimensional graphics\n                   to render as texture",
                    "type": "p5.Image|p5.MediaElement|p5.Graphics"
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(0);\n  rotateZ(frameCount * 0.01);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  //pass image as texture\n  texture(img);\n  box(200, 200, 200);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar pg;\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  pg = createGraphics(200, 200);\n  pg.textSize(100);\n}\n\nfunction draw() {\n  background(0);\n  pg.background(255);\n  pg.text('hello!', 0, 100);\n  //pass image as texture\n  texture(pg);\n  plane(200);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar vid;\nfunction preload() {\n  vid = createVideo('assets/fingers.mov');\n  vid.hide();\n  vid.loop();\n}\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(0);\n  //pass video frame as texture\n  texture(vid);\n  plane(200);\n}\n</code>\n</div>"
            ],
            "alt": "Rotating view of many images umbrella and grid roof on a 3d plane\nblack canvas\nblack canvas",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/material.js",
            "line": 301,
            "description": "Ambient material for geometry with a given color. You can view all\npossible materials in this\n<a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.",
            "itemtype": "method",
            "name": "ambientMaterial",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value, red or hue value\n                        (depending on the current color mode),",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(0);\n  ambientLight(100);\n  pointLight(250, 250, 250, 100, 100, 0);\n  ambientMaterial(250);\n  sphere(50);\n}\n</code>\n</div>"
            ],
            "alt": "radiating light source from top right of canvas",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/material.js",
            "line": 332,
            "itemtype": "method",
            "name": "ambientMaterial",
            "params": [
                {
                    "name": "color",
                    "description": "color, color Array, or CSS color string",
                    "type": "Number[]|String|p5.Color"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/material.js",
            "line": 350,
            "description": "Specular material for geometry with a given color. You can view all\npossible materials in this\n<a href=\"https://p5js.org/examples/3d-materials.html\">example</a>.",
            "itemtype": "method",
            "name": "specularMaterial",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value, red or hue value\n                      (depending on the current color mode),",
                    "type": "Number"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(0);\n  ambientLight(100);\n  pointLight(250, 250, 250, 100, 100, 0);\n  specularMaterial(250);\n  sphere(50);\n}\n</code>\n</div>"
            ],
            "alt": "diffused radiating light source from top right of canvas",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/material.js",
            "line": 381,
            "itemtype": "method",
            "name": "specularMaterial",
            "params": [
                {
                    "name": "color",
                    "description": "color Array, or CSS color string",
                    "type": "Number[]|String|p5.Color"
                }
            ],
            "chainable": 1,
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/material.js",
            "line": 399,
            "access": "private",
            "tagname": "blends colors according to color components.\nIf alpha value is less than 1, we need to enable blending\non our gl context.  Otherwise opaque objects need to a depthMask.",
            "params": [
                {
                    "name": "color",
                    "description": "[description]",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "Normalized numbers array",
                "type": "Number[]]"
            },
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 15,
            "description": "Sets the camera position for a 3D sketch. Parameters for this function define\nthe position for the camera, the center of the sketch (where the camera is\npointing), and an up direction (the orientation of the camera).\n\nWhen called with no arguments, this function creates a default camera\nequivalent to\ncamera(0, 0, (height/2.0) / tan(PI*30.0 / 180.0), 0, 0, 0, 0, 1, 0);",
            "itemtype": "method",
            "name": "camera",
            "params": [
                {
                    "name": "x",
                    "description": "camera position value on x axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "camera position value on y axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "camera position value on z axis",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "centerX",
                    "description": "x coordinate representing center of the sketch",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "centerY",
                    "description": "y coordinate representing center of the sketch",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "centerZ",
                    "description": "z coordinate representing center of the sketch",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "upX",
                    "description": "x component of direction 'up' from camera",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "upY",
                    "description": "y component of direction 'up' from camera",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "upZ",
                    "description": "z component of direction 'up' from camera",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\nfunction draw() {\n  background(204);\n  //move the camera away from the plane by a sin wave\n  camera(0, 0, 20 + sin(frameCount * 0.01) * 10, 0, 0, 0, 0, 1, 0);\n  plane(10, 10);\n}\n</code>\n</div>"
            ],
            "alt": "White square repeatedly grows to fill canvas and then shrinks.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 61,
            "description": "Sets a perspective projection for the camera in a 3D sketch. This projection\nrepresents depth through foreshortening: objects that are close to the camera\nappear their actual size while those that are further away from the camera\nappear smaller. The parameters to this function define the viewing frustum\n(the truncated pyramid within which objects are seen by the camera) through\nvertical field of view, aspect ratio (usually width/height), and near and far\nclipping planes.\n\nWhen called with no arguments, the defaults\nprovided are equivalent to\nperspective(PI/3.0, width/height, eyeZ/10.0, eyeZ*10.0), where eyeZ\nis equal to ((height/2.0) / tan(PI*60.0/360.0));",
            "itemtype": "method",
            "name": "perspective",
            "params": [
                {
                    "name": "fovy",
                    "description": "camera frustum vertical field of view,\n                          from bottom to top of view, in <a href=\"#/p5/angleMode\">angleMode</a> units",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "aspect",
                    "description": "camera frustum aspect ratio",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "near",
                    "description": "frustum near plane length",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "far",
                    "description": "frustum far plane length",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n//drag the mouse to look around!\n//you will see there's a vanishing point\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  perspective(PI / 3.0, width / height, 0.1, 500);\n}\nfunction draw() {\n  background(200);\n  orbitControl();\n  normalMaterial();\n\n  rotateX(-0.3);\n  rotateY(-0.2);\n  translate(0, 0, -50);\n\n  push();\n  translate(-15, 0, sin(frameCount / 30) * 95);\n  box(30);\n  pop();\n  push();\n  translate(15, 0, sin(frameCount / 30 + PI) * 95);\n  box(30);\n  pop();\n}\n</code>\n</div>"
            ],
            "alt": "two colored 3D boxes move back and forth, rotating as mouse is dragged.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 126,
            "description": "Sets an orthographic projection for the camera in a 3D sketch and defines a\nbox-shaped viewing frustum within which objects are seen. In this projection,\nall objects with the same dimension appear the same size, regardless of\nwhether they are near or far from the camera. The parameters to this\nfunction specify the viewing frustum where left and right are the minimum and\nmaximum x values, top and bottom are the minimum and maximum y values, and near\nand far are the minimum and maximum z values. If no parameters are given, the\ndefault is used: ortho(-width/2, width/2, -height/2, height/2).",
            "itemtype": "method",
            "name": "ortho",
            "params": [
                {
                    "name": "left",
                    "description": "camera frustum left plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "right",
                    "description": "camera frustum right plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "bottom",
                    "description": "camera frustum bottom plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "top",
                    "description": "camera frustum top plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "near",
                    "description": "camera frustum near plane",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "far",
                    "description": "camera frustum far plane",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "example": [
                "\n<div>\n<code>\n//drag the mouse to look around!\n//there's no vanishing point\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  ortho(-width / 2, width / 2, height / 2, -height / 2, 0, 500);\n}\nfunction draw() {\n  background(200);\n  orbitControl();\n  normalMaterial();\n\n  rotateX(0.2);\n  rotateY(-0.2);\n  push();\n  translate(-15, 0, sin(frameCount / 30) * 65);\n  box(30);\n  pop();\n  push();\n  translate(15, 0, sin(frameCount / 30 + PI) * 65);\n  box(30);\n  pop();\n}\n</code>\n</div>"
            ],
            "alt": "two 3D boxes move back and forth along same plane, rotating as mouse is dragged.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 187,
            "description": "Creates a new <a href=\"#/p5.Camera\">p5.Camera</a> object and tells the\nrenderer to use that camera.\nReturns the p5.Camera object.",
            "itemtype": "method",
            "name": "createCamera",
            "return": {
                "description": "The newly created camera object.",
                "type": "p5.Camera"
            },
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 298,
            "description": "Sets a perspective projection for a p5.Camera object and sets parameters\nfor that projection according to <a href=\"#/p5/perspective\">perspective()</a>\nsyntax.",
            "itemtype": "method",
            "name": "perspective",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 380,
            "description": "Sets an orthographic projection for a p5.Camera object and sets parameters\nfor that projection according to <a href=\"#/p5/ortho\">ortho()</a> syntax.",
            "itemtype": "method",
            "name": "ortho",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 443,
            "description": "Rotate camera view about arbitrary axis defined by x,y,z\nbased on http://learnwebgl.brown37.net/07_cameras/camera_rotating_motion.html",
            "itemtype": "method",
            "name": "_rotateView",
            "access": "private",
            "tagname": "",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 487,
            "description": "Panning rotates the camera view to the left and right.",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "angle",
                    "description": "amount to rotate camera in current\n<a href=\"#/p5/angleMode\">angleMode</a> units.\nGreater than 0 values rotate counterclockwise (to the left).",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar cam;\nvar delta = 0.01;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n  cam = createCamera();\n  // set initial pan angle\n  cam.pan(-0.8);\n}\n\nfunction draw() {\n  background(200);\n\n  // pan camera according to angle 'delta'\n  cam.pan(delta);\n\n  // every 160 frames, switch direction\n  if (frameCount % 160 === 0) {\n    delta *= -1;\n  }\n\n  rotateX(frameCount * 0.01);\n  translate(-100, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n}\n</code>\n</div>"
            ],
            "alt": "camera view pans left and right across a series of rotating 3D boxes.",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 546,
            "description": "Tilting rotates the camera view up and down.",
            "itemtype": "method",
            "name": "tilt",
            "params": [
                {
                    "name": "angle",
                    "description": "amount to rotate camera in current\n<a href=\"#/p5/angleMode\">angleMode</a> units.\nGreater than 0 values rotate counterclockwise (to the left).",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar cam;\nvar delta = 0.01;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n  cam = createCamera();\n  // set initial tilt\n  cam.tilt(-0.8);\n}\n\nfunction draw() {\n  background(200);\n\n  // pan camera according to angle 'delta'\n  cam.tilt(delta);\n\n  // every 160 frames, switch direction\n  if (frameCount % 160 === 0) {\n    delta *= -1;\n  }\n\n  rotateY(frameCount * 0.01);\n  translate(0, -100, 0);\n  box(20);\n  translate(0, 35, 0);\n  box(20);\n  translate(0, 35, 0);\n  box(20);\n  translate(0, 35, 0);\n  box(20);\n  translate(0, 35, 0);\n  box(20);\n  translate(0, 35, 0);\n  box(20);\n  translate(0, 35, 0);\n  box(20);\n}\n</code>\n</div>"
            ],
            "alt": "camera view tilts up and down across a series of rotating 3D boxes.",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 604,
            "description": "Reorients the camera to look at a position in world space.",
            "itemtype": "method",
            "name": "lookAt",
            "params": [
                {
                    "name": "x",
                    "description": "x position of a point in world space",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y position of a point in world space",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z position of a point in world space",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar cam;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n  cam = createCamera();\n}\n\nfunction draw() {\n  background(200);\n\n  // look at a new random point every 60 frames\n  if (frameCount % 60 === 0) {\n    cam.lookAt(random(-100, 100), random(-50, 50), 0);\n  }\n\n  rotateX(frameCount * 0.01);\n  translate(-100, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n}\n</code>\n</div>"
            ],
            "alt": "camera view of rotating 3D cubes changes to look at a new random\npoint every second .",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 671,
            "description": "Sets a camera's position and orientation.  This is equivalent to calling\n<a href=\"#/p5/camera\">camera()</a> on a p5.Camera object.",
            "itemtype": "method",
            "name": "camera",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 752,
            "description": "Move camera along its local axes while maintaining current camera orientation.",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "x",
                    "description": "amount to move along camera's left-right axis",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "amount to move along camera's up-down axis",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "amount to move along camera's forward-backward axis",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\n// see the camera move along its own axes while maintaining its orientation\nvar cam;\nvar delta = 0.5;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n  cam = createCamera();\n}\n\nfunction draw() {\n  background(200);\n\n  // move the camera along its local axes\n  cam.move(delta, delta, 0);\n\n  // every 100 frames, switch direction\n  if (frameCount % 150 === 0) {\n    delta *= -1;\n  }\n\n  translate(-10, -10, 0);\n  box(50, 8, 50);\n  translate(15, 15, 0);\n  box(50, 8, 50);\n  translate(15, 15, 0);\n  box(50, 8, 50);\n  translate(15, 15, 0);\n  box(50, 8, 50);\n  translate(15, 15, 0);\n  box(50, 8, 50);\n  translate(15, 15, 0);\n  box(50, 8, 50);\n}\n</code>\n</div>"
            ],
            "alt": "camera view moves along a series of 3D boxes, maintaining the same\norientation throughout the move",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 824,
            "description": "Set camera position in world-space while maintaining current camera\norientation.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "x position of a point in world space",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y position of a point in world space",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z position of a point in world space",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\n// press '1' '2' or '3' keys to set camera position\n\nvar cam;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n  cam = createCamera();\n}\n\nfunction draw() {\n  background(200);\n\n  // '1' key\n  if (keyIsDown(49)) {\n    cam.setPosition(30, 0, 80);\n  }\n  // '2' key\n  if (keyIsDown(50)) {\n    cam.setPosition(0, 0, 80);\n  }\n  // '3' key\n  if (keyIsDown(51)) {\n    cam.setPosition(-30, 0, 80);\n  }\n\n  box(20);\n}\n</code>\n</div>"
            ],
            "alt": "camera position changes as the user presses keys, altering view of a 3D box",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 942,
            "description": "Returns a copy of a camera.",
            "itemtype": "method",
            "name": "copy",
            "access": "private",
            "tagname": "",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 968,
            "description": "Returns a camera's local axes: left-right, up-down, and forward-backward,\nas defined by vectors in world-space.",
            "itemtype": "method",
            "name": "_getLocalAxes",
            "access": "private",
            "tagname": "",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 1026,
            "description": "Orbits the camera about center point. For use with orbitControl().",
            "itemtype": "method",
            "name": "_orbit",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "dTheta",
                    "description": "change in spherical coordinate theta",
                    "type": "Number"
                },
                {
                    "name": "dPhi",
                    "description": "change in spherical coordinate phi",
                    "type": "Number"
                },
                {
                    "name": "dRadius",
                    "description": "change in radius",
                    "type": "Number"
                }
            ],
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 1080,
            "description": "Returns true if camera is currently attached to renderer.",
            "itemtype": "method",
            "name": "_isActive",
            "access": "private",
            "tagname": "",
            "class": "p5.Camera",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Camera.js",
            "line": 1089,
            "description": "Sets rendererGL's current camera to a p5.Camera object.  Allows switching\nbetween multiple cameras.",
            "itemtype": "method",
            "name": "setCamera",
            "params": [
                {
                    "name": "cam",
                    "description": "p5.Camera object",
                    "type": "p5.Camera"
                }
            ],
            "example": [
                "\n<div>\n<code>\nvar cam1, cam2;\nvar currentCamera;\n\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  normalMaterial();\n\n  cam1 = createCamera();\n  cam2 = createCamera();\n  cam2.setPosition(30, 0, 50);\n  cam2.lookAt(0, 0, 0);\n  cam2.ortho();\n\n  // set variable for previously active camera:\n  currentCamera = 1;\n}\n\nfunction draw() {\n  background(200);\n\n  // camera 1:\n  cam1.lookAt(0, 0, 0);\n  cam1.setPosition(sin(frameCount / 60) * 200, 0, 100);\n\n  // every 100 frames, switch between the two cameras\n  if (frameCount % 100 === 0) {\n    if (currentCamera === 1) {\n      setCamera(cam1);\n      currentCamera = 0;\n    } else {\n      setCamera(cam2);\n      currentCamera = 1;\n    }\n  }\n\n  drawBoxes();\n}\n\nfunction drawBoxes() {\n  rotateX(frameCount * 0.01);\n  translate(-100, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n  translate(35, 0, 0);\n  box(20);\n}\n</code>\n</div>"
            ],
            "alt": "Canvas switches between two camera views, each showing a series of spinning\n3D boxes.",
            "class": "p5",
            "module": "Lights, Camera",
            "submodule": "Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Geometry.js",
            "line": 50,
            "itemtype": "method",
            "name": "computeFaces",
            "chainable": 1,
            "class": "p5.Geometry",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Geometry.js",
            "line": 92,
            "description": "computes smooth normals per vertex as an average of each\nface.",
            "itemtype": "method",
            "name": "computeNormals",
            "chainable": 1,
            "class": "p5.Geometry",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Geometry.js",
            "line": 131,
            "description": "Averages the vertex normals. Used in curved\nsurfaces",
            "itemtype": "method",
            "name": "averageNormals",
            "chainable": 1,
            "class": "p5.Geometry",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Geometry.js",
            "line": 152,
            "description": "Averages pole normals.  Used in spherical primitives",
            "itemtype": "method",
            "name": "averagePoleNormals",
            "chainable": 1,
            "class": "p5.Geometry",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Geometry.js",
            "line": 190,
            "description": "Create a 2D array for establishing stroke connections",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "p5.Geometry",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Geometry.js",
            "line": 211,
            "description": "Create 4 vertices for each stroke line, two at the beginning position\nand two at the end position. These vertices are displaced relative to\nthat line's normal on the GPU",
            "access": "private",
            "tagname": "",
            "chainable": 1,
            "class": "p5.Geometry",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Geometry.js",
            "line": 245,
            "description": "Modifies all vertices to be centered within the range -100 to 100.",
            "itemtype": "method",
            "name": "normalize",
            "chainable": 1,
            "class": "p5.Geometry",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 1,
            "requires": [
                "constants"
            ],
            "todo": [
                "see methods below needing further implementation.\nfuture consideration: implement SIMD optimizations\nwhen browser compatibility becomes available\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/\n  Reference/Global_Objects/SIMD"
            ],
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 58,
            "description": "Sets the x, y, and z component of the vector using two or three separate\nvariables, the data from a p5.Matrix, or the values from a float array.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "inMatrix",
                    "description": "the input p5.Matrix or\n                                    an Array of length 16",
                    "type": "p5.Matrix|Float32Array|Number[]",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 67,
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "elements",
                    "description": "16 numbers passed by value to avoid\n                                    array copying.",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 101,
            "description": "Gets a copy of the vector, returns a p5.Matrix object.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "the copy of the p5.Matrix object",
                "type": "p5.Matrix"
            },
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 111,
            "description": "return a copy of a matrix",
            "itemtype": "method",
            "name": "copy",
            "return": {
                "description": "the result matrix",
                "type": "p5.Matrix"
            },
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 137,
            "description": "return an identity matrix",
            "itemtype": "method",
            "name": "identity",
            "return": {
                "description": "the result matrix",
                "type": "p5.Matrix"
            },
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 146,
            "description": "transpose according to a given matrix",
            "itemtype": "method",
            "name": "transpose",
            "params": [
                {
                    "name": "a",
                    "description": "the matrix to be\n                                              based on to transpose",
                    "type": "p5.Matrix|Float32Array|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 207,
            "description": "invert  matrix according to a give matrix",
            "itemtype": "method",
            "name": "invert",
            "params": [
                {
                    "name": "a",
                    "description": "the matrix to be\n                                               based on to invert",
                    "type": "p5.Matrix|Float32Array|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 294,
            "description": "Inverts a 3x3 matrix",
            "itemtype": "method",
            "name": "invert3x3",
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 331,
            "description": "transposes a 3x3 p5.Matrix by a mat3",
            "itemtype": "method",
            "name": "transpose3x3",
            "params": [
                {
                    "name": "mat3",
                    "description": "1-dimensional array",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 350,
            "description": "converts a 4x4 matrix to its 3x3 inverse tranform\ncommonly used in MVMatrix to NMatrix conversions.",
            "itemtype": "method",
            "name": "invertTranspose",
            "params": [
                {
                    "name": "mat4",
                    "description": "the matrix to be based on to invert",
                    "type": "p5.Matrix"
                }
            ],
            "chainable": 1,
            "todo": [
                "finish implementation"
            ],
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 387,
            "description": "inspired by Toji's mat4 determinant",
            "itemtype": "method",
            "name": "determinant",
            "return": {
                "description": "Determinant of our 4x4 matrix",
                "type": "Number"
            },
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 410,
            "description": "multiply two mat4s",
            "itemtype": "method",
            "name": "mult",
            "params": [
                {
                    "name": "multMatrix",
                    "description": "The matrix\n                                               we want to multiply by",
                    "type": "p5.Matrix|Float32Array|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 470,
            "description": "scales a p5.Matrix by scalars or a vector",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "s",
                    "description": "vector to scale by",
                    "type": "p5.Vector|Float32Array|Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 505,
            "description": "rotate our Matrix around an axis by the given angle.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "a",
                    "description": "The angle of rotation in radians",
                    "type": "Number"
                },
                {
                    "name": "axis",
                    "description": "the axis(es) to rotate around",
                    "type": "p5.Vector|Number[]"
                }
            ],
            "chainable": "inspired by Toji's gl-matrix lib, mat4 rotation",
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 578,
            "todo": [
                "finish implementing this method!\ntranslates"
            ],
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "v",
                    "description": "vector to translate by",
                    "type": "Number[]"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 605,
            "description": "sets the perspective matrix",
            "itemtype": "method",
            "name": "perspective",
            "params": [
                {
                    "name": "fovy",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "aspect",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "near clipping plane",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "far clipping plane",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 638,
            "description": "sets the ortho matrix",
            "itemtype": "method",
            "name": "ortho",
            "params": [
                {
                    "name": "left",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "right",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "bottom",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "top",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "near",
                    "description": "near clipping plane",
                    "type": "Number"
                },
                {
                    "name": "far",
                    "description": "far clipping plane",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.Matrix.js",
            "line": 673,
            "description": "PRIVATE",
            "class": "p5.Matrix",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.Immediate.js",
            "line": 1,
            "description": "Welcome to RendererGL Immediate Mode.\nImmediate mode is used for drawing custom shapes\nfrom a set of vertices.  Immediate Mode is activated\nwhen you call <a href=\"#/p5/beginShape\">beginShape()</a> & de-activated when you call <a href=\"#/p5/endShape\">endShape()</a>.\nImmediate mode is a style of programming borrowed\nfrom OpenGL's (now-deprecated) immediate mode.\nIt differs from p5.js' default, Retained Mode, which caches\ngeometries and buffers on the CPU to reduce the number of webgl\ndraw calls. Retained mode is more efficient & performative,\nhowever, Immediate Mode is useful for sketching quick\ngeometric ideas.",
            "class": "p5.RendererGL",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.Immediate.js",
            "line": 19,
            "description": "Begin shape drawing.  This is a helpful way of generating\ncustom shapes quickly.  However in WEBGL mode, application\nperformance will likely drop as a result of too many calls to\n<a href=\"#/p5/beginShape\">beginShape()</a> / <a href=\"#/p5/endShape\">endShape()</a>.  As a high performance alternative,\nplease use p5.js geometry primitives.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "beginShape",
            "params": [
                {
                    "name": "mode",
                    "description": "webgl primitives mode.  beginShape supports the\n                      following modes:\n                      POINTS,LINES,LINE_STRIP,LINE_LOOP,TRIANGLES,\n                      TRIANGLE_STRIP,and TRIANGLE_FAN.",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "class": "p5.RendererGL",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.Immediate.js",
            "line": 66,
            "description": "adds a vertex to be drawn in a custom Shape.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "vertex",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of vertex",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of vertex",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z-coordinate of vertex",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "todo": [
                "implement handling of <a href=\"#/p5.Vector\">p5.Vector</a> args"
            ],
            "class": "p5.RendererGL",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.Immediate.js",
            "line": 118,
            "description": "End shape drawing and render vertices to screen.",
            "chainable": 1,
            "class": "p5.RendererGL",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.Retained.js",
            "line": 8,
            "description": "initializes buffer defaults. runs each time a new geometry is\nregistered",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "gId",
                    "description": "key of the geometry object",
                    "type": "String"
                }
            ],
            "class": "p5.RendererGL",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.Retained.js",
            "line": 47,
            "description": "createBuffers description",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "gId",
                    "description": "key of the geometry object",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "contains geometry data",
                    "type": "p5.Geometry"
                }
            ],
            "class": "p5.RendererGL",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.Retained.js",
            "line": 191,
            "description": "Draws buffers given a geometry key ID",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "gId",
                    "description": "ID in our geom hash",
                    "type": "String"
                }
            ],
            "chainable": 1,
            "class": "p5.RendererGL",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.Retained.js",
            "line": 292,
            "description": "Calls drawBuffers() with a scaled model/view matrix.\n\nThis is used by various 3d primitive methods (in primitives.js, eg. plane,\nbox, torus, etc...) to allow caching of un-scaled geometries. Those\ngeometries are generally created with unit-length dimensions, cached as\nsuch, and then scaled appropriately in this method prior to rendering.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "drawBuffersScaled",
            "params": [
                {
                    "name": "gId",
                    "description": "ID in our geom hash",
                    "type": "String"
                },
                {
                    "name": "scaleX",
                    "description": "the amount to scale in the X direction",
                    "type": "Number"
                },
                {
                    "name": "scaleY",
                    "description": "the amount to scale in the Y direction",
                    "type": "Number"
                },
                {
                    "name": "scaleZ",
                    "description": "the amount to scale in the Z direction",
                    "type": "Number"
                }
            ],
            "class": "p5.RendererGL",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 83,
            "description": "model view, projection, & normal\nmatrices",
            "class": "p5.RendererGL",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 215,
            "description": "Set attributes for the WebGL Drawing context.\nThis is a way of adjusting ways that the WebGL\nrenderer works to fine-tune the display and performance.\nThis should be put in setup().\nThe available attributes are:\n<br>\nalpha - indicates if the canvas contains an alpha buffer\ndefault is true\n<br><br>\ndepth - indicates whether the drawing buffer has a depth buffer\nof at least 16 bits - default is true\n<br><br>\nstencil - indicates whether the drawing buffer has a stencil buffer\nof at least 8 bits\n<br><br>\nantialias - indicates whether or not to perform anti-aliasing\ndefault is false\n<br><br>\npremultipliedAlpha - indicates that the page compositor will assume\nthe drawing buffer contains colors with pre-multiplied alpha\ndefault is false\n<br><br>\npreserveDrawingBuffer - if true the buffers will not be cleared and\nand will preserve their values until cleared or overwritten by author\n(note that p5 clears automatically on draw loop)\ndefault is true\n<br><br>\nperPixelLighting - if true, per-pixel lighting will be used in the\nlighting shader.\ndefault is false\n<br><br>",
            "itemtype": "method",
            "name": "setAttributes",
            "params": [
                {
                    "name": "key",
                    "description": "Name of attribute",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "New value of named attribute",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n}\n\nfunction draw() {\n  background(255);\n  push();\n  rotateZ(frameCount * 0.02);\n  rotateX(frameCount * 0.02);\n  rotateY(frameCount * 0.02);\n  fill(0, 0, 0);\n  box(50);\n  pop();\n}\n</code>\n</div>\n<br>\nNow with the antialias attribute set to true.\n<br>\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  setAttributes('antialias', true);\n}\n\nfunction draw() {\n  background(255);\n  push();\n  rotateZ(frameCount * 0.02);\n  rotateX(frameCount * 0.02);\n  rotateY(frameCount * 0.02);\n  fill(0, 0, 0);\n  box(50);\n  pop();\n}\n</code>\n</div>\n\n<div>\n<code>\n// press the mouse button to enable perPixelLighting\nfunction setup() {\n  createCanvas(100, 100, WEBGL);\n  noStroke();\n  fill(255);\n}\n\nvar lights = [\n  { c: '#f00', t: 1.12, p: 1.91, r: 0.2 },\n  { c: '#0f0', t: 1.21, p: 1.31, r: 0.2 },\n  { c: '#00f', t: 1.37, p: 1.57, r: 0.2 },\n  { c: '#ff0', t: 1.12, p: 1.91, r: 0.7 },\n  { c: '#0ff', t: 1.21, p: 1.31, r: 0.7 },\n  { c: '#f0f', t: 1.37, p: 1.57, r: 0.7 }\n];\n\nfunction draw() {\n  var t = millis() / 1000 + 1000;\n  background(0);\n  directionalLight(color('#222'), 1, 1, 1);\n\n  for (var i = 0; i < lights.length; i++) {\n    var light = lights[i];\n    pointLight(\n      color(light.c),\n      p5.Vector.fromAngles(t * light.t, t * light.p, width * light.r)\n    );\n  }\n\n  specularMaterial(255);\n  sphere(width * 0.1);\n\n  rotateX(t * 0.77);\n  rotateY(t * 0.83);\n  rotateZ(t * 0.91);\n  torus(width * 0.3, width * 0.07, 30, 10);\n}\n\nfunction mousePressed() {\n  setAttributes('perPixelLighting', true);\n  noStroke();\n  fill(255);\n}\nfunction mouseReleased() {\n  setAttributes('perPixelLighting', false);\n  noStroke();\n  fill(255);\n}\n</code>\n</div>"
            ],
            "alt": "a rotating cube with smoother edges",
            "class": "p5",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 348,
            "itemtype": "method",
            "name": "setAttributes",
            "params": [
                {
                    "name": "obj",
                    "description": "object with key-value pairs",
                    "type": "Object"
                }
            ],
            "class": "p5",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 405,
            "description": "[background description]",
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 474,
            "description": "Basic stroke material for geometry with a given color",
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "v1",
                    "description": "gray value,\nred or hue value (depending on the current color mode),\nor color Array, or CSS color string",
                    "type": "Number|Number[]|String|p5.Color"
                },
                {
                    "name": "v2",
                    "description": "green or saturation value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "v3",
                    "description": "blue or brightness value",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "a",
                    "description": "opacity",
                    "type": "Number",
                    "optional": true
                }
            ],
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(200, 200, WEBGL);\n}\n\nfunction draw() {\n  background(0);\n  stroke(240, 150, 150);\n  fill(100, 100, 240);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  box(75, 75, 75);\n}\n</code>\n</div>"
            ],
            "alt": "black canvas with purple cube with pink outline spinning",
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 515,
            "description": "Change weight of stroke",
            "itemtype": "method",
            "name": "strokeWeight",
            "params": [
                {
                    "name": "stroke",
                    "description": "weight to be used for drawing",
                    "type": "Number"
                }
            ],
            "example": [
                "\n<div>\n<code>\nfunction setup() {\n  createCanvas(200, 400, WEBGL);\n  setAttributes('antialias', true);\n}\n\nfunction draw() {\n  background(0);\n  noStroke();\n  translate(0, -100, 0);\n  stroke(240, 150, 150);\n  fill(100, 100, 240);\n  push();\n  strokeWeight(8);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  sphere(75);\n  pop();\n  push();\n  translate(0, 200, 0);\n  strokeWeight(1);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  sphere(75);\n  pop();\n}\n</code>\n</div>"
            ],
            "alt": "black canvas with two purple rotating spheres with pink\noutlines the sphere on top has much heavier outlines,",
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 564,
            "description": "Returns an array of [R,G,B,A] values for any pixel or grabs a section of\nan image. If no parameters are specified, the entire image is returned.\nUse the x and y parameters to get the value of one pixel. Get a section of\nthe display window by specifying additional w and h parameters. When\ngetting an image, the x and y parameters define the coordinates for the\nupper-left corner of the image, regardless of the current imageMode().\n<br><br>\nIf the pixel requested is outside of the image window, [0,0,0,255] is\nreturned.\n<br><br>\nGetting the color of a single pixel with get(x, y) is easy, but not as fast\nas grabbing the data directly from pixels[]. The equivalent statement to\nget(x, y) is using pixels[] with pixel density d",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the pixel",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the pixel",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "width",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "h",
                    "description": "height",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "color of pixel at x,y in array format\n                                   [R, G, B, A] or <a href=\"#/p5.Image\">p5.Image</a>",
                "type": "Number[]|Color|p5.Image"
            },
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 592,
            "description": "Loads the pixels data for this canvas into the pixels[] attribute.\nNote that updatePixels() and set() do not work.\nAny pixel manipulation must be done directly to the pixels[] array.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "loadPixels",
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 644,
            "description": "[resize description]",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "w",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "[description]",
                    "type": "Number"
                }
            ],
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 670,
            "description": "clears color and depth buffers\nwith r,g,b,a",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "r",
                    "description": "normalized red val.",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "normalized green val.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "normalized blue val.",
                    "type": "Number"
                },
                {
                    "name": "a",
                    "description": "normalized alpha val.",
                    "type": "Number"
                }
            ],
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 688,
            "description": "[translate description]",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "x",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "[description]",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "[description]",
                    "type": "Number"
                }
            ],
            "chainable": 1,
            "todo": [
                "implement handle for components or vector as args"
            ],
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 707,
            "description": "Scales the Model View Matrix by a vector",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "x",
                    "description": "[description]",
                    "type": "Number | p5.Vector | Array"
                },
                {
                    "name": "y",
                    "description": "y-axis scalar",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z-axis scalar",
                    "type": "Number",
                    "optional": true
                }
            ],
            "chainable": 1,
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 1028,
            "description": "turn a two dimensional array into one dimensional array",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "arr",
                    "description": "2-dimensional array",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "1-dimensional array\n[[1, 2, 3],[4, 5, 6]] -> [1, 2, 3, 4, 5, 6]",
                "type": "Array"
            },
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 1065,
            "description": "turn a p5.Vector Array into a one dimensional number array",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "arr",
                    "description": "an array of p5.Vector",
                    "type": "p5.Vector[]"
                }
            ],
            "return": {
                "description": "a one dimensional array of numbers\n[p5.Vector(1, 2, 3), p5.Vector(4, 5, 6)] ->\n[1, 2, 3, 4, 5, 6]",
                "type": "Number[]"
            },
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/webgl/p5.RendererGL.js",
            "line": 1081,
            "description": "ensures that p5 is using a 3d renderer. throws an error if not.",
            "class": "p5.RendererGL",
            "module": "Rendering",
            "submodule": "Rendering"
        },
        {
            "file": "../p5.js/src/webgl/p5.Shader.js",
            "line": 39,
            "description": "Creates, compiles, and links the shader based on its\nsources for the vertex and fragment shaders (provided\nto the constructor). Populates known attributes and\nuniforms from the shader.",
            "itemtype": "method",
            "name": "init",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Shaders"
        },
        {
            "file": "../p5.js/src/webgl/p5.Shader.js",
            "line": 103,
            "description": "Queries the active attributes for this shader and loads\ntheir names and locations into the attributes array.",
            "itemtype": "method",
            "name": "_loadAttributes",
            "access": "private",
            "tagname": "",
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Shaders"
        },
        {
            "file": "../p5.js/src/webgl/p5.Shader.js",
            "line": 137,
            "description": "Queries the active uniforms for this shader and loads\ntheir names and locations into the uniforms array.",
            "itemtype": "method",
            "name": "_loadUniforms",
            "access": "private",
            "tagname": "",
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Shaders"
        },
        {
            "file": "../p5.js/src/webgl/p5.Shader.js",
            "line": 183,
            "description": "initializes (if needed) and binds the shader program.",
            "itemtype": "method",
            "name": "bindShader",
            "access": "private",
            "tagname": "",
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Shaders"
        },
        {
            "file": "../p5.js/src/webgl/p5.Shader.js",
            "line": 202,
            "itemtype": "method",
            "name": "unbindShader",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Shaders"
        },
        {
            "file": "../p5.js/src/webgl/p5.Shader.js",
            "line": 263,
            "itemtype": "method",
            "name": "useProgram",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Shaders"
        },
        {
            "file": "../p5.js/src/webgl/p5.Shader.js",
            "line": 274,
            "description": "Wrapper around gl.uniform functions.\nAs we store uniform info in the shader we can use that\nto do type checking on the supplied data and call\nthe appropriate function.",
            "itemtype": "method",
            "name": "setUniform",
            "chainable": 1,
            "params": [
                {
                    "name": "uniformName",
                    "description": "the name of the uniform in the\nshader program",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "the data to be associated\nwith that uniform; type varies (could be a single numerical value, array,\nmatrix, or texture / sampler reference)",
                    "type": "Object|Number|Boolean|Number[]"
                }
            ],
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Shaders"
        },
        {
            "file": "../p5.js/src/webgl/p5.Shader.js",
            "line": 428,
            "itemtype": "method",
            "name": "enableAttrib",
            "chainable": 1,
            "access": "private",
            "tagname": "",
            "class": "p5.Shader",
            "module": "Lights, Camera",
            "submodule": "Shaders"
        },
        {
            "file": "../p5.js/src/webgl/p5.Texture.js",
            "line": 78,
            "description": "Initializes common texture parameters, creates a gl texture,\ntries to upload the texture for the first time if data is\nalready available.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "init",
            "class": "p5.Texture",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/p5.Texture.js",
            "line": 128,
            "description": "Checks if the source data for this texture has changed (if it's\neasy to do so) and reuploads the texture if necessary. If it's not\npossible or to expensive to do a calculation to determine wheter or\nnot the data has occurred, this method simply re-uploads the texture.",
            "itemtype": "method",
            "name": "update",
            "class": "p5.Texture",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/p5.Texture.js",
            "line": 221,
            "description": "Binds the texture to the appropriate GL target.",
            "itemtype": "method",
            "name": "bindTexture",
            "class": "p5.Texture",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/p5.Texture.js",
            "line": 234,
            "description": "Unbinds the texture from the appropriate GL target.",
            "itemtype": "method",
            "name": "unbindTexture",
            "class": "p5.Texture",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/p5.Texture.js",
            "line": 244,
            "description": "Sets how a texture is be interpolated when upscaled or downscaled.\nNearest filtering uses nearest neighbor scaling when interpolating\nLinear filtering uses WebGL's linear scaling when interpolating",
            "itemtype": "method",
            "name": "setInterpolation",
            "params": [
                {
                    "name": "downScale",
                    "description": "Specifies the texture filtering when\n                          textures are shrunk. Options are LINEAR or NEAREST",
                    "type": "String"
                },
                {
                    "name": "upScale",
                    "description": "Specifies the texture filtering when\n                        textures are magnified. Options are LINEAR or NEAREST",
                    "type": "String"
                }
            ],
            "todo": [
                "implement mipmapping filters"
            ],
            "class": "p5.Texture",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/p5.Texture.js",
            "line": 276,
            "description": "Sets the texture wrapping mode. This controls how textures behave\nwhen their uv's go outside of the 0 - 1 range. There are three options:\nCLAMP, REPEAT, and MIRROR. REPEAT & MIRROR are only available if the texture\nis a power of two size (128, 256, 512, 1024, etc.).",
            "itemtype": "method",
            "name": "setWrapMode",
            "params": [
                {
                    "name": "wrapX",
                    "description": "Controls the horizontal texture wrapping behavior",
                    "type": "String"
                },
                {
                    "name": "wrapY",
                    "description": "Controls the vertical texture wrapping behavior",
                    "type": "String"
                }
            ],
            "class": "p5.Texture",
            "module": "Lights, Camera",
            "submodule": "Material"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 54,
            "itemtype": "method",
            "name": "findImage",
            "params": [
                {
                    "name": "space",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "contains the ImageData, and pixel index into that\n                  ImageData where the free space was allocated.\nfinds free space of a given size in the ImageData list",
                "type": "Object"
            },
            "class": "ImageInfos",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 117,
            "itemtype": "method",
            "name": "setPixel",
            "params": [
                {
                    "name": "imageInfo",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "r",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "a\n\nwrites",
                    "description": "the next pixel into an indexed ImageData",
                    "type": "Number"
                }
            ],
            "class": "ImageInfos",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 160,
            "itemtype": "method",
            "name": "getGlyphInfo",
            "params": [
                {
                    "name": "glyph",
                    "description": "the x positions of points in the curve",
                    "type": "Glyph"
                }
            ],
            "return": {
                "description": "the glyphInfo for that glyph\n\ncalculates rendering info for a glyph, including the curve information,\nrow & column stripes compiled into textures.",
                "type": "Object"
            },
            "class": "FontInfo",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 193,
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "xs",
                    "description": "the x positions of points in the curve",
                    "type": "Number[]"
                },
                {
                    "name": "ys",
                    "description": "the y positions of points in the curve",
                    "type": "Number[]"
                },
                {
                    "name": "v",
                    "description": "the curve information\n\nadds a curve to the rows & columns that it intersects with",
                    "type": "Object"
                }
            ],
            "class": "FontInfo",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 205,
            "itemtype": "method",
            "name": "minMax",
            "params": [
                {
                    "name": "rg",
                    "description": "the list of values to compare",
                    "type": "Number[]"
                },
                {
                    "name": "min",
                    "description": "the initial minimum value",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "the initial maximum value\n\nfind the minimum & maximum value in a list of values",
                    "type": "Number"
                }
            ],
            "class": "FontInfo",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 235,
            "itemtype": "method",
            "name": "clamp",
            "params": [
                {
                    "name": "v",
                    "description": "the value to clamp",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "the minimum value",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "the maxmimum value\n\nclamps a value between a minimum & maximum value",
                    "type": "Number"
                }
            ],
            "class": "FontInfo",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 249,
            "itemtype": "method",
            "name": "byte",
            "params": [
                {
                    "name": "v",
                    "description": "the value to scale\n\nconverts a floating-point number in the range 0-1 to a byte 0-255",
                    "type": "Number"
                }
            ],
            "class": "FontInfo",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 275,
            "itemtype": "method",
            "name": "toQuadratic",
            "return": {
                "description": "the quadratic approximation\n\nconverts the cubic to a quadtratic approximation by\npicking an appropriate quadratic control point",
                "type": "Object"
            },
            "class": "Cubic",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 293,
            "itemtype": "method",
            "name": "quadError",
            "return": {
                "description": "the error\n\ncalculates the magnitude of error of this curve's\nquadratic approximation.",
                "type": "Number"
            },
            "class": "Cubic",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 309,
            "itemtype": "method",
            "name": "split",
            "params": [
                {
                    "name": "t",
                    "description": "the value (0-1) at which to split",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the second part of the curve\n\nsplits the cubic into two parts at a point 't' along the curve.\nthis cubic keeps its start point and its end point becomes the\npoint at 't'. the 'end half is returned.",
                "type": "Cubic"
            },
            "class": "Cubic",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 331,
            "itemtype": "method",
            "name": "splitInflections",
            "return": {
                "description": "the non-inflecting pieces of this cubic\n\nreturns an array containing 0, 1 or 2 cubics split resulting\nfrom splitting this cubic at its inflection points.\nthis cubic is (potentially) altered and returned in the list.",
                "type": "Cubic[]"
            },
            "class": "Cubic",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 387,
            "itemtype": "method",
            "name": "cubicToQuadratics",
            "params": [
                {
                    "name": "x0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cx0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cy0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cx1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "cy1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "an array of cubics whose quadratic approximations\n                   closely match the civen cubic.\n\nconverts a cubic curve to a list of quadratics.",
                "type": "Cubic[]"
            },
            "class": "Cubic",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 457,
            "itemtype": "method",
            "name": "pushLine",
            "params": [
                {
                    "name": "x0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1\n\nadd",
                    "description": "a straight line to the row/col grid of a glyph",
                    "type": "Number"
                }
            ],
            "class": "Cubic",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 472,
            "itemtype": "method",
            "name": "samePoint",
            "params": [
                {
                    "name": "x0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y0",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "x1",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "true if the two points are sufficiently close\n\ntests if two points are close enough to be considered the same",
                "type": "Boolean"
            },
            "class": "Cubic",
            "module": "Lights, Camera"
        },
        {
            "file": "../p5.js/src/webgl/text.js",
            "line": 547,
            "itemtype": "method",
            "name": "layout",
            "params": [
                {
                    "name": "dim",
                    "description": "",
                    "type": "Number[][]"
                },
                {
                    "name": "dimImageInfos",
                    "description": "",
                    "type": "ImageInfo[]"
                },
                {
                    "name": "cellImageInfos",
                    "description": "",
                    "type": "ImageInfo[]"
                }
            ],
            "return": {
                "description": "lays out the curves in a dimension (row or col) into two\nimages, one for the indices of the curves themselves, and\none containing the offset and length of those index spans.",
                "type": "Object"
            },
            "class": "Cubic",
            "module": "Lights, Camera"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/creating_reading.js:16"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/creating_reading.js:61"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/creating_reading.js:91"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/creating_reading.js:121"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/creating_reading.js:319"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/creating_reading.js:350"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/creating_reading.js:387"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/creating_reading.js:484"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/creating_reading.js:514"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/creating_reading.js:554"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/p5.Color.js:52"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/p5.Color.js:248"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/p5.Color.js:275"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/p5.Color.js:302"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/p5.Color.js:329"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/p5.Color.js:763"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/setting.js:15"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/setting.js:185"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/setting.js:223"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/setting.js:344"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/setting.js:501"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/setting.js:542"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/color/setting.js:582"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/2d_primitives.js:16"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/2d_primitives.js:149"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/2d_primitives.js:208"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/2d_primitives.js:264"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/2d_primitives.js:299"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/2d_primitives.js:353"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/2d_primitives.js:436"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/attributes.js:14"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/attributes.js:83"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/attributes.js:113"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/attributes.js:182"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/attributes.js:213"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/attributes.js:250"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/attributes.js:317"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/curves.js:13"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/curves.js:96"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/curves.js:139"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/curves.js:194"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/curves.js:273"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/curves.js:364"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/curves.js:406"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/curves.js:502"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:22"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:70"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:270"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:270"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:270"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:396"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:441"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:506"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:566"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:652"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:718"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:810"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:810"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:810"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/shape/vertex.js:810"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/constants.js:58"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/constants.js:77"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/constants.js:96"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/constants.js:115"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/constants.js:134"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:22"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:53"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:80"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:112"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:171"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:272"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:297"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:316"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:335"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:351"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:367"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:445"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:496"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../p5.js/src/core/environment.js:531"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../p5.js/src/core/environment.js:551"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:551"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:608"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:639"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/environment.js:662"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/main.js:49"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/main.js:90"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/main.js:121"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/main.js:408"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:51"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:116"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:153"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:188"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:249"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:298"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:364"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:418"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:474"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:532"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:575"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:642"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:677"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:719"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:767"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:807"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:856"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:894"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Element.js:932"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/p5.Graphics.js:65"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/rendering.js:17"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/rendering.js:119"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/rendering.js:174"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/rendering.js:197"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/rendering.js:236"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/structure.js:12"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/structure.js:74"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/structure.js:116"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/structure.js:181"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/structure.js:247"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/transform.js:13"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/transform.js:135"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/transform.js:161"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/transform.js:201"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/transform.js:231"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/transform.js:261"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/transform.js:291"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/transform.js:366"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/transform.js:405"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/core/transform.js:444"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/acceleration.js:91"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/acceleration.js:125"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/acceleration.js:158"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/acceleration.js:194"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/acceleration.js:239"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/acceleration.js:283"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/acceleration.js:341"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/acceleration.js:380"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/acceleration.js:423"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/acceleration.js:467"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/acceleration.js:498"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/acceleration.js:557"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/keyboard.js:18"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/keyboard.js:45"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/keyboard.js:74"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/keyboard.js:107"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/keyboard.js:194"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/keyboard.js:246"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/keyboard.js:310"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:22"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:48"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:74"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:106"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:137"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:174"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:211"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:252"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:294"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:333"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:424"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:479"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:560"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:637"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:715"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:785"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/mouse.js:870"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/touch.js:12"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/touch.js:74"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/touch.js:149"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/events/touch.js:222"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/image.js:22"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/image.js:102"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/image.js:195"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/loading_displaying.js:17"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../p5.js/src/image/loading_displaying.js:108"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/loading_displaying.js:125"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/loading_displaying.js:296"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/loading_displaying.js:396"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/loading_displaying.js:462"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/p5.Image.js:90"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/p5.Image.js:117"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/p5.Image.js:152"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/p5.Image.js:231"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/p5.Image.js:267"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/p5.Image.js:315"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/p5.Image.js:360"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/p5.Image.js:398"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/p5.Image.js:483"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/p5.Image.js:564"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/p5.Image.js:627"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/p5.Image.js:663"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/p5.Image.js:785"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/pixels.js:14"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/pixels.js:83"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/pixels.js:177"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/pixels.js:236"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/pixels.js:415"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/pixels.js:494"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/pixels.js:531"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/image/pixels.js:605"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/files.js:19"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/files.js:180"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/files.js:293"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/files.js:603"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../p5.js/src/io/files.js:714"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/files.js:714"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/files.js:1510"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/files.js:1562"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/files.js:1624"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:56"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:120"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:168"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:214"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:263"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:328"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:523"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:576"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:618"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:879"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:944"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:994"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:1040"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:1085"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:1132"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:1177"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:1230"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.Table.js:1296"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.TableRow.js:42"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.TableRow.js:106"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.TableRow.js:150"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.TableRow.js:195"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.TableRow.js:243"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.TableRow.js:299"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/io/p5.XML.js:11"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:12"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:36"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:76"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:121"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:190"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:240"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:279"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:324"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:379"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:418"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:474"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:524"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:574"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:627"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:661"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:700"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/calculation.js:747"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/math.js:12"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/noise.js:40"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/noise.js:187"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/noise.js:253"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/p5.Vector.js:12"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/random.js:48"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/random.js:79"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/random.js:166"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/trigonometry.js:124"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/trigonometry.js:160"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/trigonometry.js:188"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/trigonometry.js:216"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/math/trigonometry.js:296"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../p5.js/src/math/trigonometry.js:332"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../p5.js/src/math/trigonometry.js:347"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../p5.js/src/math/trigonometry.js:362"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/typography/attributes.js:13"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/typography/attributes.js:84"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/typography/attributes.js:122"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/typography/attributes.js:154"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/typography/attributes.js:189"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/typography/loading_displaying.js:16"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/typography/loading_displaying.js:143"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/typography/loading_displaying.js:230"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/typography/p5.Font.js:43"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/conversion.js:12"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/string_functions.js:15"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/string_functions.js:44"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/string_functions.js:132"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/string_functions.js:237"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/string_functions.js:313"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/string_functions.js:375"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/string_functions.js:437"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/string_functions.js:526"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/time_date.js:12"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/time_date.js:34"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/time_date.js:56"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/time_date.js:78"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/time_date.js:101"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/time_date.js:123"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/utilities/time_date.js:145"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/3d_primitives.js:15"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/interaction.js:13"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/interaction.js:146"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/interaction.js:146"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/interaction.js:146"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/interaction.js:146"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/interaction.js:146"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/interaction.js:380"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/light.js:12"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/light.js:101"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/light.js:212"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/loading.js:14"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/loading.js:14"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/loading.js:244"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/material.js:14"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../p5.js/src/webgl/material.js:83"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/material.js:83"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/material.js:176"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/material.js:211"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/material.js:301"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/material.js:350"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/p5.Camera.js:15"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/p5.Camera.js:61"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/p5.Camera.js:126"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/p5.Camera.js:209"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/p5.Camera.js:487"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/p5.Camera.js:546"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/p5.Camera.js:604"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/p5.Camera.js:752"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/p5.Camera.js:824"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/p5.Camera.js:1089"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/p5.RendererGL.js:215"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/p5.RendererGL.js:427"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/p5.RendererGL.js:474"
        },
        {
            "message": "unknown tag: alt",
            "line": " ../p5.js/src/webgl/p5.RendererGL.js:515"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " ../p5.js/src/webgl/text.js:117"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../p5.js/src/webgl/text.js:160"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " ../p5.js/src/webgl/text.js:193"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " ../p5.js/src/webgl/text.js:205"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " ../p5.js/src/webgl/text.js:235"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " ../p5.js/src/webgl/text.js:249"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " ../p5.js/src/webgl/text.js:387"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ../p5.js/src/webgl/text.js:387"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " ../p5.js/src/webgl/text.js:457"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " ../p5.js/src/webgl/text.js:472"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " ../p5.js/src/webgl/text.js:547"
        },
        {
            "message": "Missing item type\nConversions adapted from <http://www.easyrgb.com/en/math.php>.\n\nIn these functions, hue is always in the range [0, 1], just like all other\ncomponents are in the range [0, 1]. 'Brightness' and 'value' are used\ninterchangeably.",
            "line": " ../p5.js/src/color/color_conversion.js:10"
        },
        {
            "message": "Missing item type\nConvert an HSBA array to HSLA.",
            "line": " ../p5.js/src/color/color_conversion.js:21"
        },
        {
            "message": "Missing item type\nConvert an HSBA array to RGBA.",
            "line": " ../p5.js/src/color/color_conversion.js:47"
        },
        {
            "message": "Missing item type\nConvert an HSLA array to HSBA.",
            "line": " ../p5.js/src/color/color_conversion.js:102"
        },
        {
            "message": "Missing item type\nConvert an HSLA array to RGBA.\n\nWe need to change basis from HSLA to something that can be more easily be\nprojected onto RGBA. We will choose hue and brightness as our first two\ncomponents, and pick a convenient third one ('zest') so that we don't need\nto calculate formal HSBA saturation.",
            "line": " ../p5.js/src/color/color_conversion.js:125"
        },
        {
            "message": "Missing item type\nConvert an RGBA array to HSBA.",
            "line": " ../p5.js/src/color/color_conversion.js:189"
        },
        {
            "message": "Missing item type\nConvert an RGBA array to HSLA.",
            "line": " ../p5.js/src/color/color_conversion.js:228"
        },
        {
            "message": "Missing item type\nHue is the same in HSB and HSL, but the maximum value may be different.\nThis function will return the HSB-normalized saturation when supplied with\nan HSB color object, but will default to the HSL-normalized saturation\notherwise.",
            "line": " ../p5.js/src/color/p5.Color.js:410"
        },
        {
            "message": "Missing item type\nSaturation is scaled differently in HSB and HSL. This function will return\nthe HSB saturation when supplied with an HSB color object, but will default\nto the HSL saturation otherwise.",
            "line": " ../p5.js/src/color/p5.Color.js:441"
        },
        {
            "message": "Missing item type\nCSS named colors.",
            "line": " ../p5.js/src/color/p5.Color.js:460"
        },
        {
            "message": "Missing item type\nThese regular expressions are used to build up the patterns for matching\nviable CSS color strings: fragmenting the regexes in this way increases the\nlegibility and comprehensibility of the code.\n\nNote that RGB values of .9 are not parsed by IE, but are supported here for\ncolor string consistency.",
            "line": " ../p5.js/src/color/p5.Color.js:613"
        },
        {
            "message": "Missing item type\nFull color string patterns. The capture groups are necessary.",
            "line": " ../p5.js/src/color/p5.Color.js:626"
        },
        {
            "message": "Missing item type\nFor a number of different inputs, returns a color formatted as [r, g, b, a]\narrays, with each component normalized between 0 and 1.",
            "line": " ../p5.js/src/color/p5.Color.js:763"
        },
        {
            "message": "Missing item type\nFor HSB and HSL, interpret the gray level as a brightness/lightness\nvalue (they are equivalent when chroma is zero). For RGB, normalize the\ngray level according to the blue maximum.",
            "line": " ../p5.js/src/color/p5.Color.js:989"
        },
        {
            "message": "Missing item type\nReturns the current framerate.",
            "line": " ../p5.js/src/core/environment.js:246"
        },
        {
            "message": "Missing item type\nSpecifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within <a href=\"#/p5/setup\">setup()</a> is\nrecommended. The default rate is 60 frames per second.\n\nCalling <a href=\"#/p5/frameRate\">frameRate()</a> with no arguments returns the current framerate.",
            "line": " ../p5.js/src/core/environment.js:256"
        },
        {
            "message": "Missing item type",
            "line": " ../p5.js/src/core/error_helpers.js:1"
        },
        {
            "message": "Missing item type\nPrints out a fancy, colorful message to the console log",
            "line": " ../p5.js/src/core/error_helpers.js:65"
        },
        {
            "message": "Missing item type\nValidates parameters\nparam  {String}               func    the name of the function\nparam  {Array}                args    user input arguments\n\nexample:\n var a;\n ellipse(10,10,a,5);\nconsole ouput:\n \"It looks like ellipse received an empty variable in spot #2.\"\n\nexample:\n ellipse(10,\"foo\",5,5);\nconsole output:\n \"ellipse was expecting a number for parameter #1,\n          received \"foo\" instead.\"",
            "line": " ../p5.js/src/core/error_helpers.js:563"
        },
        {
            "message": "Missing item type\nPrints out all the colors in the color pallete with white text.\nFor color blindness testing.",
            "line": " ../p5.js/src/core/error_helpers.js:624"
        },
        {
            "message": "Missing item type",
            "line": " ../p5.js/src/core/helpers.js:1"
        },
        {
            "message": "Missing item type\n_globalInit\n\nTODO: ???\nif sketch is on window\nassume \"global\" mode\nand instantiate p5 automatically\notherwise do nothing",
            "line": " ../p5.js/src/core/init.js:5"
        },
        {
            "message": "Missing item type",
            "line": " ../p5.js/src/core/legacy.js:1"
        },
        {
            "message": "Missing item type\nHelper fxn for sharing pixel methods",
            "line": " ../p5.js/src/core/p5.Element.js:1094"
        },
        {
            "message": "Missing item type\nResize our canvas element.",
            "line": " ../p5.js/src/core/p5.Renderer.js:96"
        },
        {
            "message": "Missing item type\nHelper fxn to check font type (system or otf)",
            "line": " ../p5.js/src/core/p5.Renderer.js:300"
        },
        {
            "message": "Missing item type\nHelper fxn to measure ascent and descent.\nAdapted from http://stackoverflow.com/a/25355178",
            "line": " ../p5.js/src/core/p5.Renderer.js:353"
        },
        {
            "message": "Missing item type\np5.Renderer2D\nThe 2D graphics canvas renderer class.\nextends p5.Renderer",
            "line": " ../p5.js/src/core/p5.Renderer2D.js:9"
        },
        {
            "message": "Missing item type\nGenerate a cubic Bezier representing an arc on the unit circle of total\nangle `size` radians, beginning `start` radians above the x-axis. Up to\nfour of these curves are combined to make a full arc.\n\nSee www.joecridge.me/bezier.pdf for an explanation of the method.",
            "line": " ../p5.js/src/core/p5.Renderer2D.js:414"
        },
        {
            "message": "Missing item type\nshim for Uint8ClampedArray.slice\n(allows arrayCopy to work with pixels[])\nwith thanks to http://halfpapstudios.com/blog/tag/html5-canvas/\nEnumerable set to false to protect for...in from\nUint8ClampedArray.prototype pollution.",
            "line": " ../p5.js/src/core/shim.js:23"
        },
        {
            "message": "Missing item type\nthis is implementation of Object.assign() which is unavailable in\nIE11 and (non-Chrome) Android browsers.\nThe assign() method is used to copy the values of all enumerable\nown properties from one or more source objects to a target object.\nIt will return the target object.\nModified from https://github.com/ljharb/object.assign",
            "line": " ../p5.js/src/core/shim.js:45"
        },
        {
            "message": "Missing item type\nprivate helper function to handle the user passing in objects\nduring construction or calls to create()",
            "line": " ../p5.js/src/data/p5.TypedDict.js:203"
        },
        {
            "message": "Missing item type\nprivate helper function to ensure that the user passed in valid\nvalues for the Dictionary type",
            "line": " ../p5.js/src/data/p5.TypedDict.js:382"
        },
        {
            "message": "Missing item type\nprivate helper function to ensure that the user passed in valid\nvalues for the Dictionary type",
            "line": " ../p5.js/src/data/p5.TypedDict.js:425"
        },
        {
            "message": "Missing item type\nprivate helper function for finding lowest or highest value\nthe argument 'flip' is used to flip the comparison arrow\nfrom 'less than' to 'greater than'",
            "line": " ../p5.js/src/data/p5.TypedDict.js:542"
        },
        {
            "message": "Missing item type\nprivate helper function for finding lowest or highest key\nthe argument 'flip' is used to flip the comparison arrow\nfrom 'less than' to 'greater than'",
            "line": " ../p5.js/src/data/p5.TypedDict.js:609"
        },
        {
            "message": "Missing item type\n_updatePAccelerations updates the pAcceleration values",
            "line": " ../p5.js/src/events/acceleration.js:80"
        },
        {
            "message": "Missing item type\nHolds the key codes of currently pressed keys.",
            "line": " ../p5.js/src/events/keyboard.js:12"
        },
        {
            "message": "Missing item type\nThe onblur function is called when the user is no longer focused\non the p5 element. Because the keyup events will not fire if the user is\nnot focused on the element we must assume all keys currently down have\nbeen released.",
            "line": " ../p5.js/src/events/keyboard.js:300"
        },
        {
            "message": "Missing item type\nThe checkDownKeys function returns a boolean true if any keys pressed\nand a false if no keys are currently pressed.\n\nHelps avoid instances where a multiple keys are pressed simultaneously and\nreleasing a single key will then switch the\nkeyIsPressed property to true.",
            "line": " ../p5.js/src/events/keyboard.js:387"
        },
        {
            "message": "Missing item type\nThis module defines the filters for use with image buffers.\n\nThis module is basically a collection of functions stored in an object\nas opposed to modules. The functions are destructive, modifying\nthe passed in canvas rather than creating a copy.\n\nGenerally speaking users of this module will use the Filters.apply method\non a canvas to create an effect.\n\nA number of functions are borrowed/adapted from\nhttp://www.html5rocks.com/en/tutorials/canvas/imagefilters/\nor the java processing implementation.",
            "line": " ../p5.js/src/image/filters.js:3"
        },
        {
            "message": "Missing item type\nReturns the pixel buffer for a canvas",
            "line": " ../p5.js/src/image/filters.js:26"
        },
        {
            "message": "Missing item type\nReturns a 32 bit number containing ARGB data at ith pixel in the\n1D array containing pixels data.",
            "line": " ../p5.js/src/image/filters.js:46"
        },
        {
            "message": "Missing item type\nModifies pixels RGBA values to values contained in the data object.",
            "line": " ../p5.js/src/image/filters.js:67"
        },
        {
            "message": "Missing item type\nReturns the ImageData object for a canvas\nhttps://developer.mozilla.org/en-US/docs/Web/API/ImageData",
            "line": " ../p5.js/src/image/filters.js:87"
        },
        {
            "message": "Missing item type\nReturns a blank ImageData object.",
            "line": " ../p5.js/src/image/filters.js:107"
        },
        {
            "message": "Missing item type\nApplys a filter function to a canvas.\n\nThe difference between this and the actual filter functions defined below\nis that the filter functions generally modify the pixel buffer but do\nnot actually put that data back to the canvas (where it would actually\nupdate what is visible). By contrast this method does make the changes\nactually visible in the canvas.\n\nThe apply method is the method that callers of this module would generally\nuse. It has been separated from the actual filters to support an advanced\nuse case of creating a filter chain that executes without actually updating\nthe canvas in between everystep.",
            "line": " ../p5.js/src/image/filters.js:122"
        },
        {
            "message": "Missing item type\nConverts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "line": " ../p5.js/src/image/filters.js:159"
        },
        {
            "message": "Missing item type\nConverts any colors in the image to grayscale equivalents.\nNo parameter is used.\n\nBorrowed from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/",
            "line": " ../p5.js/src/image/filters.js:193"
        },
        {
            "message": "Missing item type\nSets the alpha channel to entirely opaque. No parameter is used.",
            "line": " ../p5.js/src/image/filters.js:216"
        },
        {
            "message": "Missing item type\nSets each pixel to its inverse value. No parameter is used.",
            "line": " ../p5.js/src/image/filters.js:232"
        },
        {
            "message": "Missing item type\nLimits each channel of the image to the number of colors specified as\nthe parameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n\nAdapted from java based processing implementation",
            "line": " ../p5.js/src/image/filters.js:247"
        },
        {
            "message": "Missing item type\nreduces the bright areas in an image",
            "line": " ../p5.js/src/image/filters.js:279"
        },
        {
            "message": "Missing item type\nincreases the bright areas in an image",
            "line": " ../p5.js/src/image/filters.js:367"
        },
        {
            "message": "Missing item type\nThis module defines the p5 methods for the <a href=\"#/p5.Image\">p5.Image</a> class\nfor drawing images to the main display canvas.",
            "line": " ../p5.js/src/image/image.js:8"
        },
        {
            "message": "Missing item type\nValidates clipping params. Per drawImage spec sWidth and sHight cannot be\nnegative or greater than image intrinsic width and height",
            "line": " ../p5.js/src/image/loading_displaying.js:108"
        },
        {
            "message": "Missing item type\nApply the current tint color to the input image, return the resulting\ncanvas.",
            "line": " ../p5.js/src/image/loading_displaying.js:425"
        },
        {
            "message": "Missing item type\nThis module defines the <a href=\"#/p5.Image\">p5.Image</a> class and P5 methods for\ndrawing images to the main display canvas.",
            "line": " ../p5.js/src/image/p5.Image.js:9"
        },
        {
            "message": "Missing item type\nHelper fxn for sharing pixel methods",
            "line": " ../p5.js/src/image/p5.Image.js:222"
        },
        {
            "message": "Missing item type\nGenerate a blob of file data as a url to prepare for download.\nAccepts an array of data, a filename, and an extension (optional).\nThis is a private function because it does not do any formatting,\nbut it is used by <a href=\"#/p5/saveStrings\">saveStrings</a>, <a href=\"#/p5/saveJSON\">saveJSON</a>, <a href=\"#/p5/saveTable\">saveTable</a> etc.",
            "line": " ../p5.js/src/io/files.js:1750"
        },
        {
            "message": "Missing item type\nReturns a file extension, or another string\nif the provided parameter has no extension.",
            "line": " ../p5.js/src/io/files.js:1819"
        },
        {
            "message": "Missing item type\nReturns true if the browser is Safari, false if not.\nSafari makes trouble for downloading files.",
            "line": " ../p5.js/src/io/files.js:1852"
        },
        {
            "message": "Missing item type\nHelper function, a callback for download that deletes\nan invisible anchor element from the DOM once the file\nhas been automatically downloaded.",
            "line": " ../p5.js/src/io/files.js:1864"
        },
        {
            "message": "Missing item type\nTable Options\n<p>Generic class for handling tabular data, typically from a\nCSV, TSV, or other sort of spreadsheet file.</p>\n<p>CSV files are\n<a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">\ncomma separated values</a>, often with the data in quotes. TSV\nfiles use tabs as separators, and usually don't bother with the\nquotes.</p>\n<p>File names should end with .csv if they're comma separated.</p>\n<p>A rough \"spec\" for CSV can be found\n<a href=\"http://tools.ietf.org/html/rfc4180\">here</a>.</p>\n<p>To load files, use the <a href=\"#/p5/loadTable\">loadTable</a> method.</p>\n<p>To save tables to your computer, use the <a href=\"#/p5/save\">save</a> method\n or the <a href=\"#/p5/saveTable\">saveTable</a> method.</p>\n\nPossible options include:\n<ul>\n<li>csv - parse the table as comma-separated values\n<li>tsv - parse the table as tab-separated values\n<li>header - this table has a header (title) row\n</ul>",
            "line": " ../p5.js/src/io/p5.Table.js:11"
        },
        {
            "message": "Missing item type\nMultiplies a vector by a scalar and returns a new vector.",
            "line": " ../p5.js/src/math/p5.Vector.js:1611"
        },
        {
            "message": "Missing item type\nDivides a vector by a scalar and returns a new vector.",
            "line": " ../p5.js/src/math/p5.Vector.js:1638"
        },
        {
            "message": "Missing item type\nCalculates the dot product of two vectors.",
            "line": " ../p5.js/src/math/p5.Vector.js:1665"
        },
        {
            "message": "Missing item type\nCalculates the cross product of two vectors.",
            "line": " ../p5.js/src/math/p5.Vector.js:1679"
        },
        {
            "message": "Missing item type\nCalculates the Euclidean distance between two points (considering a\npoint as a vector object).",
            "line": " ../p5.js/src/math/p5.Vector.js:1693"
        },
        {
            "message": "Missing item type\nLinear interpolate a vector to another vector and return the result as a\nnew vector.",
            "line": " ../p5.js/src/math/p5.Vector.js:1708"
        },
        {
            "message": "Missing item type\nHelper function to measure ascent and descent.",
            "line": " ../p5.js/src/typography/attributes.js:282"
        },
        {
            "message": "Missing item type\nReturns the set of opentype glyphs for the supplied string.\n\nNote that there is not a strict one-to-one mapping between characters\nand glyphs, so the list of returned glyphs can be larger or smaller\n than the length of the given string.",
            "line": " ../p5.js/src/typography/p5.Font.js:256"
        },
        {
            "message": "Missing item type\nReturns an opentype path for the supplied string and position.",
            "line": " ../p5.js/src/typography/p5.Font.js:271"
        },
        {
            "message": "Missing item type",
            "line": " ../p5.js/src/webgl/3d_primitives.js:259"
        },
        {
            "message": "Missing item type\nDraws a point, a coordinate in space at the dimension of one pixel,\ngiven x, y and z coordinates. The color of the point is determined\nby the current stroke, while the point size is determined by current\nstroke weight.",
            "line": " ../p5.js/src/webgl/3d_primitives.js:745"
        },
        {
            "message": "Missing item type\nDraw a line given two points",
            "line": " ../p5.js/src/webgl/3d_primitives.js:1162"
        },
        {
            "message": "Missing item type\nParse OBJ lines into model. For reference, this is what a simple model of a\nsquare might look like:\n\nv -0.5 -0.5 0.5\nv -0.5 -0.5 -0.5\nv -0.5 0.5 -0.5\nv -0.5 0.5 0.5\n\nf 4 3 2 1",
            "line": " ../p5.js/src/webgl/loading.js:135"
        },
        {
            "message": "Missing item type",
            "line": " ../p5.js/src/webgl/material.js:399"
        },
        {
            "message": "Missing item type\nCreate a 2D array for establishing stroke connections",
            "line": " ../p5.js/src/webgl/p5.Geometry.js:190"
        },
        {
            "message": "Missing item type\nCreate 4 vertices for each stroke line, two at the beginning position\nand two at the end position. These vertices are displaced relative to\nthat line's normal on the GPU",
            "line": " ../p5.js/src/webgl/p5.Geometry.js:211"
        },
        {
            "message": "Missing item type",
            "line": " ../p5.js/src/webgl/p5.Matrix.js:1"
        },
        {
            "message": "Missing item type\nPRIVATE",
            "line": " ../p5.js/src/webgl/p5.Matrix.js:673"
        },
        {
            "message": "Missing item type\nWelcome to RendererGL Immediate Mode.\nImmediate mode is used for drawing custom shapes\nfrom a set of vertices.  Immediate Mode is activated\nwhen you call <a href=\"#/p5/beginShape\">beginShape()</a> & de-activated when you call <a href=\"#/p5/endShape\">endShape()</a>.\nImmediate mode is a style of programming borrowed\nfrom OpenGL's (now-deprecated) immediate mode.\nIt differs from p5.js' default, Retained Mode, which caches\ngeometries and buffers on the CPU to reduce the number of webgl\ndraw calls. Retained mode is more efficient & performative,\nhowever, Immediate Mode is useful for sketching quick\ngeometric ideas.",
            "line": " ../p5.js/src/webgl/p5.RendererGL.Immediate.js:1"
        },
        {
            "message": "Missing item type\nEnd shape drawing and render vertices to screen.",
            "line": " ../p5.js/src/webgl/p5.RendererGL.Immediate.js:118"
        },
        {
            "message": "Missing item type\ninitializes buffer defaults. runs each time a new geometry is\nregistered",
            "line": " ../p5.js/src/webgl/p5.RendererGL.Retained.js:8"
        },
        {
            "message": "Missing item type\ncreateBuffers description",
            "line": " ../p5.js/src/webgl/p5.RendererGL.Retained.js:47"
        },
        {
            "message": "Missing item type\nDraws buffers given a geometry key ID",
            "line": " ../p5.js/src/webgl/p5.RendererGL.Retained.js:191"
        },
        {
            "message": "Missing item type\nmodel view, projection, & normal\nmatrices",
            "line": " ../p5.js/src/webgl/p5.RendererGL.js:83"
        },
        {
            "message": "Missing item type\n[background description]",
            "line": " ../p5.js/src/webgl/p5.RendererGL.js:405"
        },
        {
            "message": "Missing item type\n[resize description]",
            "line": " ../p5.js/src/webgl/p5.RendererGL.js:644"
        },
        {
            "message": "Missing item type\nclears color and depth buffers\nwith r,g,b,a",
            "line": " ../p5.js/src/webgl/p5.RendererGL.js:670"
        },
        {
            "message": "Missing item type\n[translate description]",
            "line": " ../p5.js/src/webgl/p5.RendererGL.js:688"
        },
        {
            "message": "Missing item type\nScales the Model View Matrix by a vector",
            "line": " ../p5.js/src/webgl/p5.RendererGL.js:707"
        },
        {
            "message": "Missing item type\nturn a two dimensional array into one dimensional array",
            "line": " ../p5.js/src/webgl/p5.RendererGL.js:1028"
        },
        {
            "message": "Missing item type\nturn a p5.Vector Array into a one dimensional number array",
            "line": " ../p5.js/src/webgl/p5.RendererGL.js:1065"
        },
        {
            "message": "Missing item type\nensures that p5 is using a 3d renderer. throws an error if not.",
            "line": " ../p5.js/src/webgl/p5.RendererGL.js:1081"
        }
    ]
}
